open "basics";;

species Un_Seul_test =

  signature a_un_logement_de_surface_suffisante : Self -> bool;
  signature a_un_logement_disposant_de_sanitaire : Self -> bool;
  signature a_un_logement_disposant_de_chauffage : Self -> bool;
  signature a_un_logement_disposant_de_climatisation : Self -> bool;  
  signature a_un_logement_disposant_d_un_acces_handicape : Self -> bool;

  logical let a_un_logement_decent (ucit : Self) =
  a_un_logement_de_surface_suffisante (ucit) ->  
  a_un_logement_disposant_de_sanitaire (ucit) ->
  a_un_logement_disposant_de_chauffage (ucit) ->
  a_un_logement_disposant_de_climatisation (ucit) ->  
  a_un_logement_disposant_d_un_acces_handicape (ucit);

  logical let un_citoyen_est_loge_decemment (ucit : Self) =
    (a_un_logement_decent (ucit));
  
  property un_citoyen_est_loge_decemment_pr : all ucit : Self,
  un_citoyen_est_loge_decemment (ucit);

  logical let un_citoyen_n_est_pas_loge_decemment (ucit : Self) =
    ~(a_un_logement_disposant_de_sanitaire (ucit));
 
  property un_citoyen_n_est_pas_loge_decemment_pr : all ucit : Self,
  un_citoyen_n_est_pas_loge_decemment (ucit);

  theorem est_conforme_1 :
  all ucit : Self,
  un_citoyen_est_loge_decemment (ucit)
  proof = by property un_citoyen_n_est_pas_loge_decemment_pr
  ;

  theorem est_non_conforme_1 :
  all ucit : Self,
  un_citoyen_est_loge_decemment (ucit)
  proof = by property un_citoyen_est_loge_decemment_pr
  ;

(*
  theorem est_conforme_2 :
  un_citoyen_est_loge_decemment_pr
  proof = by property un_citoyen_est_loge_decemment_pr
  ;
*)
end
;;

