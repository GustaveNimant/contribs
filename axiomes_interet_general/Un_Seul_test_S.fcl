open "basics";;

species Un_Logement =

  signature dispose_d_une_surface_suffisante : Self -> bool;
  signature dispose_de_sanitaire : Self -> bool;
  signature dispose_de_chauffage : Self -> bool;
  signature dispose_de_climatisation : Self -> bool;  

  logical let est_un_logement_decent (ulog : Self) =
  dispose_d_une_surface_suffisante (ulog) ->  
  dispose_de_sanitaire (ulog) ->
  dispose_de_chauffage (ulog) ->
  dispose_de_climatisation (ulog);

  property les_citoyens_sont_loges_decemment_pr : all ulog : Self,
  est_un_logement_decent (ulog);

  logical let un_citoyen_n_est_pas_loge_decemment (ulog : Self) =
    ~(dispose_de_sanitaire (ulog));
 
  property un_citoyen_n_est_pas_loge_decemment_pr : ex ulog : Self,
  un_citoyen_n_est_pas_loge_decemment (ulog);

  theorem est_conforme_1 :
  all ulog : Self,
    est_un_logement_decent (ulog)
  proof = by property les_citoyens_sont_loges_decemment_pr
  ;

  theorem est_conforme_2 :
  all ulog : Self,
  dispose_d_une_surface_suffisante (ulog)
  proof = by property les_citoyens_sont_loges_decemment_pr
  ;

(*

  theorem est_non_conforme_1 :
  all ulog : Self,
  un_citoyen_est_loge_decemment (ulog)
  proof = by property les_citoyens_sont_loges_decemment_pr
  ;


  theorem est_conforme_2 :
  les_citoyens_sont_loges_decemment_pr
  proof = by property les_citoyens_sont_loges_decemment_pr
  ;
*)
end
;;

