open "basics";;

open "Un_Bureau_de_vote_S";;
open "Un_Parlementaire_S";;
open "Un_Scrutin_S";;
open "Un_Territoire_francais_S";;
open "Une_Origine_S";;
open "Une_Race_S";;
open "Une_Religion_S";;

-- InH:  Un_Depute_S           Un_Senateur_S
-- InH:      \                  /
-- InH:       v                v
-- InH:       Un_Parlementaire_S  Le_President_de_la_republique_S  Un_Elu_europeen_S  Un_Elu_regional_S  Un_Elu_cantonal_S  Un_Elu_municipal_S  
-- InH:                |
-- InH:                v
-- InH:             Un_Elu_S
-- InH:                |
-- InH:                v
-- InH:        Un_Citoyen_electeur_S
-- InH:                |
-- InH:                v
-- InH:           Un_Francais_S
-- InH:                |
-- InH:                v
-- InH:         Un_Etre_humain_S
 
species Un_Depute_S (
  URac is Une_Race_S,
  UOri is Une_Origine_S,
  URel is Une_Religion_S,
  UTfr is Un_Territoire_francais_S,
  UScr is Un_Scrutin_S,  
  UBvo is Un_Bureau_de_vote_S (UTfr)
) = 
  
  inherit Un_Parlementaire_S (URac, UOri, URel, UTfr, UScr, UBvo);
  
  let est_un_depute (self : Self) = true;

  let est_un_senateur (self : Self) = false;

  logical let est_elu_au_suffrage_direct (self : Self, uscr : UScr) =
        est_elu_par_le_scrutin (self, uscr) ->
        UScr!est_une_election_legislative (uscr);

  signature est_le_president_de_l_assemblee_nationale : Self -> bool;

  signature le_president_de_l_assemblee_nationale_a_ete_consulte_par_le_president_de_la_republique : Self -> bool;

  
end;;