open "basics";;
open "Un_Francais_S";;
open "Un_Scrutin_S";;
open "Un_Bureau_de_vote_S";;
open "Un_Territoire_S";;
open "Une_Origine_S";;
open "Une_Race_S";;
open "Une_Religion_S";;

-- InH:  Un_Depute_S           Un_Senateur_S
-- InH:      \                  /
-- InH:       v                v
-- InH:       Un_Parlementaire_S  Le_President_de_la_republique_S  Un_Elu_europeen_S  Un_Elu_regional_S  Un_Elu_cantonal_S  Un_Elu_municipal_S  
-- InH:                |
-- InH:                v
-- InH:             Un_Elu_S
-- InH:                |
-- InH:                v
-- InH:        Un_Citoyen_electeur_S
-- InH:                |
-- InH:                v
-- InH:           Un_Francais_S
-- InH:                |
-- InH:                v
-- InH:         Un_Etre_humain_S
 
species Un_Citoyen_electeur_S (
  URac is Une_Race_S,
  UOri is Une_Origine_S,
  URel is Une_Religion_S,
  UTer is Un_Territoire_S,
  UScr is Un_Scrutin_S, 
  UBvo is Un_Bureau_de_vote_S (UTer)
) =

  inherit Un_Francais_S (URac, UOri, URel, UTer);	
  
  signature numero_carte_electeur : Self -> int;

  signature vote_a_un_bureau_de_vote : Self -> UBvo;

  signature participe_au_scrutin : Self -> UScr -> bool;

  logical let participe_a_un_referendum (ucel : Self, uscr : UScr) =
    participe_au_scrutin (ucel, uscr) 
    /\
    UScr!est_un_referendum (uscr);

  signature participe_a_un_suffrage_universel : Self -> bool;

  signature participe_a_un_suffrage_direct : Self -> bool;

  signature est_un_representant_du_peuple : Self -> bool;

  logical let est_un_citoyen_electeur (ucel : Self) =
    a_la_nationalite_francaise (ucel) -> 
    est_un_adulte (ucel) ->
    (~~(est_dechu_de_ses_droits (ucel))) ->
    (numero_carte_electeur (ucel) > 0);
 
end;;

