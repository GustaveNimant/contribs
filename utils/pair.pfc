46
This is a proof cache file generated by zvtov.
35
zvtov version 0.6.0 [32] 2009-12-03
2097
zenon -x focal -q -short -max-time 5m -x induct
zenon version 0.8.0 [a263] 2014-10-21
$Id: 8d3e74063353abcfefb6c4de625febcd0a10705c $
$Id: 0bb7ad8565ca1ee59ff5edffa7ed2b2d882c4f93 $
$Id: 8e2e984e1f30ddc3be6823ddc9ccf8f6877e7be1 $
$Id: e9a1445bc3b916bc344e12b5e1465a20b7569e8a $
$Id: 3543f411fd78f652dbf8224d7fe56e5a2c83df42 $
$Id: c483db8583b833b9d90ee5c1b90af4da4befefcf $
$Id: e962f33dc5753e15a88c3aef2170d1c552a80be7 $
$Id: 239c76ade6485f65b50499d4af616ed6394f9892 $
$Id: 960020f638c3d1f11c58184ba83acf7a567f497e $
$Id: 0d2f93a609978187340ccdc540d8b4709e3e3626 $
$Id: 0bba51e302cc27e4dcf7dd8783da6e6517e1ca2e $
$Id: 123bd672b267fe3d464ae13f9c8b98e7475c12b6 $
$Id: c891513dc0a7214f92f52e8c6f59be0c3a6bdc75 $
$Id: d674fd7fb29144c5978cd8f2421c4147c86781c8 $
$Id: 75e59fa998ba43be0fae0fc16452e5c75f01a317 $
$Id: lexcoq.mll,v 1.16 2012-04-11 18:27:26 doligez Exp $
$Id: parsecoq.mly,v 1.34 2012-04-11 18:27:26 doligez Exp $
$Id: lextptp.mll,v 1.7 2012-04-24 17:32:04 doligez Exp $
$Id: parsetptp.mly,v 1.9 2012-04-24 17:32:04 doligez Exp $
$Id: lexzen.mll,v 1.13 2012-04-11 18:27:26 doligez Exp $
$Id: parsezen.mly,v 1.16 2012-04-11 18:27:26 doligez Exp $
$Id: feacf069839a8c95e03ad2e3dbb03601a3a6607d $
$Id: 200c027cd2683053eb227e68a492c4961e2a5784 $
$Id: 9f00cd3d0af0bdd28d17b64ab051f9594255e67e $
$Id: 52308a30d82a014cf1f8efa2799df8b300a0c678 $
$Id: caed5ca44e929aef76195d58649e867d28c61885 $
$Id: 8bef787c38724f2923554c6d72f7b8d9c6f4ab2b $
$Id: 799ea945a49520c4ac8520bb6c232fbe8b53bed8 $
$Id: 8cdb504db763cd885675be46e2a542d5ec676e25 $
$Id: f21acd58472bbe06f2040f6b4df14b9bcece4be1 $
$Id: 71c3ed8bb8ff5d2866be86682d871a07f130b74f $
$Id: 4da3a63d30c663a2457badcc920df654f154b47b $
$Id: d0534a6a0c9a349b8289a70cb8f84297d3678ef6 $
$Id: f64f126ba41a6797d6643ecfd2290bdc3bcd7c08 $
$Id: 03e455e19c9d3e35e5edbd6eee048f53fb55908f $
$Id: af6004ec6e3900adb00b13aa1e67da873f9dd706 $
$Id: 81e748142c40d6382b9ceac00a08d35207607f19 $
$Id: cd90a6b20441b688fbac060141ef245237cb7320 $
$Id: 7449d985db563f705bdded478f605f03b7111602 $
$Id: 34c58a3afac083cc607b116f4d95546502fbd4b7 $
source checksum: 20927 1

term

begin
773

%%begin-auto-proof
%%name: for_zenon___A_1_1_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For hypothesis "H1". *)
        Parameter H1 : Is_true ((abst_equal p1 p2)).
        (* For method of Self used via "by property !def_equal". *)
        Parameter abst_def_equal :
          forall p1  p2 : abst_T,
            Is_true ((abst_equal p1 p2)) <->
              (Is_true ((_p_S1_equal (abst_prj_a p1) (abst_prj_a p2))) /\
                 Is_true ((_p_S2_equal (abst_prj_b p1) (abst_prj_b p2)))).
        (* Theorem's body. *)
        Theorem for_zenon___A_1_1_LEMMA :
        (Is_true ((_p_S1_equal (abst_prj_a p1) (abst_prj_a p2))) /\
           Is_true ((_p_S2_equal (abst_prj_b p1) (abst_prj_b p2)))).
%%end-auto-proof
0
f6902d8aec26071019ab2db0dad61c09
proof
752
Theorem for_zenon___A_1_1_LEMMA:((Is_true (_p_S1_equal (abst_prj_a p1) (
abst_prj_a p2)))/\(Is_true (_p_S2_equal (abst_prj_b p1) (abst_prj_b p2))
)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all abst_T (fun p1:abst_T=>(forall p2
:abst_T,((Is_true (abst_equal p1 p2))<->((Is_true (_p_S1_equal (
abst_prj_a p1) (abst_prj_a p2)))/\(Is_true (_p_S2_equal (abst_prj_b p1)
(abst_prj_b p2))))))) p1 (fun zenon_H6=>(zenon_all abst_T (fun p2
:abst_T=>((Is_true (abst_equal p1 p2))<->((Is_true (_p_S1_equal (
abst_prj_a p1) (abst_prj_a p2)))/\(Is_true (_p_S2_equal (abst_prj_b p1)
(abst_prj_b p2)))))) p2 (fun zenon_H5=>(zenon_equiv _ _ (fun zenon_H4
zenon_G=>(zenon_H4 H1)) (fun H1 zenon_H3=>(zenon_G zenon_H3)) zenon_H5))
 zenon_H6)) abst_def_equal)))).
Qed.

0
64f180637fa9fabb1613393b96a935c6
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
773

%%begin-auto-proof
%%name: for_zenon___A_1_2_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For hypothesis "H2". *)
        Parameter H2 : Is_true ((abst_equal p2 p3)).
        (* For method of Self used via "by property !def_equal". *)
        Parameter abst_def_equal :
          forall p1  p2 : abst_T,
            Is_true ((abst_equal p1 p2)) <->
              (Is_true ((_p_S1_equal (abst_prj_a p1) (abst_prj_a p2))) /\
                 Is_true ((_p_S2_equal (abst_prj_b p1) (abst_prj_b p2)))).
        (* Theorem's body. *)
        Theorem for_zenon___A_1_2_LEMMA :
        (Is_true ((_p_S1_equal (abst_prj_a p2) (abst_prj_a p3))) /\
           Is_true ((_p_S2_equal (abst_prj_b p2) (abst_prj_b p3)))).
%%end-auto-proof
0
c2a51857e92181e16457c07eb56eb3f6
proof
778
Theorem for_zenon___A_1_2_LEMMA:((Is_true (_p_S1_equal (abst_prj_a p2) (
abst_prj_a p3)))/\(Is_true (_p_S2_equal (abst_prj_b p2) (abst_prj_b p3))
)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all abst_T (fun p1:abst_T=>(forall p2
:abst_T,((Is_true (abst_equal p1 p2))<->((Is_true (_p_S1_equal (
abst_prj_a p1) (abst_prj_a p2)))/\(Is_true (_p_S2_equal (abst_prj_b p1)
(abst_prj_b p2))))))) p2 (fun zenon_H6=>(zenon_all abst_T (fun zenon_Vg
:abst_T=>((Is_true (abst_equal p2 zenon_Vg))<->((Is_true (_p_S1_equal (
abst_prj_a p2) (abst_prj_a zenon_Vg)))/\(Is_true (_p_S2_equal (
abst_prj_b p2) (abst_prj_b zenon_Vg)))))) p3 (fun zenon_H5=>(
zenon_equiv _ _ (fun zenon_H4 zenon_G=>(zenon_H4 H2)) (fun H2 zenon_H3=>
(zenon_G zenon_H3)) zenon_H5)) zenon_H6)) abst_def_equal)))).
Qed.

0
9ef06d497c38400343a25ecbaa429616
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1344

%%begin-auto-proof
%%name: for_zenon___A_1_3_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For step <2>1. *)
        Parameter __A_1_1_LEMMA :
          ((Is_true ((_p_S1_equal (abst_prj_a p1) (abst_prj_a p2))) /\
              Is_true ((_p_S2_equal (abst_prj_b p1) (abst_prj_b p2))))).
        (* For step <2>2. *)
        Parameter __A_1_2_LEMMA :
          ((Is_true ((_p_S1_equal (abst_prj_a p2) (abst_prj_a p3))) /\
              Is_true ((_p_S2_equal (abst_prj_b p2) (abst_prj_b p3))))).
        (* For species parameter method used via "by property pair#S1!equal_transitive". *)
        Parameter _p_S1_equal_transitive :
          forall x  y  z : _p_S1_T,
            Is_true ((_p_S1_equal x y)) ->
              Is_true ((_p_S1_equal y z)) -> Is_true ((_p_S1_equal x z)).
        (* For species parameter method used via "by property pair#S2!equal_transitive". *)
        Parameter _p_S2_equal_transitive :
          forall x  y  z : _p_S2_T,
            Is_true ((_p_S2_equal x y)) ->
              Is_true ((_p_S2_equal y z)) -> Is_true ((_p_S2_equal x z)).
        (* Theorem's body. *)
        Theorem for_zenon___A_1_3_LEMMA :
        (Is_true ((_p_S1_equal (abst_prj_a p1) (abst_prj_a p3))) /\
           Is_true ((_p_S2_equal (abst_prj_b p1) (abst_prj_b p3)))).
%%end-auto-proof
0
b071bdb28053841458fab78e4e10312c
proof
2072
Theorem for_zenon___A_1_3_LEMMA:((Is_true (_p_S1_equal (abst_prj_a p1) (
abst_prj_a p3)))/\(Is_true (_p_S2_equal (abst_prj_b p1) (abst_prj_b p3))
)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_and _ _ (fun zenon_H14 zenon_Ha=>(
zenon_and _ _ (fun zenon_H11 zenon_H7=>(zenon_notand _ _ (fun
zenon_H10=>(zenon_all _p_S1_T (fun x:_p_S1_T=>(forall y:_p_S1_T,(forall
z:_p_S1_T,((Is_true (_p_S1_equal x y))->((Is_true (_p_S1_equal y z))->(
Is_true (_p_S1_equal x z))))))) (abst_prj_a p1) (fun zenon_H18=>(
zenon_all _p_S1_T (fun y:_p_S1_T=>(forall z:_p_S1_T,((Is_true (
_p_S1_equal (abst_prj_a p1) y))->((Is_true (_p_S1_equal y z))->(Is_true
(_p_S1_equal (abst_prj_a p1) z)))))) (abst_prj_a p2) (fun zenon_H17=>(
zenon_all _p_S1_T (fun z:_p_S1_T=>((Is_true (_p_S1_equal (abst_prj_a p1)
 (abst_prj_a p2)))->((Is_true (_p_S1_equal (abst_prj_a p2) z))->(
Is_true (_p_S1_equal (abst_prj_a p1) z))))) (abst_prj_a p3) (fun
zenon_H16=>(zenon_imply _ _ (fun zenon_H15=>(zenon_H15 zenon_H14)) (fun
zenon_H13=>(zenon_imply _ _ (fun zenon_H12=>(zenon_H12 zenon_H11)) (fun
zenon_Hf=>(zenon_H10 zenon_Hf)) zenon_H13)) zenon_H16)) zenon_H17))
zenon_H18)) _p_S1_equal_transitive)) (fun zenon_H6=>(zenon_all _p_S2_T (
fun x:_p_S2_T=>(forall y:_p_S2_T,(forall z:_p_S2_T,((Is_true (
_p_S2_equal x y))->((Is_true (_p_S2_equal y z))->(Is_true (_p_S2_equal
x z))))))) (abst_prj_b p1) (fun zenon_He=>(zenon_all _p_S2_T (fun y
:_p_S2_T=>(forall z:_p_S2_T,((Is_true (_p_S2_equal (abst_prj_b p1) y))->
((Is_true (_p_S2_equal y z))->(Is_true (_p_S2_equal (abst_prj_b p1) z)))
))) (abst_prj_b p2) (fun zenon_Hd=>(zenon_all _p_S2_T (fun z:_p_S2_T=>((
Is_true (_p_S2_equal (abst_prj_b p1) (abst_prj_b p2)))->((Is_true (
_p_S2_equal (abst_prj_b p2) z))->(Is_true (_p_S2_equal (abst_prj_b p1)
z))))) (abst_prj_b p3) (fun zenon_Hc=>(zenon_imply _ _ (fun zenon_Hb=>(
zenon_Hb zenon_Ha)) (fun zenon_H9=>(zenon_imply _ _ (fun zenon_H8=>(
zenon_H8 zenon_H7)) (fun zenon_H5=>(zenon_H6 zenon_H5)) zenon_H9))
zenon_Hc)) zenon_Hd)) zenon_He)) _p_S2_equal_transitive)) zenon_G))
__A_1_2_LEMMA)) __A_1_1_LEMMA)))).
Qed.

0
c62b30aef9d72d87bc30b01afa8f386d
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
755

%%begin-auto-proof
%%name: for_zenon___A_1_LEMMA
      
      
      
      (* Methods to use for automated proof. *)
      (* For step <2>3. *)
      Parameter __A_1_3_LEMMA :
        ((Is_true ((_p_S1_equal (abst_prj_a p1) (abst_prj_a p3))) /\
            Is_true ((_p_S2_equal (abst_prj_b p1) (abst_prj_b p3))))).
      (* For method of Self used via "by property !def_equal". *)
      Parameter abst_def_equal :
        forall p1  p2 : abst_T,
          Is_true ((abst_equal p1 p2)) <->
            (Is_true ((_p_S1_equal (abst_prj_a p1) (abst_prj_a p2))) /\
               Is_true ((_p_S2_equal (abst_prj_b p1) (abst_prj_b p2)))).
      (* Theorem's body. *)
      Theorem for_zenon___A_1_LEMMA :
      Is_true ((abst_equal p1 p3)).
%%end-auto-proof
0
4deed0092c4e44d977e61e87c98b7b0c
proof
684
Theorem for_zenon___A_1_LEMMA:(Is_true (abst_equal p1 p3)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all abst_T (fun p1:abst_T=>(forall p2
:abst_T,((Is_true (abst_equal p1 p2))<->((Is_true (_p_S1_equal (
abst_prj_a p1) (abst_prj_a p2)))/\(Is_true (_p_S2_equal (abst_prj_b p1)
(abst_prj_b p2))))))) p1 (fun zenon_H6=>(zenon_all abst_T (fun p2
:abst_T=>((Is_true (abst_equal p1 p2))<->((Is_true (_p_S1_equal (
abst_prj_a p1) (abst_prj_a p2)))/\(Is_true (_p_S2_equal (abst_prj_b p1)
(abst_prj_b p2)))))) p3 (fun zenon_H5=>(zenon_equiv _ _ (fun zenon_G
zenon_H4=>(zenon_H4 __A_1_3_LEMMA)) (fun zenon_H3 __A_1_3_LEMMA=>(
zenon_G zenon_H3)) zenon_H5)) zenon_H6)) abst_def_equal)))).
Qed.

0
bb9348382c44b4ab9bfb995ba6cb450f
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
562

%%begin-auto-proof
%%name: for_zenon_equal_transitive
    
    
    
    (* Methods to use for automated proof. *)
    (* For step <1>1. *)
    Parameter __A_1_LEMMA : forall p1 : abst_T, forall p2 : abst_T,
      forall p3 : abst_T,
      (Is_true ((abst_equal p1 p2))) -> (Is_true ((abst_equal p2 p3))) -> (
      Is_true ((abst_equal p1 p3))).
    (* Theorem's body. *)
    Theorem for_zenon_equal_transitive :
    forall x  y  z : abst_T,
      Is_true ((abst_equal x y)) ->
        Is_true ((abst_equal y z)) -> Is_true ((abst_equal x z)).
%%end-auto-proof
0
381de784b198ea756f5552ec1e4ef69e
proof
254
Theorem for_zenon_equal_transitive:(forall p1:abst_T,(forall p2:abst_T,(
forall p3:abst_T,((Is_true (abst_equal p1 p2))->((Is_true (abst_equal
p2 p3))->(Is_true (abst_equal p1 p3))))))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_G __A_1_LEMMA)))).
Qed.

0
2150c45bde50425ee5dd0fb9a22e181c
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
927

%%begin-auto-proof
%%name: for_zenon___B_1_1_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For hypothesis "H1". *)
        Parameter H1 :
          Is_true ((abst_equal (abst_constr n1 n2) (abst_constr n3 n4))).
        (* For method of Self used via "by property !def_equal". *)
        Parameter abst_def_equal :
          forall p1  p2 : abst_T,
            Is_true ((abst_equal p1 p2)) <->
              (Is_true ((_p_S1_equal (abst_prj_a p1) (abst_prj_a p2))) /\
                 Is_true ((_p_S2_equal (abst_prj_b p1) (abst_prj_b p2)))).
        (* Theorem's body. *)
        Theorem for_zenon___B_1_1_LEMMA :
        (Is_true ((_p_S1_equal (abst_prj_a (abst_constr n1 n2))
                    (abst_prj_a (abst_constr n3 n4)))) /\
           Is_true ((_p_S2_equal (abst_prj_b (abst_constr n1 n2))
                      (abst_prj_b (abst_constr n3 n4))))).
%%end-auto-proof
0
0e12412ce70b8cbbf8607da3931ff123
proof
904
Theorem for_zenon___B_1_1_LEMMA:((Is_true (_p_S1_equal (abst_prj_a (
abst_constr n1 n2)) (abst_prj_a (abst_constr n3 n4))))/\(Is_true (
_p_S2_equal (abst_prj_b (abst_constr n1 n2)) (abst_prj_b (abst_constr
n3 n4))))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all abst_T (fun p1:abst_T=>(forall p2
:abst_T,((Is_true (abst_equal p1 p2))<->((Is_true (_p_S1_equal (
abst_prj_a p1) (abst_prj_a p2)))/\(Is_true (_p_S2_equal (abst_prj_b p1)
(abst_prj_b p2))))))) (abst_constr n1 n2) (fun zenon_H6=>(zenon_all
abst_T (fun p2:abst_T=>((Is_true (abst_equal (abst_constr n1 n2) p2))<->
((Is_true (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) (abst_prj_a p2))
)/\(Is_true (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) (abst_prj_b
p2)))))) (abst_constr n3 n4) (fun zenon_H5=>(zenon_equiv _ _ (fun
zenon_H4 zenon_G=>(zenon_H4 H1)) (fun H1 zenon_H3=>(zenon_G zenon_H3))
zenon_H5)) zenon_H6)) abst_def_equal)))).
Qed.

0
ac4bb26c1acf7f929ed0d526ddcb5cd3
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
658

%%begin-auto-proof
%%name: for_zenon___B_1_2_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For step <2>1. *)
        Parameter __B_1_1_LEMMA :
          ((Is_true ((_p_S1_equal (abst_prj_a (abst_constr n1 n2))
                       (abst_prj_a (abst_constr n3 n4)))) /\
              Is_true ((_p_S2_equal (abst_prj_b (abst_constr n1 n2))
                         (abst_prj_b (abst_constr n3 n4)))))).
        (* Theorem's body. *)
        Theorem for_zenon___B_1_2_LEMMA :
        Is_true ((_p_S1_equal (abst_prj_a (abst_constr n1 n2))
                   (abst_prj_a (abst_constr n3 n4)))).
%%end-auto-proof
0
c4acef7565da429debd9e89730e23639
proof
243
Theorem for_zenon___B_1_2_LEMMA:(Is_true (_p_S1_equal (abst_prj_a (
abst_constr n1 n2)) (abst_prj_a (abst_constr n3 n4)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_and _ _ (fun zenon_H2 zenon_H3=>(zenon_G
zenon_H2)) __B_1_1_LEMMA)))).
Qed.

0
00c69c9fa9a7274f7ba22ed6441178c4
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
658

%%begin-auto-proof
%%name: for_zenon___B_1_3_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For step <2>1. *)
        Parameter __B_1_1_LEMMA :
          ((Is_true ((_p_S1_equal (abst_prj_a (abst_constr n1 n2))
                       (abst_prj_a (abst_constr n3 n4)))) /\
              Is_true ((_p_S2_equal (abst_prj_b (abst_constr n1 n2))
                         (abst_prj_b (abst_constr n3 n4)))))).
        (* Theorem's body. *)
        Theorem for_zenon___B_1_3_LEMMA :
        Is_true ((_p_S2_equal (abst_prj_b (abst_constr n1 n2))
                   (abst_prj_b (abst_constr n3 n4)))).
%%end-auto-proof
0
4e95694c17ceb2542eac199109d42388
proof
243
Theorem for_zenon___B_1_3_LEMMA:(Is_true (_p_S2_equal (abst_prj_b (
abst_constr n1 n2)) (abst_prj_b (abst_constr n3 n4)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_and _ _ (fun zenon_H3 zenon_H2=>(zenon_G
zenon_H2)) __B_1_1_LEMMA)))).
Qed.

0
ca219042334212703347eccd8fd48191
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1030

%%begin-auto-proof
%%name: for_zenon___B_1_4_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For step <2>2. *)
        Parameter __B_1_2_LEMMA :
          (Is_true ((_p_S1_equal (abst_prj_a (abst_constr n1 n2))
                      (abst_prj_a (abst_constr n3 n4))))).
        (* For method of Self used via "by property !prj_a_is_first_of_pair". *)
        Parameter abst_prj_a_is_first_of_pair :
          forall n1 : _p_S1_T,
            forall n2 : _p_S2_T,
              Is_true ((_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n1)).
        (* For species parameter method used via "by property pair#S1!equal_transitive". *)
        Parameter _p_S1_equal_transitive :
          forall x  y  z : _p_S1_T,
            Is_true ((_p_S1_equal x y)) ->
              Is_true ((_p_S1_equal y z)) -> Is_true ((_p_S1_equal x z)).
        (* Theorem's body. *)
        Theorem for_zenon___B_1_4_LEMMA :
        Is_true ((_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n3)).
%%end-auto-proof
0
27f58294e1d164268c7c4b544b66717c
proof
1459
Theorem for_zenon___B_1_4_LEMMA:(Is_true (_p_S1_equal (abst_prj_a (
abst_constr n1 n2)) n3)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(let zenon_H5:=(fun zenon_H4=>(zenon_all _p_S1_T (
fun x:_p_S1_T=>(forall y:_p_S1_T,(forall z:_p_S1_T,((Is_true (
_p_S1_equal x y))->((Is_true (_p_S1_equal y z))->(Is_true (_p_S1_equal
x z))))))) (abst_prj_a (abst_constr n1 n2)) (fun zenon_Hc=>(zenon_all
_p_S1_T (fun y:_p_S1_T=>(forall z:_p_S1_T,((Is_true (_p_S1_equal (
abst_prj_a (abst_constr n1 n2)) y))->((Is_true (_p_S1_equal y z))->(
Is_true (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) z)))))) (
abst_prj_a (abst_constr n3 n4)) (fun zenon_Hb=>(zenon_all _p_S1_T (fun
z:_p_S1_T=>((Is_true (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) (
abst_prj_a (abst_constr n3 n4))))->((Is_true (_p_S1_equal (abst_prj_a (
abst_constr n3 n4)) z))->(Is_true (_p_S1_equal (abst_prj_a (abst_constr
n1 n2)) z))))) n3 (fun zenon_Ha=>(zenon_imply _ _ (fun zenon_H9=>(
zenon_H9 __B_1_2_LEMMA)) (fun zenon_H8=>(zenon_imply _ _ (fun zenon_H5=>
(zenon_H5 zenon_H4)) (fun zenon_H7=>(zenon_G zenon_H7)) zenon_H8))
zenon_Ha)) zenon_Hb)) zenon_Hc)) _p_S1_equal_transitive)) in (zenon_all
_p_S1_T (fun n1:_p_S1_T=>(forall n2:_p_S2_T,(Is_true (_p_S1_equal (
abst_prj_a (abst_constr n1 n2)) n1)))) n3 (fun zenon_H6=>(zenon_all
_p_S2_T (fun n2:_p_S2_T=>(Is_true (_p_S1_equal (abst_prj_a (abst_constr
n3 n2)) n3))) n4 (fun zenon_H4=>(zenon_H5 zenon_H4)) zenon_H6))
abst_prj_a_is_first_of_pair))))).
Qed.

0
e4eb2baf468195cf029af8ddfae18ac7
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1026

%%begin-auto-proof
%%name: for_zenon___B_1_5_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For step <2>3. *)
        Parameter __B_1_3_LEMMA :
          (Is_true ((_p_S2_equal (abst_prj_b (abst_constr n1 n2))
                      (abst_prj_b (abst_constr n3 n4))))).
        (* For method of Self used via "by property !prj_b_is_snd_of_pair". *)
        Parameter abst_prj_b_is_snd_of_pair :
          forall n1 : _p_S1_T,
            forall n2 : _p_S2_T,
              Is_true ((_p_S2_equal (abst_prj_b (abst_constr n1 n2)) n2)).
        (* For species parameter method used via "by property pair#S2!equal_transitive". *)
        Parameter _p_S2_equal_transitive :
          forall x  y  z : _p_S2_T,
            Is_true ((_p_S2_equal x y)) ->
              Is_true ((_p_S2_equal y z)) -> Is_true ((_p_S2_equal x z)).
        (* Theorem's body. *)
        Theorem for_zenon___B_1_5_LEMMA :
        Is_true ((_p_S2_equal (abst_prj_b (abst_constr n1 n2)) n4)).
%%end-auto-proof
0
0b849273b40d18fcca092ff00a4f8a17
proof
1457
Theorem for_zenon___B_1_5_LEMMA:(Is_true (_p_S2_equal (abst_prj_b (
abst_constr n1 n2)) n4)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(let zenon_H5:=(fun zenon_H4=>(zenon_all _p_S2_T (
fun x:_p_S2_T=>(forall y:_p_S2_T,(forall z:_p_S2_T,((Is_true (
_p_S2_equal x y))->((Is_true (_p_S2_equal y z))->(Is_true (_p_S2_equal
x z))))))) (abst_prj_b (abst_constr n1 n2)) (fun zenon_Hc=>(zenon_all
_p_S2_T (fun y:_p_S2_T=>(forall z:_p_S2_T,((Is_true (_p_S2_equal (
abst_prj_b (abst_constr n1 n2)) y))->((Is_true (_p_S2_equal y z))->(
Is_true (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) z)))))) (
abst_prj_b (abst_constr n3 n4)) (fun zenon_Hb=>(zenon_all _p_S2_T (fun
z:_p_S2_T=>((Is_true (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) (
abst_prj_b (abst_constr n3 n4))))->((Is_true (_p_S2_equal (abst_prj_b (
abst_constr n3 n4)) z))->(Is_true (_p_S2_equal (abst_prj_b (abst_constr
n1 n2)) z))))) n4 (fun zenon_Ha=>(zenon_imply _ _ (fun zenon_H9=>(
zenon_H9 __B_1_3_LEMMA)) (fun zenon_H8=>(zenon_imply _ _ (fun zenon_H5=>
(zenon_H5 zenon_H4)) (fun zenon_H7=>(zenon_G zenon_H7)) zenon_H8))
zenon_Ha)) zenon_Hb)) zenon_Hc)) _p_S2_equal_transitive)) in (zenon_all
_p_S1_T (fun n1:_p_S1_T=>(forall n2:_p_S2_T,(Is_true (_p_S2_equal (
abst_prj_b (abst_constr n1 n2)) n2)))) n3 (fun zenon_H6=>(zenon_all
_p_S2_T (fun n2:_p_S2_T=>(Is_true (_p_S2_equal (abst_prj_b (abst_constr
n3 n2)) n2))) n4 (fun zenon_H4=>(zenon_H5 zenon_H4)) zenon_H6))
abst_prj_b_is_snd_of_pair))))).
Qed.

0
4b3700988bdd40a7c0d6a227ee6bc243
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1186

%%begin-auto-proof
%%name: for_zenon___B_1_6_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For step <2>4. *)
        Parameter __B_1_4_LEMMA :
          (Is_true ((_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n3))).
        (* For method of Self used via "by property !prj_a_is_first_of_pair". *)
        Parameter abst_prj_a_is_first_of_pair :
          forall n1 : _p_S1_T,
            forall n2 : _p_S2_T,
              Is_true ((_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n1)).
        (* For species parameter method used via "by property pair#S1!equal_transitive". *)
        Parameter _p_S1_equal_transitive :
          forall x  y  z : _p_S1_T,
            Is_true ((_p_S1_equal x y)) ->
              Is_true ((_p_S1_equal y z)) -> Is_true ((_p_S1_equal x z)).
        (* For species parameter method used via "by property pair#S1!equal_symmetric". *)
        Parameter _p_S1_equal_symmetric :
          forall x  y : _p_S1_T,
            Is_true ((_p_S1_equal x y)) -> Is_true ((_p_S1_equal y x)).
        (* Theorem's body. *)
        Theorem for_zenon___B_1_6_LEMMA :
        Is_true ((_p_S1_equal n1 n3)).
%%end-auto-proof
0
7c8972441dc728b12f3a762f654e50f6
proof
2555
Theorem for_zenon___B_1_6_LEMMA:(Is_true (_p_S1_equal n1 n3)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(let zenon_H16:=(fun zenon_H1d=>(zenon_and _ _ (
fun zenon_H14 zenon_Hb=>(zenon_all _p_S1_T (fun n1:_p_S1_T=>(forall n2
:_p_S2_T,(Is_true (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n1))))
n1 (fun zenon_H1c=>(zenon_all _p_S2_T (fun n2:_p_S2_T=>(Is_true (
_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n1))) n2 (fun zenon_H18=>(
zenon_all _p_S1_T (fun x:_p_S1_T=>(forall y:_p_S1_T,((Is_true (
_p_S1_equal x y))->(Is_true (_p_S1_equal y x))))) (abst_prj_a (
abst_constr n1 n2)) (fun zenon_H1b=>(zenon_all _p_S1_T (fun y:_p_S1_T=>(
(Is_true (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) y))->(Is_true (
_p_S1_equal y (abst_prj_a (abst_constr n1 n2)))))) n1 (fun zenon_H1a=>(
zenon_imply _ _ (fun zenon_H19=>(zenon_H19 zenon_H18)) (fun zenon_Ha=>(
zenon_Hb zenon_Ha)) zenon_H1a)) zenon_H1b)) _p_S1_equal_symmetric))
zenon_H1c)) abst_prj_a_is_first_of_pair)) zenon_H1d)) in (let zenon_H5
:=(fun zenon_H17=>(zenon_subst _ (fun zenon_Vg=>(Is_true zenon_Vg)) (
_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n3) (_p_S1_equal n1 n3) (
fun zenon_H6=>(zenon_subst _ (fun zenon_Vh=>(~((_p_S1_equal zenon_Vh n3)
 = (_p_S1_equal n1 n3)))) (abst_prj_a (abst_constr n1 n2)) n1 (fun
zenon_H11=>(zenon_notand _ _ (fun zenon_H15=>(zenon_H15 (fun zenon_H13=>
(let zenon_H10:=(fun zenon_H12=>(zenon_subst _ (fun zenon_Vi=>(zenon_Vi
= n1)) n1 (abst_prj_a (abst_constr n1 n2)) (fun zenon_H14=>(zenon_H14
zenon_H13)) zenon_H11 zenon_H12)) in (zenon_noteq _ n1 zenon_H10))))) (
fun zenon_Hf=>(zenon_Hf (fun zenon_Ha=>(zenon_all _p_S1_T (fun x
:_p_S1_T=>(forall y:_p_S1_T,(forall z:_p_S1_T,((Is_true (_p_S1_equal x
y))->((Is_true (_p_S1_equal y z))->(Is_true (_p_S1_equal x z))))))) n1 (
fun zenon_He=>(zenon_all _p_S1_T (fun y:_p_S1_T=>(forall z:_p_S1_T,((
Is_true (_p_S1_equal n1 y))->((Is_true (_p_S1_equal y z))->(Is_true (
_p_S1_equal n1 z)))))) (abst_prj_a (abst_constr n1 n2)) (fun zenon_Hd=>(
zenon_all _p_S1_T (fun z:_p_S1_T=>((Is_true (_p_S1_equal n1 (abst_prj_a
(abst_constr n1 n2))))->((Is_true (_p_S1_equal (abst_prj_a (abst_constr
n1 n2)) z))->(Is_true (_p_S1_equal n1 z))))) n3 (fun zenon_Hc=>(
zenon_imply _ _ (fun zenon_Hb=>(zenon_Hb zenon_Ha)) (fun zenon_H9=>(
zenon_imply _ _ (fun zenon_H8=>(zenon_H8 __B_1_4_LEMMA)) (fun zenon_H7=>
(zenon_G zenon_H7)) zenon_H9)) zenon_Hc)) zenon_Hd)) zenon_He))
_p_S1_equal_transitive)))) zenon_H16)) (zenon_notnot _ (refl_equal (
_p_S1_equal n1 n3))) zenon_H6)) zenon_G __B_1_4_LEMMA)) in (zenon_noteq
_ n3 zenon_H5)))))).
Qed.

0
554519d1349c24832a8c17356c12973e
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1182

%%begin-auto-proof
%%name: for_zenon___B_1_7_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For step <2>5. *)
        Parameter __B_1_5_LEMMA :
          (Is_true ((_p_S2_equal (abst_prj_b (abst_constr n1 n2)) n4))).
        (* For method of Self used via "by property !prj_b_is_snd_of_pair". *)
        Parameter abst_prj_b_is_snd_of_pair :
          forall n1 : _p_S1_T,
            forall n2 : _p_S2_T,
              Is_true ((_p_S2_equal (abst_prj_b (abst_constr n1 n2)) n2)).
        (* For species parameter method used via "by property pair#S2!equal_transitive". *)
        Parameter _p_S2_equal_transitive :
          forall x  y  z : _p_S2_T,
            Is_true ((_p_S2_equal x y)) ->
              Is_true ((_p_S2_equal y z)) -> Is_true ((_p_S2_equal x z)).
        (* For species parameter method used via "by property pair#S2!equal_symmetric". *)
        Parameter _p_S2_equal_symmetric :
          forall x  y : _p_S2_T,
            Is_true ((_p_S2_equal x y)) -> Is_true ((_p_S2_equal y x)).
        (* Theorem's body. *)
        Theorem for_zenon___B_1_7_LEMMA :
        Is_true ((_p_S2_equal n2 n4)).
%%end-auto-proof
0
c6d5b134c32a437669400d7ccdf52bc9
proof
2553
Theorem for_zenon___B_1_7_LEMMA:(Is_true (_p_S2_equal n2 n4)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(let zenon_H16:=(fun zenon_H1d=>(zenon_and _ _ (
fun zenon_H14 zenon_Hb=>(zenon_all _p_S1_T (fun n1:_p_S1_T=>(forall n2
:_p_S2_T,(Is_true (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) n2))))
n1 (fun zenon_H1c=>(zenon_all _p_S2_T (fun n2:_p_S2_T=>(Is_true (
_p_S2_equal (abst_prj_b (abst_constr n1 n2)) n2))) n2 (fun zenon_H18=>(
zenon_all _p_S2_T (fun x:_p_S2_T=>(forall y:_p_S2_T,((Is_true (
_p_S2_equal x y))->(Is_true (_p_S2_equal y x))))) (abst_prj_b (
abst_constr n1 n2)) (fun zenon_H1b=>(zenon_all _p_S2_T (fun y:_p_S2_T=>(
(Is_true (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) y))->(Is_true (
_p_S2_equal y (abst_prj_b (abst_constr n1 n2)))))) n2 (fun zenon_H1a=>(
zenon_imply _ _ (fun zenon_H19=>(zenon_H19 zenon_H18)) (fun zenon_Ha=>(
zenon_Hb zenon_Ha)) zenon_H1a)) zenon_H1b)) _p_S2_equal_symmetric))
zenon_H1c)) abst_prj_b_is_snd_of_pair)) zenon_H1d)) in (let zenon_H5:=(
fun zenon_H17=>(zenon_subst _ (fun zenon_Vf=>(Is_true zenon_Vf)) (
_p_S2_equal (abst_prj_b (abst_constr n1 n2)) n4) (_p_S2_equal n2 n4) (
fun zenon_H6=>(zenon_subst _ (fun zenon_Vg=>(~((_p_S2_equal zenon_Vg n4)
 = (_p_S2_equal n2 n4)))) (abst_prj_b (abst_constr n1 n2)) n2 (fun
zenon_H11=>(zenon_notand _ _ (fun zenon_H15=>(zenon_H15 (fun zenon_H13=>
(let zenon_H10:=(fun zenon_H12=>(zenon_subst _ (fun zenon_Vh=>(zenon_Vh
= n2)) n2 (abst_prj_b (abst_constr n1 n2)) (fun zenon_H14=>(zenon_H14
zenon_H13)) zenon_H11 zenon_H12)) in (zenon_noteq _ n2 zenon_H10))))) (
fun zenon_Hf=>(zenon_Hf (fun zenon_Ha=>(zenon_all _p_S2_T (fun x
:_p_S2_T=>(forall y:_p_S2_T,(forall z:_p_S2_T,((Is_true (_p_S2_equal x
y))->((Is_true (_p_S2_equal y z))->(Is_true (_p_S2_equal x z))))))) n2 (
fun zenon_He=>(zenon_all _p_S2_T (fun y:_p_S2_T=>(forall z:_p_S2_T,((
Is_true (_p_S2_equal n2 y))->((Is_true (_p_S2_equal y z))->(Is_true (
_p_S2_equal n2 z)))))) (abst_prj_b (abst_constr n1 n2)) (fun zenon_Hd=>(
zenon_all _p_S2_T (fun z:_p_S2_T=>((Is_true (_p_S2_equal n2 (abst_prj_b
(abst_constr n1 n2))))->((Is_true (_p_S2_equal (abst_prj_b (abst_constr
n1 n2)) z))->(Is_true (_p_S2_equal n2 z))))) n4 (fun zenon_Hc=>(
zenon_imply _ _ (fun zenon_Hb=>(zenon_Hb zenon_Ha)) (fun zenon_H9=>(
zenon_imply _ _ (fun zenon_H8=>(zenon_H8 __B_1_5_LEMMA)) (fun zenon_H7=>
(zenon_G zenon_H7)) zenon_H9)) zenon_Hc)) zenon_Hd)) zenon_He))
_p_S2_equal_transitive)))) zenon_H16)) (zenon_notnot _ (refl_equal (
_p_S2_equal n2 n4))) zenon_H6)) zenon_G __B_1_5_LEMMA)) in (zenon_noteq
_ n4 zenon_H5)))))).
Qed.

0
59981821848a7d872b775d0fec9280ba
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
457

%%begin-auto-proof
%%name: for_zenon___B_1_LEMMA
      
      
      
      (* Methods to use for automated proof. *)
      (* For step <2>6. *)
      Parameter __B_1_6_LEMMA : (Is_true ((_p_S1_equal n1 n3))).
      (* For step <2>7. *)
      Parameter __B_1_7_LEMMA : (Is_true ((_p_S2_equal n2 n4))).
      (* Theorem's body. *)
      Theorem for_zenon___B_1_LEMMA :
      (Is_true ((_p_S1_equal n1 n3)) /\ Is_true ((_p_S2_equal n2 n4))).
%%end-auto-proof
0
b55984f316103e60cdfcecfc3e97fcd8
proof
249
Theorem for_zenon___B_1_LEMMA:((Is_true (_p_S1_equal n1 n3))/\(Is_true (
_p_S2_equal n2 n4))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notand _ _ (fun zenon_H4=>(zenon_H4
__B_1_6_LEMMA)) (fun zenon_H3=>(zenon_H3 __B_1_7_LEMMA)) zenon_G)))).
Qed.

0
4589fc30aa490d5a90f72daf4f13a113
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
933

%%begin-auto-proof
%%name: for_zenon___B_2_1_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For hypothesis "H12". *)
        Parameter H12 : Is_true ((_p_S1_equal n1 n3)).
        (* For method of Self used via "by property !prj_a_is_first_of_pair". *)
        Parameter abst_prj_a_is_first_of_pair :
          forall n1 : _p_S1_T,
            forall n2 : _p_S2_T,
              Is_true ((_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n1)).
        (* For species parameter method used via "by property pair#S1!equal_transitive". *)
        Parameter _p_S1_equal_transitive :
          forall x  y  z : _p_S1_T,
            Is_true ((_p_S1_equal x y)) ->
              Is_true ((_p_S1_equal y z)) -> Is_true ((_p_S1_equal x z)).
        (* Theorem's body. *)
        Theorem for_zenon___B_2_1_LEMMA :
        Is_true ((_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n3)).
%%end-auto-proof
0
5b07313f4fa540a2e02559dd0ca47306
proof
2284
Theorem for_zenon___B_2_1_LEMMA:(Is_true (_p_S1_equal (abst_prj_a (
abst_constr n1 n2)) n3)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(let zenon_H15:=(fun zenon_H18=>(zenon_and _ _ (
fun zenon_H13 zenon_Ha=>(zenon_all _p_S1_T (fun n1:_p_S1_T=>(forall n2
:_p_S2_T,(Is_true (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n1))))
n1 (fun zenon_H17=>(zenon_all _p_S2_T (fun n2:_p_S2_T=>(Is_true (
_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n1))) n2 (fun zenon_H9=>(
zenon_Ha zenon_H9)) zenon_H17)) abst_prj_a_is_first_of_pair)) zenon_H18)
) in (let zenon_H4:=(fun zenon_H16=>(zenon_subst _ (fun zenon_Vg=>(
Is_true zenon_Vg)) (_p_S1_equal n1 n3) (_p_S1_equal (abst_prj_a (
abst_constr n1 n2)) n3) (fun zenon_H5=>(zenon_subst _ (fun zenon_Vh=>(~(
(_p_S1_equal zenon_Vh n3) = (_p_S1_equal (abst_prj_a (abst_constr n1 n2)
) n3)))) n1 (abst_prj_a (abst_constr n1 n2)) (fun zenon_H10=>(
zenon_notand _ _ (fun zenon_H14=>(zenon_H14 (fun zenon_H12=>(let
zenon_Hf:=(fun zenon_H11=>(zenon_subst _ (fun zenon_Vi=>(zenon_Vi = (
abst_prj_a (abst_constr n1 n2)))) (abst_prj_a (abst_constr n1 n2)) n1 (
fun zenon_H13=>(zenon_H13 zenon_H12)) zenon_H10 zenon_H11)) in (
zenon_noteq _ (abst_prj_a (abst_constr n1 n2)) zenon_Hf))))) (fun
zenon_He=>(zenon_He (fun zenon_H9=>(zenon_all _p_S1_T (fun x:_p_S1_T=>(
forall y:_p_S1_T,(forall z:_p_S1_T,((Is_true (_p_S1_equal x y))->((
Is_true (_p_S1_equal y z))->(Is_true (_p_S1_equal x z))))))) (
abst_prj_a (abst_constr n1 n2)) (fun zenon_Hd=>(zenon_all _p_S1_T (fun
y:_p_S1_T=>(forall z:_p_S1_T,((Is_true (_p_S1_equal (abst_prj_a (
abst_constr n1 n2)) y))->((Is_true (_p_S1_equal y z))->(Is_true (
_p_S1_equal (abst_prj_a (abst_constr n1 n2)) z)))))) n1 (fun zenon_Hc=>(
zenon_all _p_S1_T (fun z:_p_S1_T=>((Is_true (_p_S1_equal (abst_prj_a (
abst_constr n1 n2)) n1))->((Is_true (_p_S1_equal n1 z))->(Is_true (
_p_S1_equal (abst_prj_a (abst_constr n1 n2)) z))))) n3 (fun zenon_Hb=>(
zenon_imply _ _ (fun zenon_Ha=>(zenon_Ha zenon_H9)) (fun zenon_H8=>(
zenon_imply _ _ (fun zenon_H7=>(zenon_H7 H12)) (fun zenon_H6=>(zenon_G
zenon_H6)) zenon_H8)) zenon_Hb)) zenon_Hc)) zenon_Hd))
_p_S1_equal_transitive)))) zenon_H15)) (zenon_notnot _ (refl_equal (
_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n3))) zenon_H5)) zenon_G
H12)) in (zenon_noteq _ n3 zenon_H4)))))).
Qed.

0
510e2bb970bc563d5a028cdbb3d6ff1b
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
929

%%begin-auto-proof
%%name: for_zenon___B_2_2_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For hypothesis "H22". *)
        Parameter H22 : Is_true ((_p_S2_equal n2 n4)).
        (* For method of Self used via "by property !prj_b_is_snd_of_pair". *)
        Parameter abst_prj_b_is_snd_of_pair :
          forall n1 : _p_S1_T,
            forall n2 : _p_S2_T,
              Is_true ((_p_S2_equal (abst_prj_b (abst_constr n1 n2)) n2)).
        (* For species parameter method used via "by property pair#S2!equal_transitive". *)
        Parameter _p_S2_equal_transitive :
          forall x  y  z : _p_S2_T,
            Is_true ((_p_S2_equal x y)) ->
              Is_true ((_p_S2_equal y z)) -> Is_true ((_p_S2_equal x z)).
        (* Theorem's body. *)
        Theorem for_zenon___B_2_2_LEMMA :
        Is_true ((_p_S2_equal (abst_prj_b (abst_constr n1 n2)) n4)).
%%end-auto-proof
0
6f0f63d9a9d786debfbe30c6f1ae3a1b
proof
2281
Theorem for_zenon___B_2_2_LEMMA:(Is_true (_p_S2_equal (abst_prj_b (
abst_constr n1 n2)) n4)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(let zenon_H15:=(fun zenon_H18=>(zenon_and _ _ (
fun zenon_H13 zenon_Ha=>(zenon_all _p_S1_T (fun n1:_p_S1_T=>(forall n2
:_p_S2_T,(Is_true (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) n2))))
n1 (fun zenon_H17=>(zenon_all _p_S2_T (fun n2:_p_S2_T=>(Is_true (
_p_S2_equal (abst_prj_b (abst_constr n1 n2)) n2))) n2 (fun zenon_H9=>(
zenon_Ha zenon_H9)) zenon_H17)) abst_prj_b_is_snd_of_pair)) zenon_H18))
in (let zenon_H4:=(fun zenon_H16=>(zenon_subst _ (fun zenon_Vf=>(
Is_true zenon_Vf)) (_p_S2_equal n2 n4) (_p_S2_equal (abst_prj_b (
abst_constr n1 n2)) n4) (fun zenon_H5=>(zenon_subst _ (fun zenon_Vg=>(~(
(_p_S2_equal zenon_Vg n4) = (_p_S2_equal (abst_prj_b (abst_constr n1 n2)
) n4)))) n2 (abst_prj_b (abst_constr n1 n2)) (fun zenon_H10=>(
zenon_notand _ _ (fun zenon_H14=>(zenon_H14 (fun zenon_H12=>(let
zenon_Hf:=(fun zenon_H11=>(zenon_subst _ (fun zenon_Vh=>(zenon_Vh = (
abst_prj_b (abst_constr n1 n2)))) (abst_prj_b (abst_constr n1 n2)) n2 (
fun zenon_H13=>(zenon_H13 zenon_H12)) zenon_H10 zenon_H11)) in (
zenon_noteq _ (abst_prj_b (abst_constr n1 n2)) zenon_Hf))))) (fun
zenon_He=>(zenon_He (fun zenon_H9=>(zenon_all _p_S2_T (fun x:_p_S2_T=>(
forall y:_p_S2_T,(forall z:_p_S2_T,((Is_true (_p_S2_equal x y))->((
Is_true (_p_S2_equal y z))->(Is_true (_p_S2_equal x z))))))) (
abst_prj_b (abst_constr n1 n2)) (fun zenon_Hd=>(zenon_all _p_S2_T (fun
y:_p_S2_T=>(forall z:_p_S2_T,((Is_true (_p_S2_equal (abst_prj_b (
abst_constr n1 n2)) y))->((Is_true (_p_S2_equal y z))->(Is_true (
_p_S2_equal (abst_prj_b (abst_constr n1 n2)) z)))))) n2 (fun zenon_Hc=>(
zenon_all _p_S2_T (fun z:_p_S2_T=>((Is_true (_p_S2_equal (abst_prj_b (
abst_constr n1 n2)) n2))->((Is_true (_p_S2_equal n2 z))->(Is_true (
_p_S2_equal (abst_prj_b (abst_constr n1 n2)) z))))) n4 (fun zenon_Hb=>(
zenon_imply _ _ (fun zenon_Ha=>(zenon_Ha zenon_H9)) (fun zenon_H8=>(
zenon_imply _ _ (fun zenon_H7=>(zenon_H7 H22)) (fun zenon_H6=>(zenon_G
zenon_H6)) zenon_H8)) zenon_Hb)) zenon_Hc)) zenon_Hd))
_p_S2_equal_transitive)))) zenon_H15)) (zenon_notnot _ (refl_equal (
_p_S2_equal (abst_prj_b (abst_constr n1 n2)) n4))) zenon_H5)) zenon_G
H22)) in (zenon_noteq _ n4 zenon_H4)))))).
Qed.

0
6cd2d470a053b49c0a3b5ea05a1f4922
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1265

%%begin-auto-proof
%%name: for_zenon___B_2_3_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For step <2>1. *)
        Parameter __B_2_1_LEMMA :
          (Is_true ((_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n3))).
        (* For method of Self used via "by property !prj_a_is_first_of_pair". *)
        Parameter abst_prj_a_is_first_of_pair :
          forall n1 : _p_S1_T,
            forall n2 : _p_S2_T,
              Is_true ((_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n1)).
        (* For species parameter method used via "by property pair#S1!equal_transitive". *)
        Parameter _p_S1_equal_transitive :
          forall x  y  z : _p_S1_T,
            Is_true ((_p_S1_equal x y)) ->
              Is_true ((_p_S1_equal y z)) -> Is_true ((_p_S1_equal x z)).
        (* For species parameter method used via "by property pair#S1!equal_symmetric". *)
        Parameter _p_S1_equal_symmetric :
          forall x  y : _p_S1_T,
            Is_true ((_p_S1_equal x y)) -> Is_true ((_p_S1_equal y x)).
        (* Theorem's body. *)
        Theorem for_zenon___B_2_3_LEMMA :
        Is_true ((_p_S1_equal (abst_prj_a (abst_constr n1 n2))
                   (abst_prj_a (abst_constr n3 n4)))).
%%end-auto-proof
0
8bb179a603c97a523af552fcf9b343e9
proof
1890
Theorem for_zenon___B_2_3_LEMMA:(Is_true (_p_S1_equal (abst_prj_a (
abst_constr n1 n2)) (abst_prj_a (abst_constr n3 n4)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(let zenon_H6:=(fun zenon_H5=>(zenon_all _p_S1_T (
fun x:_p_S1_T=>(forall y:_p_S1_T,(forall z:_p_S1_T,((Is_true (
_p_S1_equal x y))->((Is_true (_p_S1_equal y z))->(Is_true (_p_S1_equal
x z))))))) (abst_prj_a (abst_constr n1 n2)) (fun zenon_H11=>(zenon_all
_p_S1_T (fun y:_p_S1_T=>(forall z:_p_S1_T,((Is_true (_p_S1_equal (
abst_prj_a (abst_constr n1 n2)) y))->((Is_true (_p_S1_equal y z))->(
Is_true (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) z)))))) n3 (fun
zenon_H10=>(zenon_all _p_S1_T (fun z:_p_S1_T=>((Is_true (_p_S1_equal (
abst_prj_a (abst_constr n1 n2)) n3))->((Is_true (_p_S1_equal n3 z))->(
Is_true (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) z))))) (
abst_prj_a (abst_constr n3 n4)) (fun zenon_Hf=>(zenon_imply _ _ (fun
zenon_He=>(zenon_He __B_2_1_LEMMA)) (fun zenon_Hd=>(zenon_imply _ _ (
fun zenon_H6=>(zenon_H6 zenon_H5)) (fun zenon_Hc=>(zenon_G zenon_Hc))
zenon_Hd)) zenon_Hf)) zenon_H10)) zenon_H11)) _p_S1_equal_transitive))
in (zenon_all _p_S1_T (fun n1:_p_S1_T=>(forall n2:_p_S2_T,(Is_true (
_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n1)))) n3 (fun zenon_Hb=>(
zenon_all _p_S2_T (fun n2:_p_S2_T=>(Is_true (_p_S1_equal (abst_prj_a (
abst_constr n3 n2)) n3))) n4 (fun zenon_H7=>(zenon_all _p_S1_T (fun x
:_p_S1_T=>(forall y:_p_S1_T,((Is_true (_p_S1_equal x y))->(Is_true (
_p_S1_equal y x))))) (abst_prj_a (abst_constr n3 n4)) (fun zenon_Ha=>(
zenon_all _p_S1_T (fun y:_p_S1_T=>((Is_true (_p_S1_equal (abst_prj_a (
abst_constr n3 n4)) y))->(Is_true (_p_S1_equal y (abst_prj_a (
abst_constr n3 n4)))))) n3 (fun zenon_H9=>(zenon_imply _ _ (fun
zenon_H8=>(zenon_H8 zenon_H7)) (fun zenon_H5=>(zenon_H6 zenon_H5))
zenon_H9)) zenon_Ha)) _p_S1_equal_symmetric)) zenon_Hb))
abst_prj_a_is_first_of_pair))))).
Qed.

0
a149be823ecbbae1e3b6904ef7506088
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1261

%%begin-auto-proof
%%name: for_zenon___B_2_4_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For step <2>2. *)
        Parameter __B_2_2_LEMMA :
          (Is_true ((_p_S2_equal (abst_prj_b (abst_constr n1 n2)) n4))).
        (* For method of Self used via "by property !prj_b_is_snd_of_pair". *)
        Parameter abst_prj_b_is_snd_of_pair :
          forall n1 : _p_S1_T,
            forall n2 : _p_S2_T,
              Is_true ((_p_S2_equal (abst_prj_b (abst_constr n1 n2)) n2)).
        (* For species parameter method used via "by property pair#S2!equal_transitive". *)
        Parameter _p_S2_equal_transitive :
          forall x  y  z : _p_S2_T,
            Is_true ((_p_S2_equal x y)) ->
              Is_true ((_p_S2_equal y z)) -> Is_true ((_p_S2_equal x z)).
        (* For species parameter method used via "by property pair#S2!equal_symmetric". *)
        Parameter _p_S2_equal_symmetric :
          forall x  y : _p_S2_T,
            Is_true ((_p_S2_equal x y)) -> Is_true ((_p_S2_equal y x)).
        (* Theorem's body. *)
        Theorem for_zenon___B_2_4_LEMMA :
        Is_true ((_p_S2_equal (abst_prj_b (abst_constr n1 n2))
                   (abst_prj_b (abst_constr n3 n4)))).
%%end-auto-proof
0
a93c422b96dadfc814e6a3662099def5
proof
1888
Theorem for_zenon___B_2_4_LEMMA:(Is_true (_p_S2_equal (abst_prj_b (
abst_constr n1 n2)) (abst_prj_b (abst_constr n3 n4)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(let zenon_H6:=(fun zenon_H5=>(zenon_all _p_S2_T (
fun x:_p_S2_T=>(forall y:_p_S2_T,(forall z:_p_S2_T,((Is_true (
_p_S2_equal x y))->((Is_true (_p_S2_equal y z))->(Is_true (_p_S2_equal
x z))))))) (abst_prj_b (abst_constr n1 n2)) (fun zenon_H11=>(zenon_all
_p_S2_T (fun y:_p_S2_T=>(forall z:_p_S2_T,((Is_true (_p_S2_equal (
abst_prj_b (abst_constr n1 n2)) y))->((Is_true (_p_S2_equal y z))->(
Is_true (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) z)))))) n4 (fun
zenon_H10=>(zenon_all _p_S2_T (fun z:_p_S2_T=>((Is_true (_p_S2_equal (
abst_prj_b (abst_constr n1 n2)) n4))->((Is_true (_p_S2_equal n4 z))->(
Is_true (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) z))))) (
abst_prj_b (abst_constr n3 n4)) (fun zenon_Hf=>(zenon_imply _ _ (fun
zenon_He=>(zenon_He __B_2_2_LEMMA)) (fun zenon_Hd=>(zenon_imply _ _ (
fun zenon_H6=>(zenon_H6 zenon_H5)) (fun zenon_Hc=>(zenon_G zenon_Hc))
zenon_Hd)) zenon_Hf)) zenon_H10)) zenon_H11)) _p_S2_equal_transitive))
in (zenon_all _p_S1_T (fun n1:_p_S1_T=>(forall n2:_p_S2_T,(Is_true (
_p_S2_equal (abst_prj_b (abst_constr n1 n2)) n2)))) n3 (fun zenon_Hb=>(
zenon_all _p_S2_T (fun n2:_p_S2_T=>(Is_true (_p_S2_equal (abst_prj_b (
abst_constr n3 n2)) n2))) n4 (fun zenon_H7=>(zenon_all _p_S2_T (fun x
:_p_S2_T=>(forall y:_p_S2_T,((Is_true (_p_S2_equal x y))->(Is_true (
_p_S2_equal y x))))) (abst_prj_b (abst_constr n3 n4)) (fun zenon_Ha=>(
zenon_all _p_S2_T (fun y:_p_S2_T=>((Is_true (_p_S2_equal (abst_prj_b (
abst_constr n3 n4)) y))->(Is_true (_p_S2_equal y (abst_prj_b (
abst_constr n3 n4)))))) n4 (fun zenon_H9=>(zenon_imply _ _ (fun
zenon_H8=>(zenon_H8 zenon_H7)) (fun zenon_H5=>(zenon_H6 zenon_H5))
zenon_H9)) zenon_Ha)) _p_S2_equal_symmetric)) zenon_Hb))
abst_prj_b_is_snd_of_pair))))).
Qed.

0
27813a3306c03c56476b813094c50b66
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
950

%%begin-auto-proof
%%name: for_zenon___B_2_LEMMA
      
      
      
      (* Methods to use for automated proof. *)
      (* For step <2>3. *)
      Parameter __B_2_3_LEMMA :
        (Is_true ((_p_S1_equal (abst_prj_a (abst_constr n1 n2))
                    (abst_prj_a (abst_constr n3 n4))))).
      (* For step <2>4. *)
      Parameter __B_2_4_LEMMA :
        (Is_true ((_p_S2_equal (abst_prj_b (abst_constr n1 n2))
                    (abst_prj_b (abst_constr n3 n4))))).
      (* For method of Self used via "by property !def_equal". *)
      Parameter abst_def_equal :
        forall p1  p2 : abst_T,
          Is_true ((abst_equal p1 p2)) <->
            (Is_true ((_p_S1_equal (abst_prj_a p1) (abst_prj_a p2))) /\
               Is_true ((_p_S2_equal (abst_prj_b p1) (abst_prj_b p2)))).
      (* Theorem's body. *)
      Theorem for_zenon___B_2_LEMMA :
      Is_true ((abst_equal (abst_constr n1 n2) (abst_constr n3 n4))).
%%end-auto-proof
0
0a46adf8192d922c92aaae6968717c7a
proof
884
Theorem for_zenon___B_2_LEMMA:(Is_true (abst_equal (abst_constr n1 n2) (
abst_constr n3 n4))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all abst_T (fun p1:abst_T=>(forall p2
:abst_T,((Is_true (abst_equal p1 p2))<->((Is_true (_p_S1_equal (
abst_prj_a p1) (abst_prj_a p2)))/\(Is_true (_p_S2_equal (abst_prj_b p1)
(abst_prj_b p2))))))) (abst_constr n1 n2) (fun zenon_Ha=>(zenon_all
abst_T (fun p2:abst_T=>((Is_true (abst_equal (abst_constr n1 n2) p2))<->
((Is_true (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) (abst_prj_a p2))
)/\(Is_true (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) (abst_prj_b
p2)))))) (abst_constr n3 n4) (fun zenon_H9=>(zenon_equiv _ _ (fun
zenon_G zenon_H7=>(zenon_notand _ _ (fun zenon_H6=>(zenon_H6
__B_2_3_LEMMA)) (fun zenon_H5=>(zenon_H5 __B_2_4_LEMMA)) zenon_H7)) (
fun zenon_H4 zenon_H8=>(zenon_G zenon_H4)) zenon_H9)) zenon_Ha))
abst_def_equal)))).
Qed.

0
e302798e904fc111a3d08bd953e64543
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
982

%%begin-auto-proof
%%name: for_zenon_def_equal1
    
    
    
    (* Methods to use for automated proof. *)
    (* For step <1>1. *)
    Parameter __B_1_LEMMA : forall n1 : _p_S1_T, forall n3 : _p_S1_T,
      forall n2 : _p_S2_T, forall n4 : _p_S2_T,
      (Is_true ((abst_equal (abst_constr n1 n2) (abst_constr n3 n4)))) -> (
      (Is_true ((_p_S1_equal n1 n3)) /\ Is_true ((_p_S2_equal n2 n4)))).
    (* For step <1>2. *)
    Parameter __B_2_LEMMA : forall n1 : _p_S1_T, forall n3 : _p_S1_T,
      forall n2 : _p_S2_T, forall n4 : _p_S2_T,
      (Is_true ((_p_S1_equal n1 n3))) -> (Is_true ((_p_S2_equal n2 n4))) -> (
      Is_true ((abst_equal (abst_constr n1 n2) (abst_constr n3 n4)))).
    (* Theorem's body. *)
    Theorem for_zenon_def_equal1 :
    forall n1  n3 : _p_S1_T,
      forall n2  n4 : _p_S2_T,
        Is_true ((abst_equal (abst_constr n1 n2) (abst_constr n3 n4))) <->
          (Is_true ((_p_S1_equal n1 n3)) /\ Is_true ((_p_S2_equal n2 n4))).
%%end-auto-proof
0
f4f01da8977e4ab190ebd95e3d183dcb
proof
4096
Theorem for_zenon_def_equal1:(forall n1:_p_S1_T,(forall n3:_p_S1_T,(
forall n2:_p_S2_T,(forall n4:_p_S2_T,((Is_true (abst_equal (abst_constr
n1 n2) (abst_constr n3 n4)))<->((Is_true (_p_S1_equal n1 n3))/\(Is_true
(_p_S2_equal n2 n4)))))))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notallex (fun n1:_p_S1_T=>(forall n3
:_p_S1_T,(forall n2:_p_S2_T,(forall n4:_p_S2_T,((Is_true (abst_equal (
abst_constr n1 n2) (abst_constr n3 n4)))<->((Is_true (_p_S1_equal n1 n3)
)/\(Is_true (_p_S2_equal n2 n4)))))))) (fun zenon_H1f=>(zenon_ex
_p_S1_T (fun n1:_p_S1_T=>(~(forall n3:_p_S1_T,(forall n2:_p_S2_T,(
forall n4:_p_S2_T,((Is_true (abst_equal (abst_constr n1 n2) (
abst_constr n3 n4)))<->((Is_true (_p_S1_equal n1 n3))/\(Is_true (
_p_S2_equal n2 n4))))))))) (fun(zenon_Tn1_d:_p_S1_T) zenon_H1e=>(
zenon_notallex (fun n3:_p_S1_T=>(forall n2:_p_S2_T,(forall n4:_p_S2_T,((
Is_true (abst_equal (abst_constr zenon_Tn1_d n2) (abst_constr n3 n4)))
<->((Is_true (_p_S1_equal zenon_Tn1_d n3))/\(Is_true (_p_S2_equal n2 n4)
)))))) (fun zenon_H1d=>(zenon_ex _p_S1_T (fun n3:_p_S1_T=>(~(forall n2
:_p_S2_T,(forall n4:_p_S2_T,((Is_true (abst_equal (abst_constr
zenon_Tn1_d n2) (abst_constr n3 n4)))<->((Is_true (_p_S1_equal
zenon_Tn1_d n3))/\(Is_true (_p_S2_equal n2 n4)))))))) (fun(zenon_Tn3_e
:_p_S1_T) zenon_H1c=>(zenon_notallex (fun n2:_p_S2_T=>(forall n4
:_p_S2_T,((Is_true (abst_equal (abst_constr zenon_Tn1_d n2) (
abst_constr zenon_Tn3_e n4)))<->((Is_true (_p_S1_equal zenon_Tn1_d
zenon_Tn3_e))/\(Is_true (_p_S2_equal n2 n4)))))) (fun zenon_H1b=>(
zenon_ex _p_S2_T (fun n2:_p_S2_T=>(~(forall n4:_p_S2_T,((Is_true (
abst_equal (abst_constr zenon_Tn1_d n2) (abst_constr zenon_Tn3_e n4)))
<->((Is_true (_p_S1_equal zenon_Tn1_d zenon_Tn3_e))/\(Is_true (
_p_S2_equal n2 n4))))))) (fun(zenon_Tn2_f:_p_S2_T) zenon_H1a=>(
zenon_notallex (fun n4:_p_S2_T=>((Is_true (abst_equal (abst_constr
zenon_Tn1_d zenon_Tn2_f) (abst_constr zenon_Tn3_e n4)))<->((Is_true (
_p_S1_equal zenon_Tn1_d zenon_Tn3_e))/\(Is_true (_p_S2_equal
zenon_Tn2_f n4))))) (fun zenon_H19=>(zenon_ex _p_S2_T (fun n4:_p_S2_T=>(
~((Is_true (abst_equal (abst_constr zenon_Tn1_d zenon_Tn2_f) (
abst_constr zenon_Tn3_e n4)))<->((Is_true (_p_S1_equal zenon_Tn1_d
zenon_Tn3_e))/\(Is_true (_p_S2_equal zenon_Tn2_f n4)))))) (fun(
zenon_Tn4_m:_p_S2_T) zenon_H18=>(zenon_notequiv _ _ (fun zenon_H9
zenon_H6=>(zenon_and _ _ (fun zenon_H12 zenon_Hf=>(zenon_all _p_S1_T (
fun n1:_p_S1_T=>(forall n3:_p_S1_T,(forall n2:_p_S2_T,(forall n4
:_p_S2_T,((Is_true (_p_S1_equal n1 n3))->((Is_true (_p_S2_equal n2 n4))
->(Is_true (abst_equal (abst_constr n1 n2) (abst_constr n3 n4)))))))))
zenon_Tn1_d (fun zenon_H17=>(zenon_all _p_S1_T (fun n3:_p_S1_T=>(forall
n2:_p_S2_T,(forall n4:_p_S2_T,((Is_true (_p_S1_equal zenon_Tn1_d n3))->(
(Is_true (_p_S2_equal n2 n4))->(Is_true (abst_equal (abst_constr
zenon_Tn1_d n2) (abst_constr n3 n4)))))))) zenon_Tn3_e (fun zenon_H16=>(
zenon_all _p_S2_T (fun n2:_p_S2_T=>(forall n4:_p_S2_T,((Is_true (
_p_S1_equal zenon_Tn1_d zenon_Tn3_e))->((Is_true (_p_S2_equal n2 n4))->(
Is_true (abst_equal (abst_constr zenon_Tn1_d n2) (abst_constr
zenon_Tn3_e n4))))))) zenon_Tn2_f (fun zenon_H15=>(zenon_all _p_S2_T (
fun n4:_p_S2_T=>((Is_true (_p_S1_equal zenon_Tn1_d zenon_Tn3_e))->((
Is_true (_p_S2_equal zenon_Tn2_f n4))->(Is_true (abst_equal (
abst_constr zenon_Tn1_d zenon_Tn2_f) (abst_constr zenon_Tn3_e n4))))))
zenon_Tn4_m (fun zenon_H14=>(zenon_imply _ _ (fun zenon_H13=>(zenon_H13
zenon_H12)) (fun zenon_H11=>(zenon_imply _ _ (fun zenon_H10=>(zenon_H10
zenon_Hf)) (fun zenon_H8=>(zenon_H9 zenon_H8)) zenon_H11)) zenon_H14))
zenon_H15)) zenon_H16)) zenon_H17)) __B_2_LEMMA)) zenon_H6)) (fun
zenon_H8 zenon_H7=>(zenon_all _p_S1_T (fun n1:_p_S1_T=>(forall n3
:_p_S1_T,(forall n2:_p_S2_T,(forall n4:_p_S2_T,((Is_true (abst_equal (
abst_constr n1 n2) (abst_constr n3 n4)))->((Is_true (_p_S1_equal n1 n3))
/\(Is_true (_p_S2_equal n2 n4)))))))) zenon_Tn1_d (fun zenon_He=>(
zenon_all _p_S1_T (fun n3:_p_S1_T=>(forall n2:_p_S2_T,(forall n4
:_p_S2_T,((Is_true (abst_equal (abst_constr zenon_Tn1_d n2) (
abst_constr n3 n4)))->((Is_true (_p_S1_eq
846
ual zenon_Tn1_d n3))/\(Is_true
(_p_S2_equal n2 n4))))))) zenon_Tn3_e (fun zenon_Hd=>(zenon_all _p_S2_T
(fun n2:_p_S2_T=>(forall n4:_p_S2_T,((Is_true (abst_equal (abst_constr
zenon_Tn1_d n2) (abst_constr zenon_Tn3_e n4)))->((Is_true (_p_S1_equal
zenon_Tn1_d zenon_Tn3_e))/\(Is_true (_p_S2_equal n2 n4))))))
zenon_Tn2_f (fun zenon_Hb=>(zenon_all _p_S2_T (fun n4:_p_S2_T=>((
Is_true (abst_equal (abst_constr zenon_Tn1_d zenon_Tn2_f) (abst_constr
zenon_Tn3_e n4)))->((Is_true (_p_S1_equal zenon_Tn1_d zenon_Tn3_e))/\(
Is_true (_p_S2_equal zenon_Tn2_f n4))))) zenon_Tn4_m (fun zenon_Ha=>(
zenon_imply _ _ (fun zenon_H9=>(zenon_H9 zenon_H8)) (fun zenon_H6=>(
zenon_H7 zenon_H6)) zenon_Ha)) zenon_Hb)) zenon_Hd)) zenon_He))
__B_1_LEMMA)) zenon_H18)) zenon_H19)) zenon_H1a)) zenon_H1b)) zenon_H1c)
) zenon_H1d)) zenon_H1e)) zenon_H1f)) zenon_G)))).
Qed.

0
f83cbf2460c47145c3142b31df71bdf5
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
532

%%begin-auto-proof
%%name: for_zenon___C_1_1_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For method of Self used via "by property !unicite_2". *)
        Parameter abst_unicite_2 :
          forall a : abst_T,
            Is_true ((abst_equal a
                       (abst_constr (abst_prj_a a) (abst_prj_b a)))).
        (* Theorem's body. *)
        Theorem for_zenon___C_1_1_LEMMA :
        Is_true ((abst_equal p (abst_constr (abst_prj_a p) (abst_prj_b p)))).
%%end-auto-proof
0
8f67fb0d3e9bbfb4d2d99abf4622909b
proof
305
Theorem for_zenon___C_1_1_LEMMA:(Is_true (abst_equal p (abst_constr (
abst_prj_a p) (abst_prj_b p)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all abst_T (fun a:abst_T=>(Is_true (
abst_equal a (abst_constr (abst_prj_a a) (abst_prj_b a))))) p (fun
zenon_H2=>(zenon_G zenon_H2)) abst_unicite_2)))).
Qed.

0
52fc6d14069b14534e4e7cbfd2203a50
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
836

%%begin-auto-proof
%%name: for_zenon___C_1_LEMMA
      
      
      
      (* Methods to use for automated proof. *)
      (* For step <2>1. *)
      Parameter __C_1_1_LEMMA :
        (Is_true ((abst_equal p (abst_constr (abst_prj_a p) (abst_prj_b p))))).
      (* For method of Self used via "by property !unicite_1". *)
      Parameter abst_unicite_1 :
        forall a : abst_T,
          Is_true ((abst_equal (abst_constr (abst_prj_a a) (abst_prj_b a)) a)).
      (* For method of Self used via "by property !equal_transitive". *)
      Parameter abst_equal_transitive :
        forall x  y  z : abst_T,
          Is_true ((abst_equal x y)) ->
            Is_true ((abst_equal y z)) -> Is_true ((abst_equal x z)).
      (* Theorem's body. *)
      Theorem for_zenon___C_1_LEMMA :
      Is_true ((abst_equal p p)).
%%end-auto-proof
0
1018f6e3ca873e17456c42f219289af8
proof
1125
Theorem for_zenon___C_1_LEMMA:(Is_true (abst_equal p p)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(let zenon_H5:=(fun zenon_H4=>(zenon_all abst_T (
fun x:abst_T=>(forall y:abst_T,(forall z:abst_T,((Is_true (abst_equal x
y))->((Is_true (abst_equal y z))->(Is_true (abst_equal x z))))))) p (
fun zenon_Hb=>(zenon_all abst_T (fun y:abst_T=>(forall z:abst_T,((
Is_true (abst_equal p y))->((Is_true (abst_equal y z))->(Is_true (
abst_equal p z)))))) (abst_constr (abst_prj_a p) (abst_prj_b p)) (fun
zenon_Ha=>(zenon_all abst_T (fun z:abst_T=>((Is_true (abst_equal p (
abst_constr (abst_prj_a p) (abst_prj_b p))))->((Is_true (abst_equal (
abst_constr (abst_prj_a p) (abst_prj_b p)) z))->(Is_true (abst_equal p
z))))) p (fun zenon_H9=>(zenon_imply _ _ (fun zenon_H8=>(zenon_H8
__C_1_1_LEMMA)) (fun zenon_H7=>(zenon_imply _ _ (fun zenon_H5=>(
zenon_H5 zenon_H4)) (fun zenon_H6=>(zenon_G zenon_H6)) zenon_H7))
zenon_H9)) zenon_Ha)) zenon_Hb)) abst_equal_transitive)) in (zenon_all
abst_T (fun a:abst_T=>(Is_true (abst_equal (abst_constr (abst_prj_a a) (
abst_prj_b a)) a))) p (fun zenon_H4=>(zenon_H5 zenon_H4))
abst_unicite_1))))).
Qed.

0
67ec0dbd5c319b0b3b7dbf455b8775f6
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
350

%%begin-auto-proof
%%name: for_zenon_equal_reflexive
    
    
    
    (* Methods to use for automated proof. *)
    (* For step <1>1. *)
    Parameter __C_1_LEMMA : forall p : abst_T, (Is_true ((abst_equal p p))).
    (* Theorem's body. *)
    Theorem for_zenon_equal_reflexive :
    forall x : abst_T, Is_true ((abst_equal x x)).
%%end-auto-proof
0
7eb1fa84f8984e3dc2a0fbe90e9a4643
proof
147
Theorem for_zenon_equal_reflexive:(forall p:abst_T,(Is_true (abst_equal
p p))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_G __C_1_LEMMA)))).
Qed.

0
c52c964f64ca626304843c1c3dd503df
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
999

%%begin-auto-proof
%%name: for_zenon_equal_reflexive2
    
    
    
    (* Methods to use for automated proof. *)
    (* For method of Self used via "by property !def_equal1". *)
    Parameter abst_def_equal1 :
      forall n1  n3 : _p_S1_T,
        forall n2  n4 : _p_S2_T,
          Is_true ((abst_equal (abst_constr n1 n2) (abst_constr n3 n4))) <->
            (Is_true ((_p_S1_equal n1 n3)) /\ Is_true ((_p_S2_equal n2 n4))).
    (* For species parameter method used via "by property pair#S1!equal_reflexive". *)
    Parameter _p_S1_equal_reflexive :
      forall x : _p_S1_T, Is_true ((_p_S1_equal x x)).
    (* For species parameter method used via "by property pair#S2!equal_reflexive". *)
    Parameter _p_S2_equal_reflexive :
      forall x : _p_S2_T, Is_true ((_p_S2_equal x x)).
    (* Theorem's body. *)
    Theorem for_zenon_equal_reflexive2 :
    forall n1 : _p_S1_T,
      forall n2 : _p_S2_T,
        Is_true ((abst_equal (abst_constr n1 n2) (abst_constr n1 n2))).
%%end-auto-proof
0
3d0ee354c365037727cff245d33d3d63
proof
2318
Theorem for_zenon_equal_reflexive2:(forall n1:_p_S1_T,(forall n2
:_p_S2_T,(Is_true (abst_equal (abst_constr n1 n2) (abst_constr n1 n2))))
).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notallex (fun n1:_p_S1_T=>(forall n2
:_p_S2_T,(Is_true (abst_equal (abst_constr n1 n2) (abst_constr n1 n2))))
) (fun zenon_H14=>(zenon_ex _p_S1_T (fun n1:_p_S1_T=>(~(forall n2
:_p_S2_T,(Is_true (abst_equal (abst_constr n1 n2) (abst_constr n1 n2))))
)) (fun(zenon_Tn1_e:_p_S1_T) zenon_H13=>(zenon_notallex (fun n2
:_p_S2_T=>(Is_true (abst_equal (abst_constr zenon_Tn1_e n2) (
abst_constr zenon_Tn1_e n2)))) (fun zenon_H12=>(zenon_ex _p_S2_T (fun
n2:_p_S2_T=>(~(Is_true (abst_equal (abst_constr zenon_Tn1_e n2) (
abst_constr zenon_Tn1_e n2))))) (fun(zenon_Tn2_j:_p_S2_T) zenon_H6=>(
zenon_all _p_S1_T (fun n1:_p_S1_T=>(forall n3:_p_S1_T,(forall n2
:_p_S2_T,(forall n4:_p_S2_T,((Is_true (abst_equal (abst_constr n1 n2) (
abst_constr n3 n4)))<->((Is_true (_p_S1_equal n1 n3))/\(Is_true (
_p_S2_equal n2 n4)))))))) zenon_Tn1_e (fun zenon_H11=>(zenon_all
_p_S1_T (fun n3:_p_S1_T=>(forall n2:_p_S2_T,(forall n4:_p_S2_T,((
Is_true (abst_equal (abst_constr zenon_Tn1_e n2) (abst_constr n3 n4)))
<->((Is_true (_p_S1_equal zenon_Tn1_e n3))/\(Is_true (_p_S2_equal n2 n4)
)))))) zenon_Tn1_e (fun zenon_H10=>(zenon_all _p_S2_T (fun n2:_p_S2_T=>(
forall n4:_p_S2_T,((Is_true (abst_equal (abst_constr zenon_Tn1_e n2) (
abst_constr zenon_Tn1_e n4)))<->((Is_true (_p_S1_equal zenon_Tn1_e
zenon_Tn1_e))/\(Is_true (_p_S2_equal n2 n4)))))) zenon_Tn2_j (fun
zenon_Hf=>(zenon_all _p_S2_T (fun n4:_p_S2_T=>((Is_true (abst_equal (
abst_constr zenon_Tn1_e zenon_Tn2_j) (abst_constr zenon_Tn1_e n4)))<->((
Is_true (_p_S1_equal zenon_Tn1_e zenon_Tn1_e))/\(Is_true (_p_S2_equal
zenon_Tn2_j n4))))) zenon_Tn2_j (fun zenon_He=>(zenon_equiv _ _ (fun
zenon_H6 zenon_Hc=>(zenon_notand _ _ (fun zenon_Hb=>(zenon_all _p_S1_T (
fun x:_p_S1_T=>(Is_true (_p_S1_equal x x))) zenon_Tn1_e (fun zenon_Ha=>(
zenon_Hb zenon_Ha)) _p_S1_equal_reflexive)) (fun zenon_H8=>(zenon_all
_p_S2_T (fun x:_p_S2_T=>(Is_true (_p_S2_equal x x))) zenon_Tn2_j (fun
zenon_H7=>(zenon_H8 zenon_H7)) _p_S2_equal_reflexive)) zenon_Hc)) (fun
zenon_H5 zenon_Hd=>(zenon_H6 zenon_H5)) zenon_He)) zenon_Hf)) zenon_H10)
) zenon_H11)) abst_def_equal1)) zenon_H12)) zenon_H13)) zenon_H14))
zenon_G)))).
Qed.

0
c20551a08ad77eadad47700bbd70c66c
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
782

%%begin-auto-proof
%%name: for_zenon___E_1_1_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For hypothesis "H1". *)
        Parameter H1 :
          Is_true ((abst_equal (abst_constr n1 n2) (abst_constr n3 n4))).
        (* For method of Self used via "by property !def_equal1". *)
        Parameter abst_def_equal1 :
          forall n1  n3 : _p_S1_T,
            forall n2  n4 : _p_S2_T,
              Is_true ((abst_equal (abst_constr n1 n2) (abst_constr n3 n4))) <->
                (Is_true ((_p_S1_equal n1 n3)) /\
                   Is_true ((_p_S2_equal n2 n4))).
        (* Theorem's body. *)
        Theorem for_zenon___E_1_1_LEMMA :
        (Is_true ((_p_S1_equal n1 n3)) /\ Is_true ((_p_S2_equal n2 n4))).
%%end-auto-proof
0
4f5282e3a9229f53bcf1de226008187d
proof
1168
Theorem for_zenon___E_1_1_LEMMA:((Is_true (_p_S1_equal n1 n3))/\(
Is_true (_p_S2_equal n2 n4))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_S1_T (fun n1:_p_S1_T=>(forall n3
:_p_S1_T,(forall n2:_p_S2_T,(forall n4:_p_S2_T,((Is_true (abst_equal (
abst_constr n1 n2) (abst_constr n3 n4)))<->((Is_true (_p_S1_equal n1 n3)
)/\(Is_true (_p_S2_equal n2 n4)))))))) n1 (fun zenon_H8=>(zenon_all
_p_S1_T (fun n3:_p_S1_T=>(forall n2:_p_S2_T,(forall n4:_p_S2_T,((
Is_true (abst_equal (abst_constr n1 n2) (abst_constr n3 n4)))<->((
Is_true (_p_S1_equal n1 n3))/\(Is_true (_p_S2_equal n2 n4))))))) n3 (
fun zenon_H7=>(zenon_all _p_S2_T (fun n2:_p_S2_T=>(forall n4:_p_S2_T,((
Is_true (abst_equal (abst_constr n1 n2) (abst_constr n3 n4)))<->((
Is_true (_p_S1_equal n1 n3))/\(Is_true (_p_S2_equal n2 n4)))))) n2 (fun
zenon_H6=>(zenon_all _p_S2_T (fun n4:_p_S2_T=>((Is_true (abst_equal (
abst_constr n1 n2) (abst_constr n3 n4)))<->((Is_true (_p_S1_equal n1 n3)
)/\(Is_true (_p_S2_equal n2 n4))))) n4 (fun zenon_H5=>(zenon_equiv _ _ (
fun zenon_H4 zenon_G=>(zenon_H4 H1)) (fun H1 zenon_H3=>(zenon_G
zenon_H3)) zenon_H5)) zenon_H6)) zenon_H7)) zenon_H8)) abst_def_equal1))
)).
Qed.

0
c9ab1d06c0c66f22ac9864c2e9bccead
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
845

%%begin-auto-proof
%%name: for_zenon___E_1_2_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For species parameter method used via "by property pair#S1!equal_symmetric". *)
        Parameter _p_S1_equal_symmetric :
          forall x  y : _p_S1_T,
            Is_true ((_p_S1_equal x y)) -> Is_true ((_p_S1_equal y x)).
        (* For species parameter method used via "by property pair#S2!equal_symmetric". *)
        Parameter _p_S2_equal_symmetric :
          forall x  y : _p_S2_T,
            Is_true ((_p_S2_equal x y)) -> Is_true ((_p_S2_equal y x)).
        (* Theorem's body. *)
        Theorem for_zenon___E_1_2_LEMMA :
        (Is_true ((_p_S1_equal n1 n3)) /\ Is_true ((_p_S2_equal n2 n4))) ->
          (Is_true ((_p_S1_equal n3 n1)) /\ Is_true ((_p_S2_equal n4 n2))).
%%end-auto-proof
0
bb61a8c06079633bc9119428a1400438
proof
1143
Theorem for_zenon___E_1_2_LEMMA:(((Is_true (_p_S1_equal n1 n3))/\(
Is_true (_p_S2_equal n2 n4)))->((Is_true (_p_S1_equal n3 n1))/\(Is_true
(_p_S2_equal n4 n2)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notimply _ _ (fun zenon_H10 zenon_Hf=>(
zenon_and _ _ (fun zenon_Hb zenon_H5=>(zenon_notand _ _ (fun zenon_Ha=>(
zenon_all _p_S1_T (fun x:_p_S1_T=>(forall y:_p_S1_T,((Is_true (
_p_S1_equal x y))->(Is_true (_p_S1_equal y x))))) n1 (fun zenon_He=>(
zenon_all _p_S1_T (fun y:_p_S1_T=>((Is_true (_p_S1_equal n1 y))->(
Is_true (_p_S1_equal y n1)))) n3 (fun zenon_Hd=>(zenon_imply _ _ (fun
zenon_Hc=>(zenon_Hc zenon_Hb)) (fun zenon_H9=>(zenon_Ha zenon_H9))
zenon_Hd)) zenon_He)) _p_S1_equal_symmetric)) (fun zenon_H4=>(zenon_all
_p_S2_T (fun x:_p_S2_T=>(forall y:_p_S2_T,((Is_true (_p_S2_equal x y))->
(Is_true (_p_S2_equal y x))))) n2 (fun zenon_H8=>(zenon_all _p_S2_T (
fun y:_p_S2_T=>((Is_true (_p_S2_equal n2 y))->(Is_true (_p_S2_equal y
n2)))) n4 (fun zenon_H7=>(zenon_imply _ _ (fun zenon_H6=>(zenon_H6
zenon_H5)) (fun zenon_H3=>(zenon_H4 zenon_H3)) zenon_H7)) zenon_H8))
_p_S2_equal_symmetric)) zenon_Hf)) zenon_H10)) zenon_G)))).
Qed.

0
d6338eac1b0ce02ab5bacd75a746ebd9
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
726

%%begin-auto-proof
%%name: for_zenon___E_1_3_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For method of Self used via "by property !def_equal1". *)
        Parameter abst_def_equal1 :
          forall n1  n3 : _p_S1_T,
            forall n2  n4 : _p_S2_T,
              Is_true ((abst_equal (abst_constr n1 n2) (abst_constr n3 n4))) <->
                (Is_true ((_p_S1_equal n1 n3)) /\
                   Is_true ((_p_S2_equal n2 n4))).
        (* Theorem's body. *)
        Theorem for_zenon___E_1_3_LEMMA :
        (Is_true ((_p_S1_equal n3 n1)) /\ Is_true ((_p_S2_equal n4 n2))) ->
          Is_true ((abst_equal (abst_constr n3 n4) (abst_constr n1 n2))).
%%end-auto-proof
0
e7f7c60336ca999e70309c8b7ca0e746
proof
1469
Theorem for_zenon___E_1_3_LEMMA:(((Is_true (_p_S1_equal n3 n1))/\(
Is_true (_p_S2_equal n4 n2)))->(Is_true (abst_equal (abst_constr n3 n4)
(abst_constr n1 n2)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notimply _ _ (fun zenon_H9 zenon_H3=>(
zenon_and _ _ (fun zenon_H6 zenon_H4=>(zenon_all _p_S1_T (fun n1
:_p_S1_T=>(forall n3:_p_S1_T,(forall n2:_p_S2_T,(forall n4:_p_S2_T,((
Is_true (abst_equal (abst_constr n1 n2) (abst_constr n3 n4)))<->((
Is_true (_p_S1_equal n1 n3))/\(Is_true (_p_S2_equal n2 n4)))))))) n3 (
fun zenon_Hd=>(zenon_all _p_S1_T (fun zenon_Vg:_p_S1_T=>(forall n2
:_p_S2_T,(forall n4:_p_S2_T,((Is_true (abst_equal (abst_constr n3 n2) (
abst_constr zenon_Vg n4)))<->((Is_true (_p_S1_equal n3 zenon_Vg))/\(
Is_true (_p_S2_equal n2 n4))))))) n1 (fun zenon_Hc=>(zenon_all _p_S2_T (
fun n2:_p_S2_T=>(forall n4:_p_S2_T,((Is_true (abst_equal (abst_constr
n3 n2) (abst_constr n1 n4)))<->((Is_true (_p_S1_equal n3 n1))/\(Is_true
(_p_S2_equal n2 n4)))))) n4 (fun zenon_Hb=>(zenon_all _p_S2_T (fun
zenon_Vh:_p_S2_T=>((Is_true (abst_equal (abst_constr n3 n4) (
abst_constr n1 zenon_Vh)))<->((Is_true (_p_S1_equal n3 n1))/\(Is_true (
_p_S2_equal n4 zenon_Vh))))) n2 (fun zenon_Ha=>(zenon_equiv _ _ (fun
zenon_H3 zenon_H8=>(zenon_notand _ _ (fun zenon_H7=>(zenon_H7 zenon_H6))
 (fun zenon_H5=>(zenon_H5 zenon_H4)) zenon_H8)) (fun zenon_H2 zenon_H9=>
(zenon_H3 zenon_H2)) zenon_Ha)) zenon_Hb)) zenon_Hc)) zenon_Hd))
abst_def_equal1)) zenon_H9)) zenon_G)))).
Qed.

0
45f92bb1d0935f90eb4aac9ab0c270b5
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
958

%%begin-auto-proof
%%name: for_zenon___E_1_LEMMA
      
      
      
      (* Methods to use for automated proof. *)
      (* For hypothesis "H1". *)
      Parameter H1 :
        Is_true ((abst_equal (abst_constr n1 n2) (abst_constr n3 n4))).
      (* For step <2>1. *)
      Parameter __E_1_1_LEMMA :
        ((Is_true ((_p_S1_equal n1 n3)) /\ Is_true ((_p_S2_equal n2 n4)))).
      (* For step <2>2. *)
      Parameter __E_1_2_LEMMA :
        ((Is_true ((_p_S1_equal n1 n3)) /\ Is_true ((_p_S2_equal n2 n4))) ->
           (Is_true ((_p_S1_equal n3 n1)) /\ Is_true ((_p_S2_equal n4 n2)))).
      (* For step <2>3. *)
      Parameter __E_1_3_LEMMA :
        ((Is_true ((_p_S1_equal n3 n1)) /\ Is_true ((_p_S2_equal n4 n2))) ->
           Is_true ((abst_equal (abst_constr n3 n4) (abst_constr n1 n2)))).
      (* Theorem's body. *)
      Theorem for_zenon___E_1_LEMMA :
      Is_true ((abst_equal (abst_constr n3 n4) (abst_constr n1 n2))).
%%end-auto-proof
0
0726cef4fd27483f19c3c04f09b089d0
proof
599
Theorem for_zenon___E_1_LEMMA:(Is_true (abst_equal (abst_constr n3 n4) (
abst_constr n1 n2))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_and _ _ (fun zenon_He zenon_Hc=>(
zenon_imply _ _ (fun zenon_H10=>(zenon_notand _ _ (fun zenon_Hf=>(
zenon_Hf zenon_He)) (fun zenon_Hd=>(zenon_Hd zenon_Hc)) zenon_H10)) (
fun zenon_Hb=>(zenon_and _ _ (fun zenon_H8 zenon_H6=>(zenon_imply _ _ (
fun zenon_Ha=>(zenon_notand _ _ (fun zenon_H9=>(zenon_H9 zenon_H8)) (
fun zenon_H7=>(zenon_H7 zenon_H6)) zenon_Ha)) (fun zenon_H5=>(zenon_G
zenon_H5)) __E_1_3_LEMMA)) zenon_Hb)) __E_1_2_LEMMA)) __E_1_1_LEMMA)))).
Qed.

0
1e477e917024439922af2283048df124
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
697

%%begin-auto-proof
%%name: for_zenon_equal_symmetric2
    
    
    
    (* Methods to use for automated proof. *)
    (* For step <1>1. *)
    Parameter __E_1_LEMMA : forall n1 : _p_S1_T, forall n3 : _p_S1_T,
      forall n2 : _p_S2_T, forall n4 : _p_S2_T,
      (Is_true ((abst_equal (abst_constr n1 n2) (abst_constr n3 n4)))) -> (
      Is_true ((abst_equal (abst_constr n3 n4) (abst_constr n1 n2)))).
    (* Theorem's body. *)
    Theorem for_zenon_equal_symmetric2 :
    forall n1  n3 : _p_S1_T,
      forall n2  n4 : _p_S2_T,
        Is_true ((abst_equal (abst_constr n1 n2) (abst_constr n3 n4))) ->
          Is_true ((abst_equal (abst_constr n3 n4) (abst_constr n1 n2))).
%%end-auto-proof
0
e9368f5de59feffe6bef88e1fea63ad4
proof
315
Theorem for_zenon_equal_symmetric2:(forall n1:_p_S1_T,(forall n3
:_p_S1_T,(forall n2:_p_S2_T,(forall n4:_p_S2_T,((Is_true (abst_equal (
abst_constr n1 n2) (abst_constr n3 n4)))->(Is_true (abst_equal (
abst_constr n3 n4) (abst_constr n1 n2)))))))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_G __E_1_LEMMA)))).
Qed.

0
df6030bf1cfa8ab618d58d79363261d5
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
726

%%begin-auto-proof
%%name: for_zenon___F_1_1_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For method of Self used via "by property !def_equal1". *)
        Parameter abst_def_equal1 :
          forall n1  n3 : _p_S1_T,
            forall n2  n4 : _p_S2_T,
              Is_true ((abst_equal (abst_constr n1 n2) (abst_constr n3 n4))) <->
                (Is_true ((_p_S1_equal n1 n3)) /\
                   Is_true ((_p_S2_equal n2 n4))).
        (* Theorem's body. *)
        Theorem for_zenon___F_1_1_LEMMA :
        (Is_true ((_p_S1_equal n1 n5)) /\ Is_true ((_p_S2_equal n2 n6))) ->
          Is_true ((abst_equal (abst_constr n1 n2) (abst_constr n5 n6))).
%%end-auto-proof
0
6a4e7b074bd29e09d49e5709515a1b1f
proof
1435
Theorem for_zenon___F_1_1_LEMMA:(((Is_true (_p_S1_equal n1 n5))/\(
Is_true (_p_S2_equal n2 n6)))->(Is_true (abst_equal (abst_constr n1 n2)
(abst_constr n5 n6)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notimply _ _ (fun zenon_H9 zenon_H3=>(
zenon_and _ _ (fun zenon_H6 zenon_H4=>(zenon_all _p_S1_T (fun n1
:_p_S1_T=>(forall n3:_p_S1_T,(forall n2:_p_S2_T,(forall n4:_p_S2_T,((
Is_true (abst_equal (abst_constr n1 n2) (abst_constr n3 n4)))<->((
Is_true (_p_S1_equal n1 n3))/\(Is_true (_p_S2_equal n2 n4)))))))) n1 (
fun zenon_Hd=>(zenon_all _p_S1_T (fun n3:_p_S1_T=>(forall n2:_p_S2_T,(
forall n4:_p_S2_T,((Is_true (abst_equal (abst_constr n1 n2) (
abst_constr n3 n4)))<->((Is_true (_p_S1_equal n1 n3))/\(Is_true (
_p_S2_equal n2 n4))))))) n5 (fun zenon_Hc=>(zenon_all _p_S2_T (fun n2
:_p_S2_T=>(forall n4:_p_S2_T,((Is_true (abst_equal (abst_constr n1 n2) (
abst_constr n5 n4)))<->((Is_true (_p_S1_equal n1 n5))/\(Is_true (
_p_S2_equal n2 n4)))))) n2 (fun zenon_Hb=>(zenon_all _p_S2_T (fun n4
:_p_S2_T=>((Is_true (abst_equal (abst_constr n1 n2) (abst_constr n5 n4))
)<->((Is_true (_p_S1_equal n1 n5))/\(Is_true (_p_S2_equal n2 n4))))) n6
(fun zenon_Ha=>(zenon_equiv _ _ (fun zenon_H3 zenon_H8=>(zenon_notand _
_ (fun zenon_H7=>(zenon_H7 zenon_H6)) (fun zenon_H5=>(zenon_H5 zenon_H4)
) zenon_H8)) (fun zenon_H2 zenon_H9=>(zenon_H3 zenon_H2)) zenon_Ha))
zenon_Hb)) zenon_Hc)) zenon_Hd)) abst_def_equal1)) zenon_H9)) zenon_G)))
).
Qed.

0
d83d0a4a74a37192982ec92b21865d25
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
782

%%begin-auto-proof
%%name: for_zenon___F_1_2_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For hypothesis "H1". *)
        Parameter H1 :
          Is_true ((abst_equal (abst_constr n1 n2) (abst_constr n3 n4))).
        (* For method of Self used via "by property !def_equal1". *)
        Parameter abst_def_equal1 :
          forall n1  n3 : _p_S1_T,
            forall n2  n4 : _p_S2_T,
              Is_true ((abst_equal (abst_constr n1 n2) (abst_constr n3 n4))) <->
                (Is_true ((_p_S1_equal n1 n3)) /\
                   Is_true ((_p_S2_equal n2 n4))).
        (* Theorem's body. *)
        Theorem for_zenon___F_1_2_LEMMA :
        (Is_true ((_p_S1_equal n1 n3)) /\ Is_true ((_p_S2_equal n2 n4))).
%%end-auto-proof
0
d5565673cfab56aa2c7082573a619a1e
proof
1168
Theorem for_zenon___F_1_2_LEMMA:((Is_true (_p_S1_equal n1 n3))/\(
Is_true (_p_S2_equal n2 n4))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_S1_T (fun n1:_p_S1_T=>(forall n3
:_p_S1_T,(forall n2:_p_S2_T,(forall n4:_p_S2_T,((Is_true (abst_equal (
abst_constr n1 n2) (abst_constr n3 n4)))<->((Is_true (_p_S1_equal n1 n3)
)/\(Is_true (_p_S2_equal n2 n4)))))))) n1 (fun zenon_H8=>(zenon_all
_p_S1_T (fun n3:_p_S1_T=>(forall n2:_p_S2_T,(forall n4:_p_S2_T,((
Is_true (abst_equal (abst_constr n1 n2) (abst_constr n3 n4)))<->((
Is_true (_p_S1_equal n1 n3))/\(Is_true (_p_S2_equal n2 n4))))))) n3 (
fun zenon_H7=>(zenon_all _p_S2_T (fun n2:_p_S2_T=>(forall n4:_p_S2_T,((
Is_true (abst_equal (abst_constr n1 n2) (abst_constr n3 n4)))<->((
Is_true (_p_S1_equal n1 n3))/\(Is_true (_p_S2_equal n2 n4)))))) n2 (fun
zenon_H6=>(zenon_all _p_S2_T (fun n4:_p_S2_T=>((Is_true (abst_equal (
abst_constr n1 n2) (abst_constr n3 n4)))<->((Is_true (_p_S1_equal n1 n3)
)/\(Is_true (_p_S2_equal n2 n4))))) n4 (fun zenon_H5=>(zenon_equiv _ _ (
fun zenon_H4 zenon_G=>(zenon_H4 H1)) (fun H1 zenon_H3=>(zenon_G
zenon_H3)) zenon_H5)) zenon_H6)) zenon_H7)) zenon_H8)) abst_def_equal1))
)).
Qed.

0
5b96e08914e2fca2d3c715cc039ecefd
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
782

%%begin-auto-proof
%%name: for_zenon___F_1_3_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For hypothesis "H2". *)
        Parameter H2 :
          Is_true ((abst_equal (abst_constr n3 n4) (abst_constr n5 n6))).
        (* For method of Self used via "by property !def_equal1". *)
        Parameter abst_def_equal1 :
          forall n1  n3 : _p_S1_T,
            forall n2  n4 : _p_S2_T,
              Is_true ((abst_equal (abst_constr n1 n2) (abst_constr n3 n4))) <->
                (Is_true ((_p_S1_equal n1 n3)) /\
                   Is_true ((_p_S2_equal n2 n4))).
        (* Theorem's body. *)
        Theorem for_zenon___F_1_3_LEMMA :
        (Is_true ((_p_S1_equal n3 n5)) /\ Is_true ((_p_S2_equal n4 n6))).
%%end-auto-proof
0
1c3b5a90c9b2627b9c79284692fb6b61
proof
1201
Theorem for_zenon___F_1_3_LEMMA:((Is_true (_p_S1_equal n3 n5))/\(
Is_true (_p_S2_equal n4 n6))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_S1_T (fun n1:_p_S1_T=>(forall n3
:_p_S1_T,(forall n2:_p_S2_T,(forall n4:_p_S2_T,((Is_true (abst_equal (
abst_constr n1 n2) (abst_constr n3 n4)))<->((Is_true (_p_S1_equal n1 n3)
)/\(Is_true (_p_S2_equal n2 n4)))))))) n3 (fun zenon_H8=>(zenon_all
_p_S1_T (fun zenon_Vh:_p_S1_T=>(forall n2:_p_S2_T,(forall n4:_p_S2_T,((
Is_true (abst_equal (abst_constr n3 n2) (abst_constr zenon_Vh n4)))<->((
Is_true (_p_S1_equal n3 zenon_Vh))/\(Is_true (_p_S2_equal n2 n4)))))))
n5 (fun zenon_H7=>(zenon_all _p_S2_T (fun n2:_p_S2_T=>(forall n4
:_p_S2_T,((Is_true (abst_equal (abst_constr n3 n2) (abst_constr n5 n4)))
<->((Is_true (_p_S1_equal n3 n5))/\(Is_true (_p_S2_equal n2 n4)))))) n4
(fun zenon_H6=>(zenon_all _p_S2_T (fun zenon_Vj:_p_S2_T=>((Is_true (
abst_equal (abst_constr n3 n4) (abst_constr n5 zenon_Vj)))<->((Is_true (
_p_S1_equal n3 n5))/\(Is_true (_p_S2_equal n4 zenon_Vj))))) n6 (fun
zenon_H5=>(zenon_equiv _ _ (fun zenon_H4 zenon_G=>(zenon_H4 H2)) (fun
H2 zenon_H3=>(zenon_G zenon_H3)) zenon_H5)) zenon_H6)) zenon_H7))
zenon_H8)) abst_def_equal1)))).
Qed.

0
5f8ba00e4e49e54e9713f0fb5281509c
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1309

%%begin-auto-proof
%%name: for_zenon___F_1_LEMMA
      
      
      
      (* Methods to use for automated proof. *)
      (* For step <2>1. *)
      Parameter __F_1_1_LEMMA :
        ((Is_true ((_p_S1_equal n1 n5)) /\ Is_true ((_p_S2_equal n2 n6))) ->
           Is_true ((abst_equal (abst_constr n1 n2) (abst_constr n5 n6)))).
      (* For step <2>2. *)
      Parameter __F_1_2_LEMMA :
        ((Is_true ((_p_S1_equal n1 n3)) /\ Is_true ((_p_S2_equal n2 n4)))).
      (* For step <2>3. *)
      Parameter __F_1_3_LEMMA :
        ((Is_true ((_p_S1_equal n3 n5)) /\ Is_true ((_p_S2_equal n4 n6)))).
      (* For species parameter method used via "by property pair#S1!equal_transitive". *)
      Parameter _p_S1_equal_transitive :
        forall x  y  z : _p_S1_T,
          Is_true ((_p_S1_equal x y)) ->
            Is_true ((_p_S1_equal y z)) -> Is_true ((_p_S1_equal x z)).
      (* For species parameter method used via "by property pair#S2!equal_transitive". *)
      Parameter _p_S2_equal_transitive :
        forall x  y  z : _p_S2_T,
          Is_true ((_p_S2_equal x y)) ->
            Is_true ((_p_S2_equal y z)) -> Is_true ((_p_S2_equal x z)).
      (* Theorem's body. *)
      Theorem for_zenon___F_1_LEMMA :
      Is_true ((abst_equal (abst_constr n1 n2) (abst_constr n5 n6))).
%%end-auto-proof
0
9c8fde146b7060f4f014703b6a75ebfd
proof
3424
Theorem for_zenon___F_1_LEMMA:(Is_true (abst_equal (abst_constr n1 n2) (
abst_constr n5 n6))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_and _ _ (fun zenon_H24 zenon_He=>(
zenon_and _ _ (fun zenon_H1f zenon_H9=>(zenon_imply _ _ (fun zenon_H33=>
(zenon_notand _ _ (fun zenon_H1e=>(let zenon_H30:=(fun zenon_H32=>(
zenon_and _ _ (fun zenon_H2e zenon_H25=>(zenon_H25 zenon_H24))
zenon_H32)) in (let zenon_H1d:=(fun zenon_H31=>(zenon_subst _ (fun
zenon_Vi=>(Is_true zenon_Vi)) (_p_S1_equal n3 n5) (_p_S1_equal n1 n5) (
fun zenon_H20=>(zenon_subst _ (fun zenon_Vj=>(~((_p_S1_equal zenon_Vj
n5) = (_p_S1_equal n1 n5)))) n3 n1 (fun zenon_H2b=>(zenon_notand _ _ (
fun zenon_H2f=>(zenon_H2f (fun zenon_H2d=>(let zenon_H2a:=(fun
zenon_H2c=>(zenon_subst _ (fun zenon_Vk=>(zenon_Vk = n1)) n1 n3 (fun
zenon_H2e=>(zenon_H2e zenon_H2d)) zenon_H2b zenon_H2c)) in (zenon_noteq
_ n1 zenon_H2a))))) (fun zenon_H29=>(zenon_H29 (fun zenon_H24=>(
zenon_all _p_S1_T (fun x:_p_S1_T=>(forall y:_p_S1_T,(forall z:_p_S1_T,((
Is_true (_p_S1_equal x y))->((Is_true (_p_S1_equal y z))->(Is_true (
_p_S1_equal x z))))))) n1 (fun zenon_H28=>(zenon_all _p_S1_T (fun y
:_p_S1_T=>(forall z:_p_S1_T,((Is_true (_p_S1_equal n1 y))->((Is_true (
_p_S1_equal y z))->(Is_true (_p_S1_equal n1 z)))))) n3 (fun zenon_H27=>(
zenon_all _p_S1_T (fun z:_p_S1_T=>((Is_true (_p_S1_equal n1 n3))->((
Is_true (_p_S1_equal n3 z))->(Is_true (_p_S1_equal n1 z))))) n5 (fun
zenon_H26=>(zenon_imply _ _ (fun zenon_H25=>(zenon_H25 zenon_H24)) (fun
zenon_H23=>(zenon_imply _ _ (fun zenon_H22=>(zenon_H22 zenon_H1f)) (fun
zenon_H21=>(zenon_H1e zenon_H21)) zenon_H23)) zenon_H26)) zenon_H27))
zenon_H28)) _p_S1_equal_transitive)))) zenon_H30)) (zenon_notnot _ (
refl_equal (_p_S1_equal n1 n5))) zenon_H20)) zenon_H1e zenon_H1f)) in (
zenon_noteq _ n5 zenon_H1d)))) (fun zenon_H8=>(let zenon_H1a:=(fun
zenon_H1c=>(zenon_and _ _ (fun zenon_H18 zenon_Hf=>(zenon_Hf zenon_He))
zenon_H1c)) in (let zenon_H7:=(fun zenon_H1b=>(zenon_subst _ (fun
zenon_Vf=>(Is_true zenon_Vf)) (_p_S2_equal n4 n6) (_p_S2_equal n2 n6) (
fun zenon_Ha=>(zenon_subst _ (fun zenon_Vg=>(~((_p_S2_equal zenon_Vg n6)
 = (_p_S2_equal n2 n6)))) n4 n2 (fun zenon_H15=>(zenon_notand _ _ (fun
zenon_H19=>(zenon_H19 (fun zenon_H17=>(let zenon_H14:=(fun zenon_H16=>(
zenon_subst _ (fun zenon_Vh=>(zenon_Vh = n2)) n2 n4 (fun zenon_H18=>(
zenon_H18 zenon_H17)) zenon_H15 zenon_H16)) in (zenon_noteq _ n2
zenon_H14))))) (fun zenon_H13=>(zenon_H13 (fun zenon_He=>(zenon_all
_p_S2_T (fun x:_p_S2_T=>(forall y:_p_S2_T,(forall z:_p_S2_T,((Is_true (
_p_S2_equal x y))->((Is_true (_p_S2_equal y z))->(Is_true (_p_S2_equal
x z))))))) n2 (fun zenon_H12=>(zenon_all _p_S2_T (fun y:_p_S2_T=>(
forall z:_p_S2_T,((Is_true (_p_S2_equal n2 y))->((Is_true (_p_S2_equal
y z))->(Is_true (_p_S2_equal n2 z)))))) n4 (fun zenon_H11=>(zenon_all
_p_S2_T (fun z:_p_S2_T=>((Is_true (_p_S2_equal n2 n4))->((Is_true (
_p_S2_equal n4 z))->(Is_true (_p_S2_equal n2 z))))) n6 (fun zenon_H10=>(
zenon_imply _ _ (fun zenon_Hf=>(zenon_Hf zenon_He)) (fun zenon_Hd=>(
zenon_imply _ _ (fun zenon_Hc=>(zenon_Hc zenon_H9)) (fun zenon_Hb=>(
zenon_H8 zenon_Hb)) zenon_Hd)) zenon_H10)) zenon_H11)) zenon_H12))
_p_S2_equal_transitive)))) zenon_H1a)) (zenon_notnot _ (refl_equal (
_p_S2_equal n2 n6))) zenon_Ha)) zenon_H8 zenon_H9)) in (zenon_noteq _
n6 zenon_H7)))) zenon_H33)) (fun zenon_H6=>(zenon_G zenon_H6))
__F_1_1_LEMMA)) __F_1_3_LEMMA)) __F_1_2_LEMMA)))).
Qed.

0
2763311902a5fbd873f28dfa86c067cc
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
908

%%begin-auto-proof
%%name: for_zenon_equal_transitive2
    
    
    
    (* Methods to use for automated proof. *)
    (* For step <1>1. *)
    Parameter __F_1_LEMMA : forall n1 : _p_S1_T, forall n3 : _p_S1_T,
      forall n5 : _p_S1_T, forall n2 : _p_S2_T, forall n4 : _p_S2_T,
      forall n6 : _p_S2_T,
      (Is_true ((abst_equal (abst_constr n1 n2) (abst_constr n3 n4)))) ->
       (Is_true ((abst_equal (abst_constr n3 n4) (abst_constr n5 n6)))) -> (
      Is_true ((abst_equal (abst_constr n1 n2) (abst_constr n5 n6)))).
    (* Theorem's body. *)
    Theorem for_zenon_equal_transitive2 :
    forall n1  n3  n5 : _p_S1_T,
      forall n2  n4  n6 : _p_S2_T,
        Is_true ((abst_equal (abst_constr n1 n2) (abst_constr n3 n4))) ->
          Is_true ((abst_equal (abst_constr n3 n4) (abst_constr n5 n6))) ->
            Is_true ((abst_equal (abst_constr n1 n2) (abst_constr n5 n6))).
%%end-auto-proof
0
d1d0935750cf5af761662172b47863aa
proof
424
Theorem for_zenon_equal_transitive2:(forall n1:_p_S1_T,(forall n3
:_p_S1_T,(forall n5:_p_S1_T,(forall n2:_p_S2_T,(forall n4:_p_S2_T,(
forall n6:_p_S2_T,((Is_true (abst_equal (abst_constr n1 n2) (
abst_constr n3 n4)))->((Is_true (abst_equal (abst_constr n3 n4) (
abst_constr n5 n6)))->(Is_true (abst_equal (abst_constr n1 n2) (
abst_constr n5 n6))))))))))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_G __F_1_LEMMA)))).
Qed.

0
ecd2c943805ee7ecf0abf828ab6c95be
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
908

%%begin-auto-proof
%%name: for_zenon___G_1_1_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For hypothesis "H1". *)
        Parameter H1 : Is_true ((abst_equal p1 p2)).
        (* For method of Self used via "by property !unicite_1". *)
        Parameter abst_unicite_1 :
          forall a : abst_T,
            Is_true ((abst_equal (abst_constr (abst_prj_a a) (abst_prj_b a))
                       a)).
        (* For method of Self used via "by property !equal_transitive". *)
        Parameter abst_equal_transitive :
          forall x  y  z : abst_T,
            Is_true ((abst_equal x y)) ->
              Is_true ((abst_equal y z)) -> Is_true ((abst_equal x z)).
        (* Theorem's body. *)
        Theorem for_zenon___G_1_1_LEMMA :
        Is_true ((abst_equal (abst_constr (abst_prj_a p1) (abst_prj_b p1))
                   p2)).
%%end-auto-proof
0
df1a810761ccf974047cf84760ba4678
proof
2268
Theorem for_zenon___G_1_1_LEMMA:(Is_true (abst_equal (abst_constr (
abst_prj_a p1) (abst_prj_b p1)) p2)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(let zenon_H15:=(fun zenon_H17=>(zenon_and _ _ (
fun zenon_H13 zenon_Ha=>(zenon_all abst_T (fun a:abst_T=>(Is_true (
abst_equal (abst_constr (abst_prj_a a) (abst_prj_b a)) a))) p1 (fun
zenon_H9=>(zenon_Ha zenon_H9)) abst_unicite_1)) zenon_H17)) in (let
zenon_H4:=(fun zenon_H16=>(zenon_subst _ (fun zenon_Vf=>(Is_true
zenon_Vf)) (abst_equal p1 p2) (abst_equal (abst_constr (abst_prj_a p1) (
abst_prj_b p1)) p2) (fun zenon_H5=>(zenon_subst _ (fun zenon_Vg=>(~((
abst_equal zenon_Vg p2) = (abst_equal (abst_constr (abst_prj_a p1) (
abst_prj_b p1)) p2)))) p1 (abst_constr (abst_prj_a p1) (abst_prj_b p1))
(fun zenon_H10=>(zenon_notand _ _ (fun zenon_H14=>(zenon_H14 (fun
zenon_H12=>(let zenon_Hf:=(fun zenon_H11=>(zenon_subst _ (fun zenon_Vh=>
(zenon_Vh = (abst_constr (abst_prj_a p1) (abst_prj_b p1)))) (
abst_constr (abst_prj_a p1) (abst_prj_b p1)) p1 (fun zenon_H13=>(
zenon_H13 zenon_H12)) zenon_H10 zenon_H11)) in (zenon_noteq _ (
abst_constr (abst_prj_a p1) (abst_prj_b p1)) zenon_Hf))))) (fun
zenon_He=>(zenon_He (fun zenon_H9=>(zenon_all abst_T (fun x:abst_T=>(
forall y:abst_T,(forall z:abst_T,((Is_true (abst_equal x y))->((Is_true
(abst_equal y z))->(Is_true (abst_equal x z))))))) (abst_constr (
abst_prj_a p1) (abst_prj_b p1)) (fun zenon_Hd=>(zenon_all abst_T (fun y
:abst_T=>(forall z:abst_T,((Is_true (abst_equal (abst_constr (
abst_prj_a p1) (abst_prj_b p1)) y))->((Is_true (abst_equal y z))->(
Is_true (abst_equal (abst_constr (abst_prj_a p1) (abst_prj_b p1)) z)))))
) p1 (fun zenon_Hc=>(zenon_all abst_T (fun z:abst_T=>((Is_true (
abst_equal (abst_constr (abst_prj_a p1) (abst_prj_b p1)) p1))->((
Is_true (abst_equal p1 z))->(Is_true (abst_equal (abst_constr (
abst_prj_a p1) (abst_prj_b p1)) z))))) p2 (fun zenon_Hb=>(zenon_imply _
_ (fun zenon_Ha=>(zenon_Ha zenon_H9)) (fun zenon_H8=>(zenon_imply _ _ (
fun zenon_H7=>(zenon_H7 H1)) (fun zenon_H6=>(zenon_G zenon_H6))
zenon_H8)) zenon_Hb)) zenon_Hc)) zenon_Hd)) abst_equal_transitive))))
zenon_H15)) (zenon_notnot _ (refl_equal (abst_equal (abst_constr (
abst_prj_a p1) (abst_prj_b p1)) p2))) zenon_H5)) zenon_G H1)) in (
zenon_noteq _ p2 zenon_H4)))))).
Qed.

0
ef8a0a968ebcecc8c130fc5de6e81058
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1033

%%begin-auto-proof
%%name: for_zenon___G_1_2_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For step <2>1. *)
        Parameter __G_1_1_LEMMA :
          (Is_true ((abst_equal (abst_constr (abst_prj_a p1) (abst_prj_b p1))
                      p2))).
        (* For method of Self used via "by property !unicite_2". *)
        Parameter abst_unicite_2 :
          forall a : abst_T,
            Is_true ((abst_equal a
                       (abst_constr (abst_prj_a a) (abst_prj_b a)))).
        (* For method of Self used via "by property !equal_transitive". *)
        Parameter abst_equal_transitive :
          forall x  y  z : abst_T,
            Is_true ((abst_equal x y)) ->
              Is_true ((abst_equal y z)) -> Is_true ((abst_equal x z)).
        (* Theorem's body. *)
        Theorem for_zenon___G_1_2_LEMMA :
        Is_true ((abst_equal (abst_constr (abst_prj_a p1) (abst_prj_b p1))
                   (abst_constr (abst_prj_a p2) (abst_prj_b p2)))).
%%end-auto-proof
0
9d8ee4acaa78bcff820218b1939b113e
proof
1578
Theorem for_zenon___G_1_2_LEMMA:(Is_true (abst_equal (abst_constr (
abst_prj_a p1) (abst_prj_b p1)) (abst_constr (abst_prj_a p2) (
abst_prj_b p2)))).
Proof.
exact(
let zenon_L1_:((~(Is_true (abst_equal p2 (abst_constr (abst_prj_a p2) (
abst_prj_b p2)))))->False):=
(fun zenon_H4:(~(Is_true (abst_equal p2 (abst_constr (abst_prj_a p2) (
abst_prj_b p2)))))=>(zenon_all abst_T (fun a:abst_T=>(Is_true (
abst_equal a (abst_constr (abst_prj_a a) (abst_prj_b a))))) p2 (fun
zenon_H5=>(zenon_H4 zenon_H5)) abst_unicite_2))in
(NNPP _ (fun zenon_G=>(let zenon_H4:=(fun zenon_H5=>(zenon_all abst_T (
fun x:abst_T=>(forall y:abst_T,(forall z:abst_T,((Is_true (abst_equal x
y))->((Is_true (abst_equal y z))->(Is_true (abst_equal x z))))))) (
abst_constr (abst_prj_a p1) (abst_prj_b p1)) (fun zenon_Hb=>(zenon_all
abst_T (fun y:abst_T=>(forall z:abst_T,((Is_true (abst_equal (
abst_constr (abst_prj_a p1) (abst_prj_b p1)) y))->((Is_true (abst_equal
y z))->(Is_true (abst_equal (abst_constr (abst_prj_a p1) (abst_prj_b p1)
) z)))))) p2 (fun zenon_Ha=>(zenon_all abst_T (fun z:abst_T=>((Is_true (
abst_equal (abst_constr (abst_prj_a p1) (abst_prj_b p1)) p2))->((
Is_true (abst_equal p2 z))->(Is_true (abst_equal (abst_constr (
abst_prj_a p1) (abst_prj_b p1)) z))))) (abst_constr (abst_prj_a p2) (
abst_prj_b p2)) (fun zenon_H9=>(zenon_imply _ _ (fun zenon_H8=>(
zenon_H8 __G_1_1_LEMMA)) (fun zenon_H7=>(zenon_imply _ _ (fun zenon_H4=>
(zenon_H4 zenon_H5)) (fun zenon_H6=>(zenon_G zenon_H6)) zenon_H7))
zenon_H9)) zenon_Ha)) zenon_Hb)) abst_equal_transitive)) in (zenon_L1_
zenon_H4))))).
Qed.

0
04af26f64c66fb532c67899d385e50c4
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
922

%%begin-auto-proof
%%name: for_zenon___G_1_3_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For step <2>2. *)
        Parameter __G_1_2_LEMMA :
          (Is_true ((abst_equal (abst_constr (abst_prj_a p1) (abst_prj_b p1))
                      (abst_constr (abst_prj_a p2) (abst_prj_b p2))))).
        (* For method of Self used via "by property !equal_symmetric2". *)
        Parameter abst_equal_symmetric2 :
          forall n1  n3 : _p_S1_T,
            forall n2  n4 : _p_S2_T,
              Is_true ((abst_equal (abst_constr n1 n2) (abst_constr n3 n4))) ->
                Is_true ((abst_equal (abst_constr n3 n4) (abst_constr n1 n2))).
        (* Theorem's body. *)
        Theorem for_zenon___G_1_3_LEMMA :
        Is_true ((abst_equal (abst_constr (abst_prj_a p2) (abst_prj_b p2))
                   (abst_constr (abst_prj_a p1) (abst_prj_b p1)))).
%%end-auto-proof
0
145800ff7e5a8d2294b6c4f7ef52f11a
proof
1435
Theorem for_zenon___G_1_3_LEMMA:(Is_true (abst_equal (abst_constr (
abst_prj_a p2) (abst_prj_b p2)) (abst_constr (abst_prj_a p1) (
abst_prj_b p1)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_S1_T (fun n1:_p_S1_T=>(forall n3
:_p_S1_T,(forall n2:_p_S2_T,(forall n4:_p_S2_T,((Is_true (abst_equal (
abst_constr n1 n2) (abst_constr n3 n4)))->(Is_true (abst_equal (
abst_constr n3 n4) (abst_constr n1 n2)))))))) (abst_prj_a p1) (fun
zenon_H8=>(zenon_all _p_S1_T (fun n3:_p_S1_T=>(forall n2:_p_S2_T,(
forall n4:_p_S2_T,((Is_true (abst_equal (abst_constr (abst_prj_a p1) n2)
 (abst_constr n3 n4)))->(Is_true (abst_equal (abst_constr n3 n4) (
abst_constr (abst_prj_a p1) n2))))))) (abst_prj_a p2) (fun zenon_H7=>(
zenon_all _p_S2_T (fun n2:_p_S2_T=>(forall n4:_p_S2_T,((Is_true (
abst_equal (abst_constr (abst_prj_a p1) n2) (abst_constr (abst_prj_a p2)
 n4)))->(Is_true (abst_equal (abst_constr (abst_prj_a p2) n4) (
abst_constr (abst_prj_a p1) n2)))))) (abst_prj_b p1) (fun zenon_H6=>(
zenon_all _p_S2_T (fun n4:_p_S2_T=>((Is_true (abst_equal (abst_constr (
abst_prj_a p1) (abst_prj_b p1)) (abst_constr (abst_prj_a p2) n4)))->(
Is_true (abst_equal (abst_constr (abst_prj_a p2) n4) (abst_constr (
abst_prj_a p1) (abst_prj_b p1)))))) (abst_prj_b p2) (fun zenon_H5=>(
zenon_imply _ _ (fun zenon_H4=>(zenon_H4 __G_1_2_LEMMA)) (fun zenon_H3=>
(zenon_G zenon_H3)) zenon_H5)) zenon_H6)) zenon_H7)) zenon_H8))
abst_equal_symmetric2)))).
Qed.

0
b90391f1ca395cf342df9c82ea18ed49
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1033

%%begin-auto-proof
%%name: for_zenon___G_1_4_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For step <2>3. *)
        Parameter __G_1_3_LEMMA :
          (Is_true ((abst_equal (abst_constr (abst_prj_a p2) (abst_prj_b p2))
                      (abst_constr (abst_prj_a p1) (abst_prj_b p1))))).
        (* For method of Self used via "by property !unicite_2". *)
        Parameter abst_unicite_2 :
          forall a : abst_T,
            Is_true ((abst_equal a
                       (abst_constr (abst_prj_a a) (abst_prj_b a)))).
        (* For method of Self used via "by property !equal_transitive". *)
        Parameter abst_equal_transitive :
          forall x  y  z : abst_T,
            Is_true ((abst_equal x y)) ->
              Is_true ((abst_equal y z)) -> Is_true ((abst_equal x z)).
        (* Theorem's body. *)
        Theorem for_zenon___G_1_4_LEMMA :
        Is_true ((abst_equal p2
                   (abst_constr (abst_prj_a p1) (abst_prj_b p1)))).
%%end-auto-proof
0
6f790b4e5db38f219d7ec674cd871944
proof
2332
Theorem for_zenon___G_1_4_LEMMA:(Is_true (abst_equal p2 (abst_constr (
abst_prj_a p1) (abst_prj_b p1)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(let zenon_H15:=(fun zenon_H17=>(zenon_and _ _ (
fun zenon_H13 zenon_Ha=>(zenon_all abst_T (fun a:abst_T=>(Is_true (
abst_equal a (abst_constr (abst_prj_a a) (abst_prj_b a))))) p2 (fun
zenon_H9=>(zenon_Ha zenon_H9)) abst_unicite_2)) zenon_H17)) in (let
zenon_H4:=(fun zenon_H16=>(zenon_subst _ (fun zenon_Vf=>(Is_true
zenon_Vf)) (abst_equal (abst_constr (abst_prj_a p2) (abst_prj_b p2)) (
abst_constr (abst_prj_a p1) (abst_prj_b p1))) (abst_equal p2 (
abst_constr (abst_prj_a p1) (abst_prj_b p1))) (fun zenon_H5=>(
zenon_subst _ (fun zenon_Vg=>(~((abst_equal zenon_Vg (abst_constr (
abst_prj_a p1) (abst_prj_b p1))) = (abst_equal p2 (abst_constr (
abst_prj_a p1) (abst_prj_b p1)))))) (abst_constr (abst_prj_a p2) (
abst_prj_b p2)) p2 (fun zenon_H10=>(zenon_notand _ _ (fun zenon_H14=>(
zenon_H14 (fun zenon_H12=>(let zenon_Hf:=(fun zenon_H11=>(zenon_subst _
(fun zenon_Vh=>(zenon_Vh = p2)) p2 (abst_constr (abst_prj_a p2) (
abst_prj_b p2)) (fun zenon_H13=>(zenon_H13 zenon_H12)) zenon_H10
zenon_H11)) in (zenon_noteq _ p2 zenon_Hf))))) (fun zenon_He=>(zenon_He
(fun zenon_H9=>(zenon_all abst_T (fun x:abst_T=>(forall y:abst_T,(
forall z:abst_T,((Is_true (abst_equal x y))->((Is_true (abst_equal y z))
->(Is_true (abst_equal x z))))))) p2 (fun zenon_Hd=>(zenon_all abst_T (
fun y:abst_T=>(forall z:abst_T,((Is_true (abst_equal p2 y))->((Is_true (
abst_equal y z))->(Is_true (abst_equal p2 z)))))) (abst_constr (
abst_prj_a p2) (abst_prj_b p2)) (fun zenon_Hc=>(zenon_all abst_T (fun z
:abst_T=>((Is_true (abst_equal p2 (abst_constr (abst_prj_a p2) (
abst_prj_b p2))))->((Is_true (abst_equal (abst_constr (abst_prj_a p2) (
abst_prj_b p2)) z))->(Is_true (abst_equal p2 z))))) (abst_constr (
abst_prj_a p1) (abst_prj_b p1)) (fun zenon_Hb=>(zenon_imply _ _ (fun
zenon_Ha=>(zenon_Ha zenon_H9)) (fun zenon_H8=>(zenon_imply _ _ (fun
zenon_H7=>(zenon_H7 __G_1_3_LEMMA)) (fun zenon_H6=>(zenon_G zenon_H6))
zenon_H8)) zenon_Hb)) zenon_Hc)) zenon_Hd)) abst_equal_transitive))))
zenon_H15)) (zenon_notnot _ (refl_equal (abst_equal p2 (abst_constr (
abst_prj_a p1) (abst_prj_b p1))))) zenon_H5)) zenon_G __G_1_3_LEMMA))
in (zenon_noteq _ (abst_constr (abst_prj_a p1) (abst_prj_b p1))
zenon_H4)))))).
Qed.

0
f300bdbd16a9c1d40fbc1997fdf83e0a
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
861

%%begin-auto-proof
%%name: for_zenon___G_1_LEMMA
      
      
      
      (* Methods to use for automated proof. *)
      (* For step <2>4. *)
      Parameter __G_1_4_LEMMA :
        (Is_true ((abst_equal p2
                    (abst_constr (abst_prj_a p1) (abst_prj_b p1))))).
      (* For method of Self used via "by property !unicite_1". *)
      Parameter abst_unicite_1 :
        forall a : abst_T,
          Is_true ((abst_equal (abst_constr (abst_prj_a a) (abst_prj_b a)) a)).
      (* For method of Self used via "by property !equal_transitive". *)
      Parameter abst_equal_transitive :
        forall x  y  z : abst_T,
          Is_true ((abst_equal x y)) ->
            Is_true ((abst_equal y z)) -> Is_true ((abst_equal x z)).
      (* Theorem's body. *)
      Theorem for_zenon___G_1_LEMMA :
      Is_true ((abst_equal p2 p1)).
%%end-auto-proof
0
50375685f4703d26005482ac03e1f693
proof
1140
Theorem for_zenon___G_1_LEMMA:(Is_true (abst_equal p2 p1)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(let zenon_H5:=(fun zenon_H4=>(zenon_all abst_T (
fun x:abst_T=>(forall y:abst_T,(forall z:abst_T,((Is_true (abst_equal x
y))->((Is_true (abst_equal y z))->(Is_true (abst_equal x z))))))) p2 (
fun zenon_Hb=>(zenon_all abst_T (fun y:abst_T=>(forall z:abst_T,((
Is_true (abst_equal p2 y))->((Is_true (abst_equal y z))->(Is_true (
abst_equal p2 z)))))) (abst_constr (abst_prj_a p1) (abst_prj_b p1)) (
fun zenon_Ha=>(zenon_all abst_T (fun z:abst_T=>((Is_true (abst_equal p2
(abst_constr (abst_prj_a p1) (abst_prj_b p1))))->((Is_true (abst_equal (
abst_constr (abst_prj_a p1) (abst_prj_b p1)) z))->(Is_true (abst_equal
p2 z))))) p1 (fun zenon_H9=>(zenon_imply _ _ (fun zenon_H8=>(zenon_H8
__G_1_4_LEMMA)) (fun zenon_H7=>(zenon_imply _ _ (fun zenon_H5=>(
zenon_H5 zenon_H4)) (fun zenon_H6=>(zenon_G zenon_H6)) zenon_H7))
zenon_H9)) zenon_Ha)) zenon_Hb)) abst_equal_transitive)) in (zenon_all
abst_T (fun a:abst_T=>(Is_true (abst_equal (abst_constr (abst_prj_a a) (
abst_prj_b a)) a))) p1 (fun zenon_H4=>(zenon_H5 zenon_H4))
abst_unicite_1))))).
Qed.

0
1a22337b28848e0673bbe2e84c45edf7
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
452

%%begin-auto-proof
%%name: for_zenon_equal_symmetric
    
    
    
    (* Methods to use for automated proof. *)
    (* For step <1>1. *)
    Parameter __G_1_LEMMA : forall p1 : abst_T, forall p2 : abst_T,
      (Is_true ((abst_equal p1 p2))) -> (Is_true ((abst_equal p2 p1))).
    (* Theorem's body. *)
    Theorem for_zenon_equal_symmetric :
    forall x  y : abst_T,
      Is_true ((abst_equal x y)) -> Is_true ((abst_equal y x)).
%%end-auto-proof
0
15229d81156e112a8fca9a64cbe54e4b
proof
202
Theorem for_zenon_equal_symmetric:(forall p1:abst_T,(forall p2:abst_T,((
Is_true (abst_equal p1 p2))->(Is_true (abst_equal p2 p1))))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_G __G_1_LEMMA)))).
Qed.

0
6c3d0f177119e3d07a3c3ea8d6a089bc
err
0
d41d8cd98f00b204e9800998ecf8427e
end
