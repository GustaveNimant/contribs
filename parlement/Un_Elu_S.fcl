open "basics";;
open "Un_Bureau_de_vote_S";;
open "Un_Citoyen_electeur_S";;
open "Un_Scrutin_S";;
open "Un_Territoire_S";;

--        Un_Grand_electeur_S
--                |
--                v
--             Un_Elu
--                |
--                v
--      Un_Citoyen_electeur_S  
--                |
--                v
--           Un_Francais

species Un_Elu_S (
  UScr is Un_Scrutin_S,
  UTer is Un_Territoire_S,
  UBvo is Un_Bureau_de_vote_S (UTer)
) = 

  inherit Un_Citoyen_electeur_S (UScr, UTer, UBvo); 

  signature est_eligible_par_le_scrutin : Self -> UScr -> bool;

  signature est_elu_par_le_scrutin : Self -> UScr -> bool;

  signature est_elu_par_un_electeur : Self -> Self -> bool;

  signature est_un_senateur : Self -> bool;

  signature est_un_depute : Self -> bool;

  signature est_un_conseiller_regional : Self -> bool;

  signature est_un_conseiller_departemental : Self -> bool;

  signature est_un_conseiller_municipal : Self -> bool;

  signature est_un_conseiller_municipal_delegue : Self -> bool;

  signature est_elu_sur_un_territoire : Self -> UTer -> bool;

  signature represente_la_nation : Self -> bool;

  logical let est_elu_au_suffrage_direct (elu : Self, scr : UScr) =
    UScr!est_un_scrutin_direct (scr);

  let est_un_grand_electeur (gel : Self) =
      est_un_depute (gel)
   || est_un_senateur (gel)
   || est_un_conseiller_regional (gel)
   || est_un_conseiller_departemental (gel)
   || est_un_conseiller_municipal_delegue (gel) ;


end;;