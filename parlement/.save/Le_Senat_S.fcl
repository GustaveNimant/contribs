open "basics";;
open "Basic_Sets";;
open "Les_Fonctions_de_conversion";;
open "Un_Bureau_de_vote_S";;
open "Un_Electeur_S";;
open "Un_Elu_S";;
open "Une_Proposition_de_loi_S";;
open "Un_Scrutin_S";;
open "Un_Parlementaire_S";;
open "Un_Senateur_S";;
open "Un_Territoire_francais_S";;
open "Une_Loi_S";;

--  Un_Depute           Un_Senateur
--      \                  /
--       v                v
--        Un_Parlementaire   Le_President_de_la_republique Un_Elu_europeen Un_Elu_regional Un_Elu_cantonalUn_Elu_municipal  
--                |
--                v
--             Un_Elu
--                |
--                v
--           Un_Electeur
--                |
--                v
--           Un_Francais

species Le_Senat_S (
  UScr is Un_Scrutin_S, 
  UTfr is Un_Territoire_francais_S,
  UBvo is Un_Bureau_de_vote_S (UTfr),
  UPlo is Une_Proposition_de_loi_S,
  ULoi is Une_Loi_S,
  UEle is Un_Electeur_S (UScr, UTfr, UBvo),
  UEle_set is Finite_Set_S (UEle),
  UElu is Un_Elu_S (UScr, UTfr, UBvo, UEle),
  UElu_set is Finite_Set_S (UElu),
  UPar is Un_Parlementaire_S (UScr, UTfr, UBvo, UEle, ULoi), 
  UPar_set is Finite_Set_S (UPar),
  USen is Un_Senateur_S (UScr, UTfr, UBvo, UEle, ULoi),
  USen_set is Finite_Set_S (USen),
  UParOfUSen is Un_Parlementaire_subtype (UScr, UTfr, UBvo, UEle, ULoi, USen, USen_set, UPar, UPar_set),
  UEluOfUPar is Un_Elu_subtype (UScr, UTfr, UBvo, UEle, UPar, UPar_set, UElu, UElu_set),
  UEleOfUElu is Un_Electeur_subtype (UScr, UTfr, UBvo, UElu, UElu_set, UEle, UEle_set)
) =
    
  inherit Finite_Set_S (USen);

  signature examine_une_proposition_de_loi : Self -> UPlo -> bool;

  let ne_peut_pas_etre_dissous (s : Self) = false;

  let l_UEluOfUSen (sen : USen) : UElu = 
         UEluOfUPar!to_super (UParOfUSen!to_super (sen));

  let l_UEleOfUElu (elu : UElu) : UEle = 
         (UEleOfUElu!to_super (elu));

  property sont_elus_par_un_electeur_quelconque : all ele : UEle, all sen : USen, 
           UElu!est_elu_par_un_electeur (l_UEluOfUSen(sen), ele);

  property sont_elus_par_des_grands_electeurs : all elu : UElu, all sen : USen, 
           UElu!est_elu_par_un_electeur (l_UEluOfUSen (sen), l_UEleOfUElu (elu))
           -> UElu!est_un_grand_electeur (elu);


 (*

  property sont_elus_par_un_elu_non_senateur : all elu : UElu, all sen : USen, 
           UElu!est_elu_par_un_electeur (l_UEluOfUSen (sen), l_UEleOfUElu (elu))
           -> ~(UElu!est_un_senateur (elu));


  let l_UEluOfUSen (s : USen) : UElu = 
        UEluOfUPar!to_super (UParOfUSen!to_super (s));


  property est_elu_par_des_elus : all s : Self, all e : UEle,
        (l_UEluOfUSen(s)!est_elu_par_un_electeur (s, e)) -> ~(l_UEluOfUSen(s)!est_un_senateur (e));


  property est_elu_par_une_senatoriale : all sen : Self, all scr : UScr,
        est_elu_par_le_scrutin (sen, scr) ->
        UScr!est_une_election_senatoriale (scr);
*)
  

end;;