open "basics";;
open "Un_Electeur_S";;
open "Un_Elu_S";;
open "Un_Parlementaire_S";;
open "Un_Scrutin_S";;
open "Un_Territoire_francais_S";;
open "Une_Loi_S";;
open "Un_Bureau_de_vote_S";;

species Un_Depute_S (UScr is Un_Scrutin_S, 
                     UTfr is Un_Territoire_francais_S,
		     UBvo is Un_Bureau_de_vote_S (UTfr),
                     UEle is Un_Electeur_S (UScr, UTfr, UBvo),
                     ULoi is Une_Loi_S
                     ) = 

  inherit Un_Parlementaire_S (UScr, UTfr, UBvo, UEle, ULoi);

  let est_un_depute (s : Self) = true;

  let est_un_senateur (s : Self) = false;

  signature represente_un_electeur : Self -> UEle -> bool;

  signature redige_un_texte_de_loi : Self -> ULoi -> bool;

  signature vote_une_loi : Self -> ULoi -> bool;

  signature controle_l_action_du_gouvernement : Self -> ULoi -> bool;

  signature evalue_les_politiques_publiques : Self -> ULoi -> bool;

  signature delibere_sur_une_loi : Self -> ULoi -> bool;
  
  signature exerce_sa_souverainete : Self -> bool;

  property est_elu : all p : Self, all s : UScr,
        est_elu_par_le_scrutin (p, s) ->
        UScr!est_une_election_legislative (s);

  theorem un_depute_est_un_adulte : all d : Self,
    est_un_depute (d) -> est_un_adulte (d)
  proof = assumed;

end;;