46
This is a proof cache file generated by zvtov.
35
zvtov version 0.6.0 [32] 2009-12-03
2097
zenon -x focal -q -short -max-time 5m -x induct
zenon version 0.8.0 [a263] 2014-10-21
$Id: 8d3e74063353abcfefb6c4de625febcd0a10705c $
$Id: 0bb7ad8565ca1ee59ff5edffa7ed2b2d882c4f93 $
$Id: 8e2e984e1f30ddc3be6823ddc9ccf8f6877e7be1 $
$Id: e9a1445bc3b916bc344e12b5e1465a20b7569e8a $
$Id: 3543f411fd78f652dbf8224d7fe56e5a2c83df42 $
$Id: c483db8583b833b9d90ee5c1b90af4da4befefcf $
$Id: e962f33dc5753e15a88c3aef2170d1c552a80be7 $
$Id: 239c76ade6485f65b50499d4af616ed6394f9892 $
$Id: 960020f638c3d1f11c58184ba83acf7a567f497e $
$Id: 0d2f93a609978187340ccdc540d8b4709e3e3626 $
$Id: 0bba51e302cc27e4dcf7dd8783da6e6517e1ca2e $
$Id: 123bd672b267fe3d464ae13f9c8b98e7475c12b6 $
$Id: c891513dc0a7214f92f52e8c6f59be0c3a6bdc75 $
$Id: d674fd7fb29144c5978cd8f2421c4147c86781c8 $
$Id: 75e59fa998ba43be0fae0fc16452e5c75f01a317 $
$Id: lexcoq.mll,v 1.16 2012-04-11 18:27:26 doligez Exp $
$Id: parsecoq.mly,v 1.34 2012-04-11 18:27:26 doligez Exp $
$Id: lextptp.mll,v 1.7 2012-04-24 17:32:04 doligez Exp $
$Id: parsetptp.mly,v 1.9 2012-04-24 17:32:04 doligez Exp $
$Id: lexzen.mll,v 1.13 2012-04-11 18:27:26 doligez Exp $
$Id: parsezen.mly,v 1.16 2012-04-11 18:27:26 doligez Exp $
$Id: feacf069839a8c95e03ad2e3dbb03601a3a6607d $
$Id: 200c027cd2683053eb227e68a492c4961e2a5784 $
$Id: 9f00cd3d0af0bdd28d17b64ab051f9594255e67e $
$Id: 52308a30d82a014cf1f8efa2799df8b300a0c678 $
$Id: caed5ca44e929aef76195d58649e867d28c61885 $
$Id: 8bef787c38724f2923554c6d72f7b8d9c6f4ab2b $
$Id: 799ea945a49520c4ac8520bb6c232fbe8b53bed8 $
$Id: 8cdb504db763cd885675be46e2a542d5ec676e25 $
$Id: f21acd58472bbe06f2040f6b4df14b9bcece4be1 $
$Id: 71c3ed8bb8ff5d2866be86682d871a07f130b74f $
$Id: 4da3a63d30c663a2457badcc920df654f154b47b $
$Id: d0534a6a0c9a349b8289a70cb8f84297d3678ef6 $
$Id: f64f126ba41a6797d6643ecfd2290bdc3bcd7c08 $
$Id: 03e455e19c9d3e35e5edbd6eee048f53fb55908f $
$Id: af6004ec6e3900adb00b13aa1e67da873f9dd706 $
$Id: 81e748142c40d6382b9ceac00a08d35207607f19 $
$Id: cd90a6b20441b688fbac060141ef245237cb7320 $
$Id: 7449d985db563f705bdded478f605f03b7111602 $
$Id: 34c58a3afac083cc607b116f4d95546502fbd4b7 $
source checksum: 20927 1

term

begin
1809

%%begin-auto-proof
%%name: for_zenon___A_1_LEMMA
      
      
      
      (* Methods to use for automated proof. *)
      (* For hypothesis "H1". *)
      Parameter H1 : Is_true ((_p_E_equal (abst_prj_b x) _p_E_no_match)).
      (* For species parameter method used via "by property diag#E!equal_transitive". *)
      Parameter _p_E_equal_transitive :
        forall x  y  z : _p_E_T,
          Is_true ((_p_E_equal x y)) ->
            Is_true ((_p_E_equal y z)) -> Is_true ((_p_E_equal x z)).
      (* For species parameter method used via "by property diag#E!equal_symmetric". *)
      Parameter _p_E_equal_symmetric :
        forall x  y : _p_E_T,
          Is_true ((_p_E_equal x y)) -> Is_true ((_p_E_equal y x)).
      (* For species parameter method used via "by property diag#E!all_field_different_0_1". *)
      Parameter _p_E_all_field_different_0_1 :
        ~Is_true (((_p_E_equal _p_E_no_match _p_E_range_match))).
      (* For species parameter method used via "by property diag#E!all_field_different_0_2". *)
      Parameter _p_E_all_field_different_0_2 :
        ~Is_true (((_p_E_equal _p_E_no_match _p_E_partial_match))).
      (* For species parameter method used via "by property diag#E!all_field_different_0_3". *)
      Parameter _p_E_all_field_different_0_3 :
        ~Is_true (((_p_E_equal _p_E_no_match _p_E_perfect_match))).
      (* For method of Self used via "by definition of !valid". *)
      Definition abst_valid (x : abst_T) : basics.bool__t :=
        (basics._bar__bar_ (_p_E_equal (abst_prj_b x) _p_E_range_match)
          (basics._bar__bar_ (_p_E_equal (abst_prj_b x) _p_E_partial_match)
            (_p_E_equal (abst_prj_b x) _p_E_perfect_match))).
      (* Theorem's body. *)
      Theorem for_zenon___A_1_LEMMA :
      ~Is_true (((abst_valid x))).
%%end-auto-proof
0
985f09e2121cae02deb794a27ecec8bf
proof
4096
Theorem for_zenon___A_1_LEMMA:(~(Is_true (abst_valid x))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_G (fun zenon_H35=>(let zenon_H34
:=zenon_H35 in (let zenon_H33:=zenon_H34 in (zenon_focal_or (_p_E_equal
(abst_prj_b x) _p_E_range_match) (basics._bar__bar_ (_p_E_equal (
abst_prj_b x) _p_E_partial_match) (_p_E_equal (abst_prj_b x)
_p_E_perfect_match)) (fun zenon_H32=>(zenon_or _ _ (fun zenon_H2b=>(let
zenon_H19:=(fun zenon_H1e=>(zenon_and _ _ (fun zenon_H17 zenon_He=>(
zenon_all _p_E_T (fun x:_p_E_T=>(forall y:_p_E_T,((Is_true (_p_E_equal
x y))->(Is_true (_p_E_equal y x))))) (abst_prj_b x) (fun zenon_H1d=>(
zenon_all _p_E_T (fun y:_p_E_T=>((Is_true (_p_E_equal (abst_prj_b x) y))
->(Is_true (_p_E_equal y (abst_prj_b x))))) _p_E_no_match (fun
zenon_H1c=>(zenon_imply _ _ (fun zenon_H1b=>(zenon_H1b H1)) (fun
zenon_Hd=>(zenon_He zenon_Hd)) zenon_H1c)) zenon_H1d))
_p_E_equal_symmetric)) zenon_H1e)) in (let zenon_H2a:=(fun zenon_H31=>(
zenon_subst _ (fun zenon_Vl=>(Is_true zenon_Vl)) (_p_E_equal (
abst_prj_b x) _p_E_range_match) (_p_E_equal _p_E_no_match
_p_E_range_match) (fun zenon_H2c=>(zenon_subst _ (fun zenon_Vm=>(~((
_p_E_equal zenon_Vm _p_E_range_match) = (_p_E_equal _p_E_no_match
_p_E_range_match)))) (abst_prj_b x) _p_E_no_match (fun zenon_H14=>(
zenon_notand _ _ (fun zenon_H18=>(zenon_H18 (fun zenon_H16=>(let
zenon_H13:=(fun zenon_H15=>(zenon_subst _ (fun zenon_Vn=>(zenon_Vn =
_p_E_no_match)) _p_E_no_match (abst_prj_b x) (fun zenon_H17=>(zenon_H17
zenon_H16)) zenon_H14 zenon_H15)) in (zenon_noteq _ _p_E_no_match
zenon_H13))))) (fun zenon_H12=>(zenon_H12 (fun zenon_Hd=>(zenon_all
_p_E_T (fun x:_p_E_T=>(forall y:_p_E_T,(forall z:_p_E_T,((Is_true (
_p_E_equal x y))->((Is_true (_p_E_equal y z))->(Is_true (_p_E_equal x z)
)))))) _p_E_no_match (fun zenon_H11=>(zenon_all _p_E_T (fun y:_p_E_T=>(
forall z:_p_E_T,((Is_true (_p_E_equal _p_E_no_match y))->((Is_true (
_p_E_equal y z))->(Is_true (_p_E_equal _p_E_no_match z)))))) (
abst_prj_b x) (fun zenon_H10=>(zenon_all _p_E_T (fun z:_p_E_T=>((
Is_true (_p_E_equal _p_E_no_match (abst_prj_b x)))->((Is_true (
_p_E_equal (abst_prj_b x) z))->(Is_true (_p_E_equal _p_E_no_match z)))))
 _p_E_range_match (fun zenon_H30=>(zenon_imply _ _ (fun zenon_He=>(
zenon_He zenon_Hd)) (fun zenon_H2f=>(zenon_imply _ _ (fun zenon_H2e=>(
zenon_H2e zenon_H2b)) (fun zenon_H2d=>(_p_E_all_field_different_0_1
zenon_H2d)) zenon_H2f)) zenon_H30)) zenon_H10)) zenon_H11))
_p_E_equal_transitive)))) zenon_H19)) (zenon_notnot _ (refl_equal (
_p_E_equal _p_E_no_match _p_E_range_match))) zenon_H2c))
_p_E_all_field_different_0_1 zenon_H2b)) in (zenon_noteq _
_p_E_range_match zenon_H2a)))) (fun zenon_H29=>(let zenon_H28
:=zenon_H29 in (zenon_focal_or (_p_E_equal (abst_prj_b x)
_p_E_partial_match) (_p_E_equal (abst_prj_b x) _p_E_perfect_match) (fun
zenon_H27=>(zenon_or _ _ (fun zenon_H20=>(let zenon_H19:=(fun
zenon_H1e=>(zenon_and _ _ (fun zenon_H17 zenon_He=>(zenon_all _p_E_T (
fun x:_p_E_T=>(forall y:_p_E_T,((Is_true (_p_E_equal x y))->(Is_true (
_p_E_equal y x))))) (abst_prj_b x) (fun zenon_H1d=>(zenon_all _p_E_T (
fun y:_p_E_T=>((Is_true (_p_E_equal (abst_prj_b x) y))->(Is_true (
_p_E_equal y (abst_prj_b x))))) _p_E_no_match (fun zenon_H1c=>(
zenon_imply _ _ (fun zenon_H1b=>(zenon_H1b H1)) (fun zenon_Hd=>(
zenon_He zenon_Hd)) zenon_H1c)) zenon_H1d)) _p_E_equal_symmetric))
zenon_H1e)) in (let zenon_H1f:=(fun zenon_H26=>(zenon_subst _ (fun
zenon_Vi=>(Is_true zenon_Vi)) (_p_E_equal (abst_prj_b x)
_p_E_partial_match) (_p_E_equal _p_E_no_match _p_E_partial_match) (fun
zenon_H21=>(zenon_subst _ (fun zenon_Vj=>(~((_p_E_equal zenon_Vj
_p_E_partial_match) = (_p_E_equal _p_E_no_match _p_E_partial_match)))) (
abst_prj_b x) _p_E_no_match (fun zenon_H14=>(zenon_notand _ _ (fun
zenon_H18=>(zenon_H18 (fun zenon_H16=>(let zenon_H13:=(fun zenon_H15=>(
zenon_subst _ (fun zenon_Vk=>(zenon_Vk = _p_E_no_match)) _p_E_no_match (
abst_prj_b x) (fun zenon_H17=>(zenon_H17 zenon_H16)) zenon_H14
zenon_H15)) in (zenon_noteq _ _p_E_no_match zenon_H13))))) (fun
zenon_H12=>(zenon_H12 (fun zenon_Hd=>(zenon_all _p_E_T (fun x:_p_E_T=>(
forall y:_p_E_T
3312
,(forall z:_p_E_T,((Is_true (_p_E_equal x y))->((Is_true
(_p_E_equal y z))->(Is_true (_p_E_equal x z))))))) _p_E_no_match (fun
zenon_H11=>(zenon_all _p_E_T (fun y:_p_E_T=>(forall z:_p_E_T,((Is_true (
_p_E_equal _p_E_no_match y))->((Is_true (_p_E_equal y z))->(Is_true (
_p_E_equal _p_E_no_match z)))))) (abst_prj_b x) (fun zenon_H10=>(
zenon_all _p_E_T (fun z:_p_E_T=>((Is_true (_p_E_equal _p_E_no_match (
abst_prj_b x)))->((Is_true (_p_E_equal (abst_prj_b x) z))->(Is_true (
_p_E_equal _p_E_no_match z))))) _p_E_partial_match (fun zenon_H25=>(
zenon_imply _ _ (fun zenon_He=>(zenon_He zenon_Hd)) (fun zenon_H24=>(
zenon_imply _ _ (fun zenon_H23=>(zenon_H23 zenon_H20)) (fun zenon_H22=>(
_p_E_all_field_different_0_2 zenon_H22)) zenon_H24)) zenon_H25))
zenon_H10)) zenon_H11)) _p_E_equal_transitive)))) zenon_H19)) (
zenon_notnot _ (refl_equal (_p_E_equal _p_E_no_match _p_E_partial_match)
)) zenon_H21)) _p_E_all_field_different_0_2 zenon_H20)) in (zenon_noteq
_ _p_E_partial_match zenon_H1f)))) (fun zenon_H8=>(let zenon_H19:=(fun
zenon_H1e=>(zenon_and _ _ (fun zenon_H17 zenon_He=>(zenon_all _p_E_T (
fun x:_p_E_T=>(forall y:_p_E_T,((Is_true (_p_E_equal x y))->(Is_true (
_p_E_equal y x))))) (abst_prj_b x) (fun zenon_H1d=>(zenon_all _p_E_T (
fun y:_p_E_T=>((Is_true (_p_E_equal (abst_prj_b x) y))->(Is_true (
_p_E_equal y (abst_prj_b x))))) _p_E_no_match (fun zenon_H1c=>(
zenon_imply _ _ (fun zenon_H1b=>(zenon_H1b H1)) (fun zenon_Hd=>(
zenon_He zenon_Hd)) zenon_H1c)) zenon_H1d)) _p_E_equal_symmetric))
zenon_H1e)) in (let zenon_H7:=(fun zenon_H1a=>(zenon_subst _ (fun
zenon_Vf=>(Is_true zenon_Vf)) (_p_E_equal (abst_prj_b x)
_p_E_perfect_match) (_p_E_equal _p_E_no_match _p_E_perfect_match) (fun
zenon_H9=>(zenon_subst _ (fun zenon_Vg=>(~((_p_E_equal zenon_Vg
_p_E_perfect_match) = (_p_E_equal _p_E_no_match _p_E_perfect_match)))) (
abst_prj_b x) _p_E_no_match (fun zenon_H14=>(zenon_notand _ _ (fun
zenon_H18=>(zenon_H18 (fun zenon_H16=>(let zenon_H13:=(fun zenon_H15=>(
zenon_subst _ (fun zenon_Vh=>(zenon_Vh = _p_E_no_match)) _p_E_no_match (
abst_prj_b x) (fun zenon_H17=>(zenon_H17 zenon_H16)) zenon_H14
zenon_H15)) in (zenon_noteq _ _p_E_no_match zenon_H13))))) (fun
zenon_H12=>(zenon_H12 (fun zenon_Hd=>(zenon_all _p_E_T (fun x:_p_E_T=>(
forall y:_p_E_T,(forall z:_p_E_T,((Is_true (_p_E_equal x y))->((Is_true
(_p_E_equal y z))->(Is_true (_p_E_equal x z))))))) _p_E_no_match (fun
zenon_H11=>(zenon_all _p_E_T (fun y:_p_E_T=>(forall z:_p_E_T,((Is_true (
_p_E_equal _p_E_no_match y))->((Is_true (_p_E_equal y z))->(Is_true (
_p_E_equal _p_E_no_match z)))))) (abst_prj_b x) (fun zenon_H10=>(
zenon_all _p_E_T (fun z:_p_E_T=>((Is_true (_p_E_equal _p_E_no_match (
abst_prj_b x)))->((Is_true (_p_E_equal (abst_prj_b x) z))->(Is_true (
_p_E_equal _p_E_no_match z))))) _p_E_perfect_match (fun zenon_Hf=>(
zenon_imply _ _ (fun zenon_He=>(zenon_He zenon_Hd)) (fun zenon_Hc=>(
zenon_imply _ _ (fun zenon_Hb=>(zenon_Hb zenon_H8)) (fun zenon_Ha=>(
_p_E_all_field_different_0_3 zenon_Ha)) zenon_Hc)) zenon_Hf)) zenon_H10)
) zenon_H11)) _p_E_equal_transitive)))) zenon_H19)) (zenon_notnot _ (
refl_equal (_p_E_equal _p_E_no_match _p_E_perfect_match))) zenon_H9))
_p_E_all_field_different_0_3 zenon_H8)) in (zenon_noteq _
_p_E_perfect_match zenon_H7)))) zenon_H27)) zenon_H28))) zenon_H32))
zenon_H33)))))))).
Qed.

0
887af386d5ba2b482a8834cdfd8fd057
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
741

%%begin-auto-proof
%%name: for_zenon_no_match_is_invalid
    
    
    
    (* Methods to use for automated proof. *)
    (* For step <1>1. *)
    Parameter __A_1_LEMMA : forall x : abst_T,
      (Is_true ((_p_E_equal (abst_prj_b x) _p_E_no_match))) -> (~Is_true (
                                                                   ((abst_valid
                                                                    x)))).
    (* For method of Self used via "by property !valid". *)
    Parameter abst_valid : abst_T -> basics.bool__t.
    (* Theorem's body. *)
    Theorem for_zenon_no_match_is_invalid :
    forall x : abst_T,
      Is_true ((_p_E_equal (abst_prj_b x) _p_E_no_match)) ->
        ~Is_true (((abst_valid x))).
%%end-auto-proof
0
85828a3dc1aa2a2bbdc535dc2972fbd8
proof
209
Theorem for_zenon_no_match_is_invalid:(forall x:abst_T,((Is_true (
_p_E_equal (abst_prj_b x) _p_E_no_match))->(~(Is_true (abst_valid x)))))
.
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_G __A_1_LEMMA)))).
Qed.

0
e7071bc7ea1c7c9193f79d06f5345cbe
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
662

%%begin-auto-proof
%%name: for_zenon_partial_match_is_valid
    
    
    
    (* Methods to use for automated proof. *)
    (* For method of Self used via "by definition of !valid". *)
    Definition abst_valid (x : abst_T) : basics.bool__t :=
      (basics._bar__bar_ (_p_E_equal (abst_prj_b x) _p_E_range_match)
        (basics._bar__bar_ (_p_E_equal (abst_prj_b x) _p_E_partial_match)
          (_p_E_equal (abst_prj_b x) _p_E_perfect_match))).
    (* Theorem's body. *)
    Theorem for_zenon_partial_match_is_valid :
    forall x : abst_T,
      Is_true ((_p_E_equal (abst_prj_b x) _p_E_partial_match)) ->
        Is_true ((abst_valid x)).
%%end-auto-proof
0
9441da6e971837483d6179af50ecbc31
proof
1158
Theorem for_zenon_partial_match_is_valid:(forall x:abst_T,((Is_true (
_p_E_equal (abst_prj_b x) _p_E_partial_match))->(Is_true (abst_valid x))
)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notallex (fun x:abst_T=>((Is_true (
_p_E_equal (abst_prj_b x) _p_E_partial_match))->(Is_true (abst_valid x))
)) (fun zenon_He=>(zenon_ex abst_T (fun x:abst_T=>(~((Is_true (
_p_E_equal (abst_prj_b x) _p_E_partial_match))->(Is_true (abst_valid x))
))) (fun(zenon_Tx_b:abst_T) zenon_Hd=>(zenon_notimply _ _ (fun zenon_H2
zenon_Hc=>(let zenon_Hb:=zenon_Hc in (let zenon_Ha:=zenon_Hb in (
zenon_focal_notor (_p_E_equal (abst_prj_b zenon_Tx_b) _p_E_range_match)
(basics._bar__bar_ (_p_E_equal (abst_prj_b zenon_Tx_b)
_p_E_partial_match) (_p_E_equal (abst_prj_b zenon_Tx_b)
_p_E_perfect_match)) (fun zenon_H9=>(zenon_notor _ _ (fun zenon_H8
zenon_H7=>(let zenon_H6:=zenon_H7 in (zenon_focal_notor (_p_E_equal (
abst_prj_b zenon_Tx_b) _p_E_partial_match) (_p_E_equal (abst_prj_b
zenon_Tx_b) _p_E_perfect_match) (fun zenon_H5=>(zenon_notor _ _ (fun
zenon_H3 zenon_H4=>(zenon_H3 zenon_H2)) zenon_H5)) zenon_H6))) zenon_H9)
) zenon_Ha)))) zenon_Hd)) zenon_He)) zenon_G)))).
Qed.

0
4a3caa9a7836cba381486f78034ef09a
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
662

%%begin-auto-proof
%%name: for_zenon_perfect_match_is_valid
    
    
    
    (* Methods to use for automated proof. *)
    (* For method of Self used via "by definition of !valid". *)
    Definition abst_valid (x : abst_T) : basics.bool__t :=
      (basics._bar__bar_ (_p_E_equal (abst_prj_b x) _p_E_range_match)
        (basics._bar__bar_ (_p_E_equal (abst_prj_b x) _p_E_partial_match)
          (_p_E_equal (abst_prj_b x) _p_E_perfect_match))).
    (* Theorem's body. *)
    Theorem for_zenon_perfect_match_is_valid :
    forall x : abst_T,
      Is_true ((_p_E_equal (abst_prj_b x) _p_E_perfect_match)) ->
        Is_true ((abst_valid x)).
%%end-auto-proof
0
0379d8b08abb69e69a098fef9dda79aa
proof
1158
Theorem for_zenon_perfect_match_is_valid:(forall x:abst_T,((Is_true (
_p_E_equal (abst_prj_b x) _p_E_perfect_match))->(Is_true (abst_valid x))
)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notallex (fun x:abst_T=>((Is_true (
_p_E_equal (abst_prj_b x) _p_E_perfect_match))->(Is_true (abst_valid x))
)) (fun zenon_He=>(zenon_ex abst_T (fun x:abst_T=>(~((Is_true (
_p_E_equal (abst_prj_b x) _p_E_perfect_match))->(Is_true (abst_valid x))
))) (fun(zenon_Tx_b:abst_T) zenon_Hd=>(zenon_notimply _ _ (fun zenon_H2
zenon_Hc=>(let zenon_Hb:=zenon_Hc in (let zenon_Ha:=zenon_Hb in (
zenon_focal_notor (_p_E_equal (abst_prj_b zenon_Tx_b) _p_E_range_match)
(basics._bar__bar_ (_p_E_equal (abst_prj_b zenon_Tx_b)
_p_E_partial_match) (_p_E_equal (abst_prj_b zenon_Tx_b)
_p_E_perfect_match)) (fun zenon_H9=>(zenon_notor _ _ (fun zenon_H8
zenon_H7=>(let zenon_H6:=zenon_H7 in (zenon_focal_notor (_p_E_equal (
abst_prj_b zenon_Tx_b) _p_E_partial_match) (_p_E_equal (abst_prj_b
zenon_Tx_b) _p_E_perfect_match) (fun zenon_H5=>(zenon_notor _ _ (fun
zenon_H4 zenon_H3=>(zenon_H3 zenon_H2)) zenon_H5)) zenon_H6))) zenon_H9)
) zenon_Ha)))) zenon_Hd)) zenon_He)) zenon_G)))).
Qed.

0
b5069fc115527eda16a7153f4ca41f14
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
656

%%begin-auto-proof
%%name: for_zenon_range_match_is_valid
    
    
    
    (* Methods to use for automated proof. *)
    (* For method of Self used via "by definition of !valid". *)
    Definition abst_valid (x : abst_T) : basics.bool__t :=
      (basics._bar__bar_ (_p_E_equal (abst_prj_b x) _p_E_range_match)
        (basics._bar__bar_ (_p_E_equal (abst_prj_b x) _p_E_partial_match)
          (_p_E_equal (abst_prj_b x) _p_E_perfect_match))).
    (* Theorem's body. *)
    Theorem for_zenon_range_match_is_valid :
    forall x : abst_T,
      Is_true ((_p_E_equal (abst_prj_b x) _p_E_range_match)) ->
        Is_true ((abst_valid x)).
%%end-auto-proof
0
1f1ff4344a8337fd6bc233955f0b3b99
proof
910
Theorem for_zenon_range_match_is_valid:(forall x:abst_T,((Is_true (
_p_E_equal (abst_prj_b x) _p_E_range_match))->(Is_true (abst_valid x))))
.
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notallex (fun x:abst_T=>((Is_true (
_p_E_equal (abst_prj_b x) _p_E_range_match))->(Is_true (abst_valid x))))
 (fun zenon_Ha=>(zenon_ex abst_T (fun x:abst_T=>(~((Is_true (_p_E_equal
(abst_prj_b x) _p_E_range_match))->(Is_true (abst_valid x))))) (fun(
zenon_Tx_b:abst_T) zenon_H9=>(zenon_notimply _ _ (fun zenon_H2
zenon_H8=>(let zenon_H7:=zenon_H8 in (let zenon_H6:=zenon_H7 in (
zenon_focal_notor (_p_E_equal (abst_prj_b zenon_Tx_b) _p_E_range_match)
(basics._bar__bar_ (_p_E_equal (abst_prj_b zenon_Tx_b)
_p_E_partial_match) (_p_E_equal (abst_prj_b zenon_Tx_b)
_p_E_perfect_match)) (fun zenon_H5=>(zenon_notor _ _ (fun zenon_H3
zenon_H4=>(zenon_H3 zenon_H2)) zenon_H5)) zenon_H6)))) zenon_H9))
zenon_Ha)) zenon_G)))).
Qed.

0
cd30d4495af957ae6aebd28bdebd982b
err
0
d41d8cd98f00b204e9800998ecf8427e
end
