46
This is a proof cache file generated by zvtov.
35
zvtov version 0.6.0 [32] 2009-12-03
2097
zenon -x focal -q -short -max-time 5m -x induct
zenon version 0.8.0 [a263] 2014-10-21
$Id: 8d3e74063353abcfefb6c4de625febcd0a10705c $
$Id: 0bb7ad8565ca1ee59ff5edffa7ed2b2d882c4f93 $
$Id: 8e2e984e1f30ddc3be6823ddc9ccf8f6877e7be1 $
$Id: e9a1445bc3b916bc344e12b5e1465a20b7569e8a $
$Id: 3543f411fd78f652dbf8224d7fe56e5a2c83df42 $
$Id: c483db8583b833b9d90ee5c1b90af4da4befefcf $
$Id: e962f33dc5753e15a88c3aef2170d1c552a80be7 $
$Id: 239c76ade6485f65b50499d4af616ed6394f9892 $
$Id: 960020f638c3d1f11c58184ba83acf7a567f497e $
$Id: 0d2f93a609978187340ccdc540d8b4709e3e3626 $
$Id: 0bba51e302cc27e4dcf7dd8783da6e6517e1ca2e $
$Id: 123bd672b267fe3d464ae13f9c8b98e7475c12b6 $
$Id: c891513dc0a7214f92f52e8c6f59be0c3a6bdc75 $
$Id: d674fd7fb29144c5978cd8f2421c4147c86781c8 $
$Id: 75e59fa998ba43be0fae0fc16452e5c75f01a317 $
$Id: lexcoq.mll,v 1.16 2012-04-11 18:27:26 doligez Exp $
$Id: parsecoq.mly,v 1.34 2012-04-11 18:27:26 doligez Exp $
$Id: lextptp.mll,v 1.7 2012-04-24 17:32:04 doligez Exp $
$Id: parsetptp.mly,v 1.9 2012-04-24 17:32:04 doligez Exp $
$Id: lexzen.mll,v 1.13 2012-04-11 18:27:26 doligez Exp $
$Id: parsezen.mly,v 1.16 2012-04-11 18:27:26 doligez Exp $
$Id: feacf069839a8c95e03ad2e3dbb03601a3a6607d $
$Id: 200c027cd2683053eb227e68a492c4961e2a5784 $
$Id: 9f00cd3d0af0bdd28d17b64ab051f9594255e67e $
$Id: 52308a30d82a014cf1f8efa2799df8b300a0c678 $
$Id: caed5ca44e929aef76195d58649e867d28c61885 $
$Id: 8bef787c38724f2923554c6d72f7b8d9c6f4ab2b $
$Id: 799ea945a49520c4ac8520bb6c232fbe8b53bed8 $
$Id: 8cdb504db763cd885675be46e2a542d5ec676e25 $
$Id: f21acd58472bbe06f2040f6b4df14b9bcece4be1 $
$Id: 71c3ed8bb8ff5d2866be86682d871a07f130b74f $
$Id: 4da3a63d30c663a2457badcc920df654f154b47b $
$Id: d0534a6a0c9a349b8289a70cb8f84297d3678ef6 $
$Id: f64f126ba41a6797d6643ecfd2290bdc3bcd7c08 $
$Id: 03e455e19c9d3e35e5edbd6eee048f53fb55908f $
$Id: af6004ec6e3900adb00b13aa1e67da873f9dd706 $
$Id: 81e748142c40d6382b9ceac00a08d35207607f19 $
$Id: cd90a6b20441b688fbac060141ef245237cb7320 $
$Id: 7449d985db563f705bdded478f605f03b7111602 $
$Id: 34c58a3afac083cc607b116f4d95546502fbd4b7 $
source checksum: 20927 1

term

begin
1065

%%begin-auto-proof
%%name: for_zenon_t1
    
    
    
    (* Methods to use for automated proof. *)
    (* For species parameter method used via "by property vote#E!all_value". *)
    Parameter _p_E_all_value :
      forall e : _p_E_T,
        (Is_true ((_p_E_equal e _p_E_no_match)) \/
           Is_true ((_p_E_equal e _p_E_range_match)) \/
             Is_true ((_p_E_equal e _p_E_partial_match)) \/
               Is_true ((_p_E_equal e _p_E_perfect_match))).
    (* Theorem's body. *)
    Theorem for_zenon_t1 :
    forall v1  v2  v3 : _p_V_T,
      Is_true ((_p_E_equal (abst_state (abst_diag (abst_voter v1 v2 v3)))
                 _p_E_no_match)) \/
        Is_true ((_p_E_equal (abst_state (abst_diag (abst_voter v1 v2 v3)))
                   _p_E_range_match)) \/
          Is_true ((_p_E_equal (abst_state (abst_diag (abst_voter v1 v2 v3)))
                     _p_E_partial_match)) \/
            Is_true ((_p_E_equal
                       (abst_state (abst_diag (abst_voter v1 v2 v3)))
                       _p_E_perfect_match)).
%%end-auto-proof
0
55f4610ad146b83f4c2cf8963ec05c31
proof
3758
Theorem for_zenon_t1:(forall v1:_p_V_T,(forall v2:_p_V_T,(forall v3
:_p_V_T,((Is_true (_p_E_equal (abst_state (abst_diag (abst_voter v1 v2
v3))) _p_E_no_match))\/((Is_true (_p_E_equal (abst_state (abst_diag (
abst_voter v1 v2 v3))) _p_E_range_match))\/((Is_true (_p_E_equal (
abst_state (abst_diag (abst_voter v1 v2 v3))) _p_E_partial_match))\/(
Is_true (_p_E_equal (abst_state (abst_diag (abst_voter v1 v2 v3)))
_p_E_perfect_match)))))))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notallex (fun v1:_p_V_T=>(forall v2:_p_V_T,
(forall v3:_p_V_T,((Is_true (_p_E_equal (abst_state (abst_diag (
abst_voter v1 v2 v3))) _p_E_no_match))\/((Is_true (_p_E_equal (
abst_state (abst_diag (abst_voter v1 v2 v3))) _p_E_range_match))\/((
Is_true (_p_E_equal (abst_state (abst_diag (abst_voter v1 v2 v3)))
_p_E_partial_match))\/(Is_true (_p_E_equal (abst_state (abst_diag (
abst_voter v1 v2 v3))) _p_E_perfect_match)))))))) (fun zenon_Hb=>(
zenon_ex _p_V_T (fun v1:_p_V_T=>(~(forall v2:_p_V_T,(forall v3:_p_V_T,((
Is_true (_p_E_equal (abst_state (abst_diag (abst_voter v1 v2 v3)))
_p_E_no_match))\/((Is_true (_p_E_equal (abst_state (abst_diag (
abst_voter v1 v2 v3))) _p_E_range_match))\/((Is_true (_p_E_equal (
abst_state (abst_diag (abst_voter v1 v2 v3))) _p_E_partial_match))\/(
Is_true (_p_E_equal (abst_state (abst_diag (abst_voter v1 v2 v3)))
_p_E_perfect_match))))))))) (fun(zenon_Tv1_c:_p_V_T) zenon_Ha=>(
zenon_notallex (fun v2:_p_V_T=>(forall v3:_p_V_T,((Is_true (_p_E_equal (
abst_state (abst_diag (abst_voter zenon_Tv1_c v2 v3))) _p_E_no_match))
\/((Is_true (_p_E_equal (abst_state (abst_diag (abst_voter zenon_Tv1_c
v2 v3))) _p_E_range_match))\/((Is_true (_p_E_equal (abst_state (
abst_diag (abst_voter zenon_Tv1_c v2 v3))) _p_E_partial_match))\/(
Is_true (_p_E_equal (abst_state (abst_diag (abst_voter zenon_Tv1_c v2
v3))) _p_E_perfect_match))))))) (fun zenon_H9=>(zenon_ex _p_V_T (fun v2
:_p_V_T=>(~(forall v3:_p_V_T,((Is_true (_p_E_equal (abst_state (
abst_diag (abst_voter zenon_Tv1_c v2 v3))) _p_E_no_match))\/((Is_true (
_p_E_equal (abst_state (abst_diag (abst_voter zenon_Tv1_c v2 v3)))
_p_E_range_match))\/((Is_true (_p_E_equal (abst_state (abst_diag (
abst_voter zenon_Tv1_c v2 v3))) _p_E_partial_match))\/(Is_true (
_p_E_equal (abst_state (abst_diag (abst_voter zenon_Tv1_c v2 v3)))
_p_E_perfect_match)))))))) (fun(zenon_Tv2_d:_p_V_T) zenon_H8=>(
zenon_notallex (fun v3:_p_V_T=>((Is_true (_p_E_equal (abst_state (
abst_diag (abst_voter zenon_Tv1_c zenon_Tv2_d v3))) _p_E_no_match))\/((
Is_true (_p_E_equal (abst_state (abst_diag (abst_voter zenon_Tv1_c
zenon_Tv2_d v3))) _p_E_range_match))\/((Is_true (_p_E_equal (abst_state
(abst_diag (abst_voter zenon_Tv1_c zenon_Tv2_d v3))) _p_E_partial_match)
)\/(Is_true (_p_E_equal (abst_state (abst_diag (abst_voter zenon_Tv1_c
zenon_Tv2_d v3))) _p_E_perfect_match)))))) (fun zenon_H7=>(zenon_ex
_p_V_T (fun v3:_p_V_T=>(~((Is_true (_p_E_equal (abst_state (abst_diag (
abst_voter zenon_Tv1_c zenon_Tv2_d v3))) _p_E_no_match))\/((Is_true (
_p_E_equal (abst_state (abst_diag (abst_voter zenon_Tv1_c zenon_Tv2_d
v3))) _p_E_range_match))\/((Is_true (_p_E_equal (abst_state (abst_diag (
abst_voter zenon_Tv1_c zenon_Tv2_d v3))) _p_E_partial_match))\/(Is_true
(_p_E_equal (abst_state (abst_diag (abst_voter zenon_Tv1_c zenon_Tv2_d
v3))) _p_E_perfect_match))))))) (fun(zenon_Tv3_g:_p_V_T) zenon_H5=>(
zenon_all _p_E_T (fun e:_p_E_T=>((Is_true (_p_E_equal e _p_E_no_match))
\/((Is_true (_p_E_equal e _p_E_range_match))\/((Is_true (_p_E_equal e
_p_E_partial_match))\/(Is_true (_p_E_equal e _p_E_perfect_match)))))) (
abst_state (abst_diag (abst_voter zenon_Tv1_c zenon_Tv2_d zenon_Tv3_g)))
 (fun zenon_H4=>(zenon_H5 zenon_H4)) _p_E_all_value)) zenon_H7))
zenon_H8)) zenon_H9)) zenon_Ha)) zenon_Hb)) zenon_G)))).
Qed.

0
c7ab8efdba2c5901667fa81daf84e23e
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
845

%%begin-auto-proof
%%name: for_zenon_t2
    
    
    
    (* Methods to use for automated proof. *)
    (* For species parameter method used via "by property vote#C!all_value". *)
    Parameter _p_C_all_value :
      forall e : _p_C_T,
        Is_true ((_p_C_equal e _p_C_capt_1)) \/
          Is_true ((_p_C_equal e _p_C_capt_2)) \/
            Is_true ((_p_C_equal e _p_C_capt_3)).
    (* Theorem's body. *)
    Theorem for_zenon_t2 :
    forall v1  v2  v3 : _p_V_T,
      Is_true ((_p_C_equal (abst_sensor (abst_diag (abst_voter v1 v2 v3)))
                 _p_C_capt_1)) \/
        Is_true ((_p_C_equal (abst_sensor (abst_diag (abst_voter v1 v2 v3)))
                   _p_C_capt_2)) \/
          Is_true ((_p_C_equal
                     (abst_sensor (abst_diag (abst_voter v1 v2 v3)))
                     _p_C_capt_3)).
%%end-auto-proof
0
b514edd307b871e47205f3219ab7777a
proof
2913
Theorem for_zenon_t2:(forall v1:_p_V_T,(forall v2:_p_V_T,(forall v3
:_p_V_T,((Is_true (_p_C_equal (abst_sensor (abst_diag (abst_voter v1 v2
v3))) _p_C_capt_1))\/((Is_true (_p_C_equal (abst_sensor (abst_diag (
abst_voter v1 v2 v3))) _p_C_capt_2))\/(Is_true (_p_C_equal (abst_sensor
(abst_diag (abst_voter v1 v2 v3))) _p_C_capt_3))))))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notallex (fun v1:_p_V_T=>(forall v2:_p_V_T,
(forall v3:_p_V_T,((Is_true (_p_C_equal (abst_sensor (abst_diag (
abst_voter v1 v2 v3))) _p_C_capt_1))\/((Is_true (_p_C_equal (
abst_sensor (abst_diag (abst_voter v1 v2 v3))) _p_C_capt_2))\/(Is_true (
_p_C_equal (abst_sensor (abst_diag (abst_voter v1 v2 v3))) _p_C_capt_3))
))))) (fun zenon_Hb=>(zenon_ex _p_V_T (fun v1:_p_V_T=>(~(forall v2
:_p_V_T,(forall v3:_p_V_T,((Is_true (_p_C_equal (abst_sensor (abst_diag
(abst_voter v1 v2 v3))) _p_C_capt_1))\/((Is_true (_p_C_equal (
abst_sensor (abst_diag (abst_voter v1 v2 v3))) _p_C_capt_2))\/(Is_true (
_p_C_equal (abst_sensor (abst_diag (abst_voter v1 v2 v3))) _p_C_capt_3))
)))))) (fun(zenon_Tv1_c:_p_V_T) zenon_Ha=>(zenon_notallex (fun v2
:_p_V_T=>(forall v3:_p_V_T,((Is_true (_p_C_equal (abst_sensor (
abst_diag (abst_voter zenon_Tv1_c v2 v3))) _p_C_capt_1))\/((Is_true (
_p_C_equal (abst_sensor (abst_diag (abst_voter zenon_Tv1_c v2 v3)))
_p_C_capt_2))\/(Is_true (_p_C_equal (abst_sensor (abst_diag (abst_voter
zenon_Tv1_c v2 v3))) _p_C_capt_3)))))) (fun zenon_H9=>(zenon_ex _p_V_T (
fun v2:_p_V_T=>(~(forall v3:_p_V_T,((Is_true (_p_C_equal (abst_sensor (
abst_diag (abst_voter zenon_Tv1_c v2 v3))) _p_C_capt_1))\/((Is_true (
_p_C_equal (abst_sensor (abst_diag (abst_voter zenon_Tv1_c v2 v3)))
_p_C_capt_2))\/(Is_true (_p_C_equal (abst_sensor (abst_diag (abst_voter
zenon_Tv1_c v2 v3))) _p_C_capt_3))))))) (fun(zenon_Tv2_d:_p_V_T)
zenon_H8=>(zenon_notallex (fun v3:_p_V_T=>((Is_true (_p_C_equal (
abst_sensor (abst_diag (abst_voter zenon_Tv1_c zenon_Tv2_d v3)))
_p_C_capt_1))\/((Is_true (_p_C_equal (abst_sensor (abst_diag (
abst_voter zenon_Tv1_c zenon_Tv2_d v3))) _p_C_capt_2))\/(Is_true (
_p_C_equal (abst_sensor (abst_diag (abst_voter zenon_Tv1_c zenon_Tv2_d
v3))) _p_C_capt_3))))) (fun zenon_H7=>(zenon_ex _p_V_T (fun v3:_p_V_T=>(
~((Is_true (_p_C_equal (abst_sensor (abst_diag (abst_voter zenon_Tv1_c
zenon_Tv2_d v3))) _p_C_capt_1))\/((Is_true (_p_C_equal (abst_sensor (
abst_diag (abst_voter zenon_Tv1_c zenon_Tv2_d v3))) _p_C_capt_2))\/(
Is_true (_p_C_equal (abst_sensor (abst_diag (abst_voter zenon_Tv1_c
zenon_Tv2_d v3))) _p_C_capt_3)))))) (fun(zenon_Tv3_g:_p_V_T) zenon_H5=>(
zenon_all _p_C_T (fun e:_p_C_T=>((Is_true (_p_C_equal e _p_C_capt_1))\/(
(Is_true (_p_C_equal e _p_C_capt_2))\/(Is_true (_p_C_equal e
_p_C_capt_3))))) (abst_sensor (abst_diag (abst_voter zenon_Tv1_c
zenon_Tv2_d zenon_Tv3_g))) (fun zenon_H4=>(zenon_H5 zenon_H4))
_p_C_all_value)) zenon_H7)) zenon_H8)) zenon_H9)) zenon_Ha)) zenon_Hb))
zenon_G)))).
Qed.

0
eb54311dd358ca52ea10d151d96428e0
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1446

%%begin-auto-proof
%%name: for_zenon___C_1_1_1_1_1_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H11". *)
              Parameter H11 : Is_true ((_p_V_consistency_rule va vc)).
              (* For hypothesis "H111". *)
              Parameter H111 : Is_true ((_p_V_consistency_rule vb vc)).
              (* For method of Self used via "by property !vote_perfect". *)
              Parameter abst_vote_perfect :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v2 v3)) /\
                       Is_true ((_p_V_consistency_rule v1 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1
                                     _p_E_perfect_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_1_1_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter va vb vc)) va))).
%%end-auto-proof
0
cbc39d1f8b00d2039d8820fee440dda5
proof
1639
Theorem for_zenon___C_1_1_1_1_1_LEMMA:(Is_true (basics._equal_ _ (
abst_value (abst_voter va vb vc)) va)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule v1 v2))/\((
Is_true (_p_V_consistency_rule v2 v3))/\(Is_true (_p_V_consistency_rule
v1 v3))))->((Is_true (basics._equal_ _ (abst_value (abst_voter v1 v2 v3)
) v1))/\(Is_true (basics._equal_ _ (abst_diag (abst_voter v1 v2 v3)) (
_p_P_constr _p_C_capt_1 _p_E_perfect_match)))))))) va (fun zenon_Hf=>(
zenon_all _p_V_T (fun v2:_p_V_T=>(forall v3:_p_V_T,(((Is_true (
_p_V_consistency_rule va v2))/\((Is_true (_p_V_consistency_rule v2 v3))
/\(Is_true (_p_V_consistency_rule va v3))))->((Is_true (basics._equal_
_ (abst_value (abst_voter va v2 v3)) va))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter va v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_perfect_match))))))) vb (fun zenon_He=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((Is_true (_p_V_consistency_rule va vb))/\((Is_true (
_p_V_consistency_rule vb v3))/\(Is_true (_p_V_consistency_rule va v3))))
->((Is_true (basics._equal_ _ (abst_value (abst_voter va vb v3)) va))/\(
Is_true (basics._equal_ _ (abst_diag (abst_voter va vb v3)) (
_p_P_constr _p_C_capt_1 _p_E_perfect_match)))))) vc (fun zenon_Hd=>(
zenon_imply _ _ (fun zenon_Hc=>(zenon_notand _ _ (fun zenon_Hb=>(
zenon_Hb H1)) (fun zenon_Ha=>(zenon_notand _ _ (fun zenon_H9=>(zenon_H9
H111)) (fun zenon_H8=>(zenon_H8 H11)) zenon_Ha)) zenon_Hc)) (fun
zenon_H7=>(zenon_and _ _ (fun zenon_H5 zenon_H6=>(zenon_G zenon_H5))
zenon_H7)) zenon_Hd)) zenon_He)) zenon_Hf)) abst_vote_perfect)))).
Qed.

0
b40616a75a2720ed69261ae273d436e1
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1763

%%begin-auto-proof
%%name: for_zenon___C_1_1_1_1_2_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H11". *)
              Parameter H11 : Is_true ((_p_V_consistency_rule va vc)).
              (* For hypothesis "H111". *)
              Parameter H111 : Is_true ((_p_V_consistency_rule vb vc)).
              (* For method of Self used via "by property !vote_perfect". *)
              Parameter abst_vote_perfect :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v2 v3)) /\
                       Is_true ((_p_V_consistency_rule v1 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1
                                     _p_E_perfect_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_1_2_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter vb va vc)) vb))).
%%end-auto-proof
0
60e2ad14967d9dc23ded36766e29c60d
proof
2074
Theorem for_zenon___C_1_1_1_1_2_LEMMA:(Is_true (basics._equal_ _ (
abst_value (abst_voter vb va vc)) vb)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule v1 v2))/\((
Is_true (_p_V_consistency_rule v2 v3))/\(Is_true (_p_V_consistency_rule
v1 v3))))->((Is_true (basics._equal_ _ (abst_value (abst_voter v1 v2 v3)
) v1))/\(Is_true (basics._equal_ _ (abst_diag (abst_voter v1 v2 v3)) (
_p_P_constr _p_C_capt_1 _p_E_perfect_match)))))))) vb (fun zenon_H14=>(
zenon_all _p_V_T (fun v2:_p_V_T=>(forall v3:_p_V_T,(((Is_true (
_p_V_consistency_rule vb v2))/\((Is_true (_p_V_consistency_rule v2 v3))
/\(Is_true (_p_V_consistency_rule vb v3))))->((Is_true (basics._equal_
_ (abst_value (abst_voter vb v2 v3)) vb))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter vb v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_perfect_match))))))) va (fun zenon_H13=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((Is_true (_p_V_consistency_rule vb va))/\((Is_true (
_p_V_consistency_rule va v3))/\(Is_true (_p_V_consistency_rule vb v3))))
->((Is_true (basics._equal_ _ (abst_value (abst_voter vb va v3)) vb))/\(
Is_true (basics._equal_ _ (abst_diag (abst_voter vb va v3)) (
_p_P_constr _p_C_capt_1 _p_E_perfect_match)))))) vc (fun zenon_H12=>(
zenon_imply _ _ (fun zenon_H11=>(zenon_notand _ _ (fun zenon_Hd=>(
zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2:_p_V_T,((Is_true (
_p_V_consistency_rule v1 v2))->(Is_true (_p_V_consistency_rule v2 v1))))
) va (fun zenon_H10=>(zenon_all _p_V_T (fun v2:_p_V_T=>((Is_true (
_p_V_consistency_rule va v2))->(Is_true (_p_V_consistency_rule v2 va))))
 vb (fun zenon_Hf=>(zenon_imply _ _ (fun zenon_He=>(zenon_He H1)) (fun
zenon_Hc=>(zenon_Hd zenon_Hc)) zenon_Hf)) zenon_H10))
abst_consistency_rule_is_symmetric)) (fun zenon_Hb=>(zenon_notand _ _ (
fun zenon_Ha=>(zenon_Ha H11)) (fun zenon_H9=>(zenon_H9 H111)) zenon_Hb))
 zenon_H11)) (fun zenon_H8=>(zenon_and _ _ (fun zenon_H6 zenon_H7=>(
zenon_G zenon_H6)) zenon_H8)) zenon_H12)) zenon_H13)) zenon_H14))
abst_vote_perfect)))).
Qed.

0
5f6a5a0eef961eb9e70e3d65854d9f8e
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1763

%%begin-auto-proof
%%name: for_zenon___C_1_1_1_1_3_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H11". *)
              Parameter H11 : Is_true ((_p_V_consistency_rule va vc)).
              (* For hypothesis "H111". *)
              Parameter H111 : Is_true ((_p_V_consistency_rule vb vc)).
              (* For method of Self used via "by property !vote_perfect". *)
              Parameter abst_vote_perfect :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v2 v3)) /\
                       Is_true ((_p_V_consistency_rule v1 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1
                                     _p_E_perfect_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_1_3_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter vc va vb)) vc))).
%%end-auto-proof
0
3e675ecd1986e12c14a9d4e03ffa34de
proof
2503
Theorem for_zenon___C_1_1_1_1_3_LEMMA:(Is_true (basics._equal_ _ (
abst_value (abst_voter vc va vb)) vc)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule v1 v2))/\((
Is_true (_p_V_consistency_rule v2 v3))/\(Is_true (_p_V_consistency_rule
v1 v3))))->((Is_true (basics._equal_ _ (abst_value (abst_voter v1 v2 v3)
) v1))/\(Is_true (basics._equal_ _ (abst_diag (abst_voter v1 v2 v3)) (
_p_P_constr _p_C_capt_1 _p_E_perfect_match)))))))) vc (fun zenon_H18=>(
zenon_all _p_V_T (fun v2:_p_V_T=>(forall v3:_p_V_T,(((Is_true (
_p_V_consistency_rule vc v2))/\((Is_true (_p_V_consistency_rule v2 v3))
/\(Is_true (_p_V_consistency_rule vc v3))))->((Is_true (basics._equal_
_ (abst_value (abst_voter vc v2 v3)) vc))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter vc v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_perfect_match))))))) va (fun zenon_H17=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((Is_true (_p_V_consistency_rule vc va))/\((Is_true (
_p_V_consistency_rule va v3))/\(Is_true (_p_V_consistency_rule vc v3))))
->((Is_true (basics._equal_ _ (abst_value (abst_voter vc va v3)) vc))/\(
Is_true (basics._equal_ _ (abst_diag (abst_voter vc va v3)) (
_p_P_constr _p_C_capt_1 _p_E_perfect_match)))))) vb (fun zenon_H16=>(
zenon_imply _ _ (fun zenon_H15=>(zenon_notand _ _ (fun zenon_H11=>(
zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2:_p_V_T,((Is_true (
_p_V_consistency_rule v1 v2))->(Is_true (_p_V_consistency_rule v2 v1))))
) va (fun zenon_H14=>(zenon_all _p_V_T (fun v2:_p_V_T=>((Is_true (
_p_V_consistency_rule va v2))->(Is_true (_p_V_consistency_rule v2 va))))
 vc (fun zenon_H13=>(zenon_imply _ _ (fun zenon_H12=>(zenon_H12 H11)) (
fun zenon_H10=>(zenon_H11 zenon_H10)) zenon_H13)) zenon_H14))
abst_consistency_rule_is_symmetric)) (fun zenon_Hf=>(zenon_notand _ _ (
fun zenon_He=>(zenon_He H1)) (fun zenon_Ha=>(zenon_all _p_V_T (fun v1
:_p_V_T=>(forall v2:_p_V_T,((Is_true (_p_V_consistency_rule v1 v2))->(
Is_true (_p_V_consistency_rule v2 v1))))) vb (fun zenon_Hd=>(zenon_all
_p_V_T (fun v2:_p_V_T=>((Is_true (_p_V_consistency_rule vb v2))->(
Is_true (_p_V_consistency_rule v2 vb)))) vc (fun zenon_Hc=>(zenon_imply
_ _ (fun zenon_Hb=>(zenon_Hb H111)) (fun zenon_H9=>(zenon_Ha zenon_H9))
zenon_Hc)) zenon_Hd)) abst_consistency_rule_is_symmetric)) zenon_Hf))
zenon_H15)) (fun zenon_H8=>(zenon_and _ _ (fun zenon_H6 zenon_H7=>(
zenon_G zenon_H6)) zenon_H8)) zenon_H16)) zenon_H17)) zenon_H18))
abst_vote_perfect)))).
Qed.

0
f82832ce0615ea1a4f662cd9a83492f6
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1487

%%begin-auto-proof
%%name: for_zenon___C_1_1_1_1_4_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H11". *)
              Parameter H11 : Is_true ((_p_V_consistency_rule va vc)).
              (* For hypothesis "H111". *)
              Parameter H111 : Is_true ((_p_V_consistency_rule vb vc)).
              (* For method of Self used via "by property !vote_perfect". *)
              Parameter abst_vote_perfect :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v2 v3)) /\
                       Is_true ((_p_V_consistency_rule v1 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1
                                     _p_E_perfect_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_1_4_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter va vb vc))
                          (_p_P_constr _p_C_capt_1 _p_E_perfect_match)))).
%%end-auto-proof
0
ff502cdaf6bdedae7a0589db70165913
proof
1680
Theorem for_zenon___C_1_1_1_1_4_LEMMA:(Is_true (basics._equal_ _ (
abst_diag (abst_voter va vb vc)) (_p_P_constr _p_C_capt_1
_p_E_perfect_match))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule v1 v2))/\((
Is_true (_p_V_consistency_rule v2 v3))/\(Is_true (_p_V_consistency_rule
v1 v3))))->((Is_true (basics._equal_ _ (abst_value (abst_voter v1 v2 v3)
) v1))/\(Is_true (basics._equal_ _ (abst_diag (abst_voter v1 v2 v3)) (
_p_P_constr _p_C_capt_1 _p_E_perfect_match)))))))) va (fun zenon_Hf=>(
zenon_all _p_V_T (fun v2:_p_V_T=>(forall v3:_p_V_T,(((Is_true (
_p_V_consistency_rule va v2))/\((Is_true (_p_V_consistency_rule v2 v3))
/\(Is_true (_p_V_consistency_rule va v3))))->((Is_true (basics._equal_
_ (abst_value (abst_voter va v2 v3)) va))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter va v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_perfect_match))))))) vb (fun zenon_He=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((Is_true (_p_V_consistency_rule va vb))/\((Is_true (
_p_V_consistency_rule vb v3))/\(Is_true (_p_V_consistency_rule va v3))))
->((Is_true (basics._equal_ _ (abst_value (abst_voter va vb v3)) va))/\(
Is_true (basics._equal_ _ (abst_diag (abst_voter va vb v3)) (
_p_P_constr _p_C_capt_1 _p_E_perfect_match)))))) vc (fun zenon_Hd=>(
zenon_imply _ _ (fun zenon_Hc=>(zenon_notand _ _ (fun zenon_Hb=>(
zenon_Hb H1)) (fun zenon_Ha=>(zenon_notand _ _ (fun zenon_H9=>(zenon_H9
H111)) (fun zenon_H8=>(zenon_H8 H11)) zenon_Ha)) zenon_Hc)) (fun
zenon_H7=>(zenon_and _ _ (fun zenon_H6 zenon_H5=>(zenon_G zenon_H5))
zenon_H7)) zenon_Hd)) zenon_He)) zenon_Hf)) abst_vote_perfect)))).
Qed.

0
b8afca46c49e1929aa4c04af8bf46d30
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1232

%%begin-auto-proof
%%name: for_zenon___C_1_1_1_1_5_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>4. *)
              Parameter __C_1_1_1_1_4_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter va vb vc))
                             (_p_P_constr _p_C_capt_1 _p_E_perfect_match))))).
              (* For species parameter method used via "by property vote#P!perfect_match_is_valid". *)
              Parameter _p_P_perfect_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_perfect_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_1_5_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))).
%%end-auto-proof
0
0b26ec99fda6613357455ba34903753f
proof
1971
Theorem for_zenon___C_1_1_1_1_5_LEMMA:(Is_true (_p_P_valid (abst_diag (
abst_voter va vb vc)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(coq_builtins.zenon_syntactic_equal
zenon_focal_eqdec _ (abst_diag (abst_voter va vb vc)) (_p_P_constr
_p_C_capt_1 _p_E_perfect_match) (fun zenon_H9=>(zenon_all _p_P_T (fun x
:_p_P_T=>((Is_true (_p_E_equal (_p_P_prj_b x) _p_E_perfect_match))->(
Is_true (_p_P_valid x)))) (abst_diag (abst_voter va vb vc)) (fun
zenon_Hc=>(zenon_imply _ _ (fun zenon_H5=>(zenon_all _p_C_T (fun n1
:_p_C_T=>(forall n2:_p_E_T,(Is_true (_p_E_equal (_p_P_prj_b (
_p_P_constr n1 n2)) n2)))) _p_C_capt_1 (fun zenon_Hb=>(zenon_all _p_E_T
(fun n2:_p_E_T=>(Is_true (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_1 n2)) n2))) _p_E_perfect_match (fun zenon_H6=>(zenon_subst _
(fun zenon_Vf=>(Is_true zenon_Vf)) (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_1 _p_E_perfect_match)) _p_E_perfect_match) (_p_E_equal (
_p_P_prj_b (abst_diag (abst_voter va vb vc))) _p_E_perfect_match) (fun
zenon_H7=>(zenon_subst _ (fun zenon_Vg=>(~((_p_E_equal zenon_Vg
_p_E_perfect_match) = (_p_E_equal (_p_P_prj_b (abst_diag (abst_voter va
vb vc))) _p_E_perfect_match)))) (_p_P_prj_b (_p_P_constr _p_C_capt_1
_p_E_perfect_match)) (_p_P_prj_b (abst_diag (abst_voter va vb vc))) (
fun zenon_H8=>(zenon_subst _ (fun zenon_Vh=>(~((_p_P_prj_b zenon_Vh) = (
_p_P_prj_b (abst_diag (abst_voter va vb vc)))))) (_p_P_constr
_p_C_capt_1 _p_E_perfect_match) (abst_diag (abst_voter va vb vc)) (fun
zenon_Ha=>(zenon_eqsym _ (abst_diag (abst_voter va vb vc)) (_p_P_constr
_p_C_capt_1 _p_E_perfect_match) zenon_H9 zenon_Ha)) (zenon_notnot _ (
refl_equal (_p_P_prj_b (abst_diag (abst_voter va vb vc))))) zenon_H8)) (
zenon_notnot _ (refl_equal (_p_E_equal (_p_P_prj_b (abst_diag (
abst_voter va vb vc))) _p_E_perfect_match))) zenon_H7)) zenon_H5
zenon_H6)) zenon_Hb)) _p_P_prj_b_is_snd_of_pair)) (fun zenon_H4=>(
zenon_G zenon_H4)) zenon_Hc)) _p_P_perfect_match_is_valid))
__C_1_1_1_1_4_LEMMA)))).
Qed.

0
842b46e9b4e60044628bc3f1717f34f6
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1804

%%begin-auto-proof
%%name: for_zenon___C_1_1_1_1_6_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H11". *)
              Parameter H11 : Is_true ((_p_V_consistency_rule va vc)).
              (* For hypothesis "H111". *)
              Parameter H111 : Is_true ((_p_V_consistency_rule vb vc)).
              (* For method of Self used via "by property !vote_perfect". *)
              Parameter abst_vote_perfect :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v2 v3)) /\
                       Is_true ((_p_V_consistency_rule v1 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1
                                     _p_E_perfect_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_1_6_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vb va vc))
                          (_p_P_constr _p_C_capt_1 _p_E_perfect_match)))).
%%end-auto-proof
0
ad96e5bb3c2dae069f9d44e58e8e768c
proof
2115
Theorem for_zenon___C_1_1_1_1_6_LEMMA:(Is_true (basics._equal_ _ (
abst_diag (abst_voter vb va vc)) (_p_P_constr _p_C_capt_1
_p_E_perfect_match))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule v1 v2))/\((
Is_true (_p_V_consistency_rule v2 v3))/\(Is_true (_p_V_consistency_rule
v1 v3))))->((Is_true (basics._equal_ _ (abst_value (abst_voter v1 v2 v3)
) v1))/\(Is_true (basics._equal_ _ (abst_diag (abst_voter v1 v2 v3)) (
_p_P_constr _p_C_capt_1 _p_E_perfect_match)))))))) vb (fun zenon_H14=>(
zenon_all _p_V_T (fun v2:_p_V_T=>(forall v3:_p_V_T,(((Is_true (
_p_V_consistency_rule vb v2))/\((Is_true (_p_V_consistency_rule v2 v3))
/\(Is_true (_p_V_consistency_rule vb v3))))->((Is_true (basics._equal_
_ (abst_value (abst_voter vb v2 v3)) vb))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter vb v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_perfect_match))))))) va (fun zenon_H13=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((Is_true (_p_V_consistency_rule vb va))/\((Is_true (
_p_V_consistency_rule va v3))/\(Is_true (_p_V_consistency_rule vb v3))))
->((Is_true (basics._equal_ _ (abst_value (abst_voter vb va v3)) vb))/\(
Is_true (basics._equal_ _ (abst_diag (abst_voter vb va v3)) (
_p_P_constr _p_C_capt_1 _p_E_perfect_match)))))) vc (fun zenon_H12=>(
zenon_imply _ _ (fun zenon_H11=>(zenon_notand _ _ (fun zenon_Hd=>(
zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2:_p_V_T,((Is_true (
_p_V_consistency_rule v1 v2))->(Is_true (_p_V_consistency_rule v2 v1))))
) va (fun zenon_H10=>(zenon_all _p_V_T (fun v2:_p_V_T=>((Is_true (
_p_V_consistency_rule va v2))->(Is_true (_p_V_consistency_rule v2 va))))
 vb (fun zenon_Hf=>(zenon_imply _ _ (fun zenon_He=>(zenon_He H1)) (fun
zenon_Hc=>(zenon_Hd zenon_Hc)) zenon_Hf)) zenon_H10))
abst_consistency_rule_is_symmetric)) (fun zenon_Hb=>(zenon_notand _ _ (
fun zenon_Ha=>(zenon_Ha H11)) (fun zenon_H9=>(zenon_H9 H111)) zenon_Hb))
 zenon_H11)) (fun zenon_H8=>(zenon_and _ _ (fun zenon_H7 zenon_H6=>(
zenon_G zenon_H6)) zenon_H8)) zenon_H12)) zenon_H13)) zenon_H14))
abst_vote_perfect)))).
Qed.

0
8dba20182ba8ead267e22c50b3ce3c08
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1232

%%begin-auto-proof
%%name: for_zenon___C_1_1_1_1_7_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>6. *)
              Parameter __C_1_1_1_1_6_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vb va vc))
                             (_p_P_constr _p_C_capt_1 _p_E_perfect_match))))).
              (* For species parameter method used via "by property vote#P!perfect_match_is_valid". *)
              Parameter _p_P_perfect_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_perfect_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_1_7_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc))))).
%%end-auto-proof
0
6dec64ca23fdedb3fdbfdea34118a966
proof
1971
Theorem for_zenon___C_1_1_1_1_7_LEMMA:(Is_true (_p_P_valid (abst_diag (
abst_voter vb va vc)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(coq_builtins.zenon_syntactic_equal
zenon_focal_eqdec _ (abst_diag (abst_voter vb va vc)) (_p_P_constr
_p_C_capt_1 _p_E_perfect_match) (fun zenon_H9=>(zenon_all _p_P_T (fun x
:_p_P_T=>((Is_true (_p_E_equal (_p_P_prj_b x) _p_E_perfect_match))->(
Is_true (_p_P_valid x)))) (abst_diag (abst_voter vb va vc)) (fun
zenon_Hc=>(zenon_imply _ _ (fun zenon_H5=>(zenon_all _p_C_T (fun n1
:_p_C_T=>(forall n2:_p_E_T,(Is_true (_p_E_equal (_p_P_prj_b (
_p_P_constr n1 n2)) n2)))) _p_C_capt_1 (fun zenon_Hb=>(zenon_all _p_E_T
(fun n2:_p_E_T=>(Is_true (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_1 n2)) n2))) _p_E_perfect_match (fun zenon_H6=>(zenon_subst _
(fun zenon_Vf=>(Is_true zenon_Vf)) (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_1 _p_E_perfect_match)) _p_E_perfect_match) (_p_E_equal (
_p_P_prj_b (abst_diag (abst_voter vb va vc))) _p_E_perfect_match) (fun
zenon_H7=>(zenon_subst _ (fun zenon_Vg=>(~((_p_E_equal zenon_Vg
_p_E_perfect_match) = (_p_E_equal (_p_P_prj_b (abst_diag (abst_voter vb
va vc))) _p_E_perfect_match)))) (_p_P_prj_b (_p_P_constr _p_C_capt_1
_p_E_perfect_match)) (_p_P_prj_b (abst_diag (abst_voter vb va vc))) (
fun zenon_H8=>(zenon_subst _ (fun zenon_Vh=>(~((_p_P_prj_b zenon_Vh) = (
_p_P_prj_b (abst_diag (abst_voter vb va vc)))))) (_p_P_constr
_p_C_capt_1 _p_E_perfect_match) (abst_diag (abst_voter vb va vc)) (fun
zenon_Ha=>(zenon_eqsym _ (abst_diag (abst_voter vb va vc)) (_p_P_constr
_p_C_capt_1 _p_E_perfect_match) zenon_H9 zenon_Ha)) (zenon_notnot _ (
refl_equal (_p_P_prj_b (abst_diag (abst_voter vb va vc))))) zenon_H8)) (
zenon_notnot _ (refl_equal (_p_E_equal (_p_P_prj_b (abst_diag (
abst_voter vb va vc))) _p_E_perfect_match))) zenon_H7)) zenon_H5
zenon_H6)) zenon_Hb)) _p_P_prj_b_is_snd_of_pair)) (fun zenon_H4=>(
zenon_G zenon_H4)) zenon_Hc)) _p_P_perfect_match_is_valid))
__C_1_1_1_1_6_LEMMA)))).
Qed.

0
2bc5086692934424c3de039b98b3ec2b
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1804

%%begin-auto-proof
%%name: for_zenon___C_1_1_1_1_8_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H11". *)
              Parameter H11 : Is_true ((_p_V_consistency_rule va vc)).
              (* For hypothesis "H111". *)
              Parameter H111 : Is_true ((_p_V_consistency_rule vb vc)).
              (* For method of Self used via "by property !vote_perfect". *)
              Parameter abst_vote_perfect :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v2 v3)) /\
                       Is_true ((_p_V_consistency_rule v1 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1
                                     _p_E_perfect_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_1_8_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vc va vb))
                          (_p_P_constr _p_C_capt_1 _p_E_perfect_match)))).
%%end-auto-proof
0
05d8d3990941424149fe0a9233265b1f
proof
2544
Theorem for_zenon___C_1_1_1_1_8_LEMMA:(Is_true (basics._equal_ _ (
abst_diag (abst_voter vc va vb)) (_p_P_constr _p_C_capt_1
_p_E_perfect_match))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule v1 v2))/\((
Is_true (_p_V_consistency_rule v2 v3))/\(Is_true (_p_V_consistency_rule
v1 v3))))->((Is_true (basics._equal_ _ (abst_value (abst_voter v1 v2 v3)
) v1))/\(Is_true (basics._equal_ _ (abst_diag (abst_voter v1 v2 v3)) (
_p_P_constr _p_C_capt_1 _p_E_perfect_match)))))))) vc (fun zenon_H18=>(
zenon_all _p_V_T (fun v2:_p_V_T=>(forall v3:_p_V_T,(((Is_true (
_p_V_consistency_rule vc v2))/\((Is_true (_p_V_consistency_rule v2 v3))
/\(Is_true (_p_V_consistency_rule vc v3))))->((Is_true (basics._equal_
_ (abst_value (abst_voter vc v2 v3)) vc))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter vc v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_perfect_match))))))) va (fun zenon_H17=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((Is_true (_p_V_consistency_rule vc va))/\((Is_true (
_p_V_consistency_rule va v3))/\(Is_true (_p_V_consistency_rule vc v3))))
->((Is_true (basics._equal_ _ (abst_value (abst_voter vc va v3)) vc))/\(
Is_true (basics._equal_ _ (abst_diag (abst_voter vc va v3)) (
_p_P_constr _p_C_capt_1 _p_E_perfect_match)))))) vb (fun zenon_H16=>(
zenon_imply _ _ (fun zenon_H15=>(zenon_notand _ _ (fun zenon_H11=>(
zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2:_p_V_T,((Is_true (
_p_V_consistency_rule v1 v2))->(Is_true (_p_V_consistency_rule v2 v1))))
) va (fun zenon_H14=>(zenon_all _p_V_T (fun v2:_p_V_T=>((Is_true (
_p_V_consistency_rule va v2))->(Is_true (_p_V_consistency_rule v2 va))))
 vc (fun zenon_H13=>(zenon_imply _ _ (fun zenon_H12=>(zenon_H12 H11)) (
fun zenon_H10=>(zenon_H11 zenon_H10)) zenon_H13)) zenon_H14))
abst_consistency_rule_is_symmetric)) (fun zenon_Hf=>(zenon_notand _ _ (
fun zenon_He=>(zenon_He H1)) (fun zenon_Ha=>(zenon_all _p_V_T (fun v1
:_p_V_T=>(forall v2:_p_V_T,((Is_true (_p_V_consistency_rule v1 v2))->(
Is_true (_p_V_consistency_rule v2 v1))))) vb (fun zenon_Hd=>(zenon_all
_p_V_T (fun v2:_p_V_T=>((Is_true (_p_V_consistency_rule vb v2))->(
Is_true (_p_V_consistency_rule v2 vb)))) vc (fun zenon_Hc=>(zenon_imply
_ _ (fun zenon_Hb=>(zenon_Hb H111)) (fun zenon_H9=>(zenon_Ha zenon_H9))
zenon_Hc)) zenon_Hd)) abst_consistency_rule_is_symmetric)) zenon_Hf))
zenon_H15)) (fun zenon_H8=>(zenon_and _ _ (fun zenon_H7 zenon_H6=>(
zenon_G zenon_H6)) zenon_H8)) zenon_H16)) zenon_H17)) zenon_H18))
abst_vote_perfect)))).
Qed.

0
cccfea3563fa10d34765b43038e5dfeb
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1232

%%begin-auto-proof
%%name: for_zenon___C_1_1_1_1_9_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>8. *)
              Parameter __C_1_1_1_1_8_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vc va vb))
                             (_p_P_constr _p_C_capt_1 _p_E_perfect_match))))).
              (* For species parameter method used via "by property vote#P!perfect_match_is_valid". *)
              Parameter _p_P_perfect_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_perfect_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_1_9_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb))))).
%%end-auto-proof
0
2951109aee2cb82c5742ce83826465cb
proof
1971
Theorem for_zenon___C_1_1_1_1_9_LEMMA:(Is_true (_p_P_valid (abst_diag (
abst_voter vc va vb)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(coq_builtins.zenon_syntactic_equal
zenon_focal_eqdec _ (abst_diag (abst_voter vc va vb)) (_p_P_constr
_p_C_capt_1 _p_E_perfect_match) (fun zenon_H9=>(zenon_all _p_P_T (fun x
:_p_P_T=>((Is_true (_p_E_equal (_p_P_prj_b x) _p_E_perfect_match))->(
Is_true (_p_P_valid x)))) (abst_diag (abst_voter vc va vb)) (fun
zenon_Hc=>(zenon_imply _ _ (fun zenon_H5=>(zenon_all _p_C_T (fun n1
:_p_C_T=>(forall n2:_p_E_T,(Is_true (_p_E_equal (_p_P_prj_b (
_p_P_constr n1 n2)) n2)))) _p_C_capt_1 (fun zenon_Hb=>(zenon_all _p_E_T
(fun n2:_p_E_T=>(Is_true (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_1 n2)) n2))) _p_E_perfect_match (fun zenon_H6=>(zenon_subst _
(fun zenon_Vf=>(Is_true zenon_Vf)) (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_1 _p_E_perfect_match)) _p_E_perfect_match) (_p_E_equal (
_p_P_prj_b (abst_diag (abst_voter vc va vb))) _p_E_perfect_match) (fun
zenon_H7=>(zenon_subst _ (fun zenon_Vg=>(~((_p_E_equal zenon_Vg
_p_E_perfect_match) = (_p_E_equal (_p_P_prj_b (abst_diag (abst_voter vc
va vb))) _p_E_perfect_match)))) (_p_P_prj_b (_p_P_constr _p_C_capt_1
_p_E_perfect_match)) (_p_P_prj_b (abst_diag (abst_voter vc va vb))) (
fun zenon_H8=>(zenon_subst _ (fun zenon_Vh=>(~((_p_P_prj_b zenon_Vh) = (
_p_P_prj_b (abst_diag (abst_voter vc va vb)))))) (_p_P_constr
_p_C_capt_1 _p_E_perfect_match) (abst_diag (abst_voter vc va vb)) (fun
zenon_Ha=>(zenon_eqsym _ (abst_diag (abst_voter vc va vb)) (_p_P_constr
_p_C_capt_1 _p_E_perfect_match) zenon_H9 zenon_Ha)) (zenon_notnot _ (
refl_equal (_p_P_prj_b (abst_diag (abst_voter vc va vb))))) zenon_H8)) (
zenon_notnot _ (refl_equal (_p_E_equal (_p_P_prj_b (abst_diag (
abst_voter vc va vb))) _p_E_perfect_match))) zenon_H7)) zenon_H5
zenon_H6)) zenon_Hb)) _p_P_prj_b_is_snd_of_pair)) (fun zenon_H4=>(
zenon_G zenon_H4)) zenon_Hc)) _p_P_perfect_match_is_valid))
__C_1_1_1_1_8_LEMMA)))).
Qed.

0
2e4e0fd3215cd00526f6f01a4caef0a8
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
2246

%%begin-auto-proof
%%name: for_zenon___C_1_1_1_1_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For step <5>1. *)
            Parameter __C_1_1_1_1_1_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter va vb vc)) va)))).
            (* For step <5>2. *)
            Parameter __C_1_1_1_1_2_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter vb va vc)) vb)))).
            (* For step <5>3. *)
            Parameter __C_1_1_1_1_3_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter vc va vb)) vc)))).
            (* For step <5>5. *)
            Parameter __C_1_1_1_1_5_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc)))))).
            (* For step <5>7. *)
            Parameter __C_1_1_1_1_7_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc)))))).
            (* For step <5>9. *)
            Parameter __C_1_1_1_1_9_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb)))))).
            (* For method of Self used via "by definition of !compatible". *)
            Definition abst_compatible (s1 : (Datatypes.prod _p_V_T _p_P_T))
              (s2 : (Datatypes.prod _p_V_T _p_P_T)) : coq_builtins.prop__t :=
              (Is_true ((_p_P_valid (abst_diag s1))) /\
                 Is_true ((_p_P_valid (abst_diag s2))) /\
                   Is_true ((_p_V_consistency_rule (abst_value s1)
                              (abst_value s2)))) \/
                (~Is_true (((_p_P_valid (abst_diag s1)))) /\
                   ~Is_true (((_p_P_valid (abst_diag s2))))).
            (* For hypothesis "H1". *)
            Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
            (* For hypothesis "H11". *)
            Parameter H11 : Is_true ((_p_V_consistency_rule va vc)).
            (* Theorem's body. *)
            Theorem for_zenon___C_1_1_1_1_LEMMA :
            ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
               (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
%%end-auto-proof
0
d0e98b75b4ee0db0ba5609bb3ff1bd2b
proof
3294
Theorem for_zenon___C_1_1_1_1_LEMMA:((abst_compatible (abst_voter va vb
vc) (abst_voter vb va vc))/\(abst_compatible (abst_voter va vb vc) (
abst_voter vc va vb))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notand _ _ (fun zenon_H1f=>(let zenon_H1e
:=zenon_H1f in (zenon_notor _ _ (fun zenon_H1c zenon_H1d=>(zenon_notand
_ _ (fun zenon_H11=>(zenon_H11 __C_1_1_1_1_5_LEMMA)) (fun zenon_H1b=>(
zenon_notand _ _ (fun zenon_H1a=>(zenon_H1a __C_1_1_1_1_7_LEMMA)) (fun
zenon_H16=>(coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ (
abst_value (abst_voter va vb vc)) va (fun zenon_Hd=>(
coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ (abst_value (
abst_voter vb va vc)) vb (fun zenon_H18=>(zenon_subst _ (fun zenon_Vi=>(
Is_true zenon_Vi)) (_p_V_consistency_rule va vb) (_p_V_consistency_rule
(abst_value (abst_voter va vb vc)) (abst_value (abst_voter vb va vc))) (
fun zenon_H17=>(zenon_subst _ (fun zenon_Vk=>(~((_p_V_consistency_rule
zenon_Vk vb) = (_p_V_consistency_rule (abst_value (abst_voter va vb vc))
 (abst_value (abst_voter vb va vc)))))) va (abst_value (abst_voter va
vb vc)) (fun zenon_He=>(zenon_eqsym _ (abst_value (abst_voter va vb vc))
 va zenon_Hd zenon_He)) (zenon_subst _ (fun zenon_Vj=>(~((
_p_V_consistency_rule (abst_value (abst_voter va vb vc)) zenon_Vj) = (
_p_V_consistency_rule (abst_value (abst_voter va vb vc)) (abst_value (
abst_voter vb va vc)))))) vb (abst_value (abst_voter vb va vc)) (fun
zenon_H19=>(zenon_eqsym _ (abst_value (abst_voter vb va vc)) vb
zenon_H18 zenon_H19)) (zenon_notnot _ (refl_equal (
_p_V_consistency_rule (abst_value (abst_voter va vb vc)) (abst_value (
abst_voter vb va vc)))))) zenon_H17)) zenon_H16 H1))
__C_1_1_1_1_2_LEMMA)) __C_1_1_1_1_1_LEMMA)) zenon_H1b)) zenon_H1c))
zenon_H1e))) (fun zenon_H15=>(let zenon_H14:=zenon_H15 in (zenon_notor
_ _ (fun zenon_H12 zenon_H13=>(zenon_notand _ _ (fun zenon_H11=>(
zenon_H11 __C_1_1_1_1_5_LEMMA)) (fun zenon_H10=>(zenon_notand _ _ (fun
zenon_Hf=>(zenon_Hf __C_1_1_1_1_9_LEMMA)) (fun zenon_H9=>(
coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ (abst_value (
abst_voter va vb vc)) va (fun zenon_Hd=>(
coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ (abst_value (
abst_voter vc va vb)) vc (fun zenon_Hb=>(zenon_subst _ (fun zenon_Vf=>(
Is_true zenon_Vf)) (_p_V_consistency_rule va vc) (_p_V_consistency_rule
(abst_value (abst_voter va vb vc)) (abst_value (abst_voter vc va vb))) (
fun zenon_Ha=>(zenon_subst _ (fun zenon_Vh=>(~((_p_V_consistency_rule
zenon_Vh vc) = (_p_V_consistency_rule (abst_value (abst_voter va vb vc))
 (abst_value (abst_voter vc va vb)))))) va (abst_value (abst_voter va
vb vc)) (fun zenon_He=>(zenon_eqsym _ (abst_value (abst_voter va vb vc))
 va zenon_Hd zenon_He)) (zenon_subst _ (fun zenon_Vg=>(~((
_p_V_consistency_rule (abst_value (abst_voter va vb vc)) zenon_Vg) = (
_p_V_consistency_rule (abst_value (abst_voter va vb vc)) (abst_value (
abst_voter vc va vb)))))) vc (abst_value (abst_voter vc va vb)) (fun
zenon_Hc=>(zenon_eqsym _ (abst_value (abst_voter vc va vb)) vc zenon_Hb
zenon_Hc)) (zenon_notnot _ (refl_equal (_p_V_consistency_rule (
abst_value (abst_voter va vb vc)) (abst_value (abst_voter vc va vb))))))
 zenon_Ha)) zenon_H9 H11)) __C_1_1_1_1_3_LEMMA)) __C_1_1_1_1_1_LEMMA))
zenon_H10)) zenon_H12)) zenon_H14))) zenon_G)))).
Qed.

0
32a9304ebf5694181105124d04478c7c
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1456

%%begin-auto-proof
%%name: for_zenon___C_1_1_1_2_1_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H11". *)
              Parameter H11 : Is_true ((_p_V_consistency_rule va vc)).
              (* For hypothesis "H112". *)
              Parameter H112 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_partial_c1". *)
              Parameter abst_vote_partial_c1 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1
                                     _p_E_partial_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_2_1_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter va vb vc)) va))).
%%end-auto-proof
0
010b33a9628c0977b322905490edc9be
proof
1682
Theorem for_zenon___C_1_1_1_2_1_LEMMA:(Is_true (basics._equal_ _ (
abst_value (abst_voter va vb vc)) va)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule v1 v2))/\((
Is_true (_p_V_consistency_rule v1 v3))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v1))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_partial_match)))))))) va (fun zenon_H10=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule va v2))/\((
Is_true (_p_V_consistency_rule va v3))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter va v2 v3)) va))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter va v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_partial_match))))))) vb (fun zenon_Hf=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((Is_true (_p_V_consistency_rule va vb))/\((Is_true (
_p_V_consistency_rule va v3))/\(~(Is_true (_p_V_consistency_rule vb v3))
)))->((Is_true (basics._equal_ _ (abst_value (abst_voter va vb v3)) va))
/\(Is_true (basics._equal_ _ (abst_diag (abst_voter va vb v3)) (
_p_P_constr _p_C_capt_1 _p_E_partial_match)))))) vc (fun zenon_He=>(
zenon_imply _ _ (fun zenon_Hd=>(zenon_notand _ _ (fun zenon_Hc=>(
zenon_Hc H1)) (fun zenon_Hb=>(zenon_notand _ _ (fun zenon_Ha=>(zenon_Ha
H11)) (fun zenon_H9=>(zenon_H9 (fun zenon_H8=>(H112 zenon_H8))))
zenon_Hb)) zenon_Hd)) (fun zenon_H7=>(zenon_and _ _ (fun zenon_H5
zenon_H6=>(zenon_G zenon_H5)) zenon_H7)) zenon_He)) zenon_Hf))
zenon_H10)) abst_vote_partial_c1)))).
Qed.

0
2a0b97d04b7ba8021343e3076ee50743
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1773

%%begin-auto-proof
%%name: for_zenon___C_1_1_1_2_2_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H11". *)
              Parameter H11 : Is_true ((_p_V_consistency_rule va vc)).
              (* For hypothesis "H112". *)
              Parameter H112 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_partial_c2". *)
              Parameter abst_vote_partial_c2 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v2))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_2
                                     _p_E_partial_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_2_2_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter vb va vc)) va))).
%%end-auto-proof
0
02660ab9ff1d6e2a14425fbcd3801330
proof
2116
Theorem for_zenon___C_1_1_1_2_2_LEMMA:(Is_true (basics._equal_ _ (
abst_value (abst_voter vb va vc)) va)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule v1 v2))/\((~
(Is_true (_p_V_consistency_rule v1 v3)))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v2))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_2
_p_E_partial_match)))))))) vb (fun zenon_H15=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule vb v2))/\((
~(Is_true (_p_V_consistency_rule vb v3)))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter vb v2 v3)) v2))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter vb v2 v3)) (_p_P_constr _p_C_capt_2
_p_E_partial_match))))))) va (fun zenon_H14=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((Is_true (_p_V_consistency_rule vb va))/\((~(Is_true (
_p_V_consistency_rule vb v3)))/\(Is_true (_p_V_consistency_rule va v3)))
)->((Is_true (basics._equal_ _ (abst_value (abst_voter vb va v3)) va))
/\(Is_true (basics._equal_ _ (abst_diag (abst_voter vb va v3)) (
_p_P_constr _p_C_capt_2 _p_E_partial_match)))))) vc (fun zenon_H13=>(
zenon_imply _ _ (fun zenon_H12=>(zenon_notand _ _ (fun zenon_He=>(
zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2:_p_V_T,((Is_true (
_p_V_consistency_rule v1 v2))->(Is_true (_p_V_consistency_rule v2 v1))))
) va (fun zenon_H11=>(zenon_all _p_V_T (fun v2:_p_V_T=>((Is_true (
_p_V_consistency_rule va v2))->(Is_true (_p_V_consistency_rule v2 va))))
 vb (fun zenon_H10=>(zenon_imply _ _ (fun zenon_Hf=>(zenon_Hf H1)) (fun
zenon_Hd=>(zenon_He zenon_Hd)) zenon_H10)) zenon_H11))
abst_consistency_rule_is_symmetric)) (fun zenon_Hc=>(zenon_notand _ _ (
fun zenon_Hb=>(zenon_Hb (fun zenon_Ha=>(H112 zenon_Ha)))) (fun
zenon_H9=>(zenon_H9 H11)) zenon_Hc)) zenon_H12)) (fun zenon_H8=>(
zenon_and _ _ (fun zenon_H6 zenon_H7=>(zenon_G zenon_H6)) zenon_H8))
zenon_H13)) zenon_H14)) zenon_H15)) abst_vote_partial_c2)))).
Qed.

0
b8a9e0e780aa03f01f11ed4d405c3ac8
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1773

%%begin-auto-proof
%%name: for_zenon___C_1_1_1_2_3_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H11". *)
              Parameter H11 : Is_true ((_p_V_consistency_rule va vc)).
              (* For hypothesis "H112". *)
              Parameter H112 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_partial_c2". *)
              Parameter abst_vote_partial_c2 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v2))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_2
                                     _p_E_partial_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_2_3_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter vc va vb)) va))).
%%end-auto-proof
0
bfefbe9d9bbc2aebf82f6e5243f1762f
proof
2546
Theorem for_zenon___C_1_1_1_2_3_LEMMA:(Is_true (basics._equal_ _ (
abst_value (abst_voter vc va vb)) va)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule v1 v2))/\((~
(Is_true (_p_V_consistency_rule v1 v3)))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v2))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_2
_p_E_partial_match)))))))) vc (fun zenon_H19=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule vc v2))/\((
~(Is_true (_p_V_consistency_rule vc v3)))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter vc v2 v3)) v2))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter vc v2 v3)) (_p_P_constr _p_C_capt_2
_p_E_partial_match))))))) va (fun zenon_H18=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((Is_true (_p_V_consistency_rule vc va))/\((~(Is_true (
_p_V_consistency_rule vc v3)))/\(Is_true (_p_V_consistency_rule va v3)))
)->((Is_true (basics._equal_ _ (abst_value (abst_voter vc va v3)) va))
/\(Is_true (basics._equal_ _ (abst_diag (abst_voter vc va v3)) (
_p_P_constr _p_C_capt_2 _p_E_partial_match)))))) vb (fun zenon_H17=>(
zenon_imply _ _ (fun zenon_H16=>(zenon_notand _ _ (fun zenon_H12=>(
zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2:_p_V_T,((Is_true (
_p_V_consistency_rule v1 v2))->(Is_true (_p_V_consistency_rule v2 v1))))
) va (fun zenon_H15=>(zenon_all _p_V_T (fun v2:_p_V_T=>((Is_true (
_p_V_consistency_rule va v2))->(Is_true (_p_V_consistency_rule v2 va))))
 vc (fun zenon_H14=>(zenon_imply _ _ (fun zenon_H13=>(zenon_H13 H11)) (
fun zenon_H11=>(zenon_H12 zenon_H11)) zenon_H14)) zenon_H15))
abst_consistency_rule_is_symmetric)) (fun zenon_H10=>(zenon_notand _ _ (
fun zenon_Hf=>(zenon_Hf (fun zenon_Hb=>(zenon_all _p_V_T (fun v1
:_p_V_T=>(forall v2:_p_V_T,((Is_true (_p_V_consistency_rule v1 v2))->(
Is_true (_p_V_consistency_rule v2 v1))))) vc (fun zenon_He=>(zenon_all
_p_V_T (fun v2:_p_V_T=>((Is_true (_p_V_consistency_rule vc v2))->(
Is_true (_p_V_consistency_rule v2 vc)))) vb (fun zenon_Hd=>(zenon_imply
_ _ (fun zenon_Hc=>(zenon_Hc zenon_Hb)) (fun zenon_Ha=>(H112 zenon_Ha))
zenon_Hd)) zenon_He)) abst_consistency_rule_is_symmetric)))) (fun
zenon_H9=>(zenon_H9 H1)) zenon_H10)) zenon_H16)) (fun zenon_H8=>(
zenon_and _ _ (fun zenon_H6 zenon_H7=>(zenon_G zenon_H6)) zenon_H8))
zenon_H17)) zenon_H18)) zenon_H19)) abst_vote_partial_c2)))).
Qed.

0
7584a48988c1cbb7756d6131d5414289
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1497

%%begin-auto-proof
%%name: for_zenon___C_1_1_1_2_4_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H11". *)
              Parameter H11 : Is_true ((_p_V_consistency_rule va vc)).
              (* For hypothesis "H112". *)
              Parameter H112 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_partial_c1". *)
              Parameter abst_vote_partial_c1 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1
                                     _p_E_partial_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_2_4_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter va vb vc))
                          (_p_P_constr _p_C_capt_1 _p_E_partial_match)))).
%%end-auto-proof
0
fc1a495d6051e04f7f3bf2e07b86809e
proof
1723
Theorem for_zenon___C_1_1_1_2_4_LEMMA:(Is_true (basics._equal_ _ (
abst_diag (abst_voter va vb vc)) (_p_P_constr _p_C_capt_1
_p_E_partial_match))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule v1 v2))/\((
Is_true (_p_V_consistency_rule v1 v3))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v1))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_partial_match)))))))) va (fun zenon_H10=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule va v2))/\((
Is_true (_p_V_consistency_rule va v3))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter va v2 v3)) va))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter va v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_partial_match))))))) vb (fun zenon_Hf=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((Is_true (_p_V_consistency_rule va vb))/\((Is_true (
_p_V_consistency_rule va v3))/\(~(Is_true (_p_V_consistency_rule vb v3))
)))->((Is_true (basics._equal_ _ (abst_value (abst_voter va vb v3)) va))
/\(Is_true (basics._equal_ _ (abst_diag (abst_voter va vb v3)) (
_p_P_constr _p_C_capt_1 _p_E_partial_match)))))) vc (fun zenon_He=>(
zenon_imply _ _ (fun zenon_Hd=>(zenon_notand _ _ (fun zenon_Hc=>(
zenon_Hc H1)) (fun zenon_Hb=>(zenon_notand _ _ (fun zenon_Ha=>(zenon_Ha
H11)) (fun zenon_H9=>(zenon_H9 (fun zenon_H8=>(H112 zenon_H8))))
zenon_Hb)) zenon_Hd)) (fun zenon_H7=>(zenon_and _ _ (fun zenon_H6
zenon_H5=>(zenon_G zenon_H5)) zenon_H7)) zenon_He)) zenon_Hf))
zenon_H10)) abst_vote_partial_c1)))).
Qed.

0
7ed87bd3eb364404967a00650cec473f
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1232

%%begin-auto-proof
%%name: for_zenon___C_1_1_1_2_5_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>4. *)
              Parameter __C_1_1_1_2_4_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter va vb vc))
                             (_p_P_constr _p_C_capt_1 _p_E_partial_match))))).
              (* For species parameter method used via "by property vote#P!partial_match_is_valid". *)
              Parameter _p_P_partial_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_partial_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_2_5_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))).
%%end-auto-proof
0
8db7ab56e675ac32e16cde4fa337fe4b
proof
1971
Theorem for_zenon___C_1_1_1_2_5_LEMMA:(Is_true (_p_P_valid (abst_diag (
abst_voter va vb vc)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(coq_builtins.zenon_syntactic_equal
zenon_focal_eqdec _ (abst_diag (abst_voter va vb vc)) (_p_P_constr
_p_C_capt_1 _p_E_partial_match) (fun zenon_H9=>(zenon_all _p_P_T (fun x
:_p_P_T=>((Is_true (_p_E_equal (_p_P_prj_b x) _p_E_partial_match))->(
Is_true (_p_P_valid x)))) (abst_diag (abst_voter va vb vc)) (fun
zenon_Hc=>(zenon_imply _ _ (fun zenon_H5=>(zenon_all _p_C_T (fun n1
:_p_C_T=>(forall n2:_p_E_T,(Is_true (_p_E_equal (_p_P_prj_b (
_p_P_constr n1 n2)) n2)))) _p_C_capt_1 (fun zenon_Hb=>(zenon_all _p_E_T
(fun n2:_p_E_T=>(Is_true (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_1 n2)) n2))) _p_E_partial_match (fun zenon_H6=>(zenon_subst _
(fun zenon_Vf=>(Is_true zenon_Vf)) (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_1 _p_E_partial_match)) _p_E_partial_match) (_p_E_equal (
_p_P_prj_b (abst_diag (abst_voter va vb vc))) _p_E_partial_match) (fun
zenon_H7=>(zenon_subst _ (fun zenon_Vg=>(~((_p_E_equal zenon_Vg
_p_E_partial_match) = (_p_E_equal (_p_P_prj_b (abst_diag (abst_voter va
vb vc))) _p_E_partial_match)))) (_p_P_prj_b (_p_P_constr _p_C_capt_1
_p_E_partial_match)) (_p_P_prj_b (abst_diag (abst_voter va vb vc))) (
fun zenon_H8=>(zenon_subst _ (fun zenon_Vh=>(~((_p_P_prj_b zenon_Vh) = (
_p_P_prj_b (abst_diag (abst_voter va vb vc)))))) (_p_P_constr
_p_C_capt_1 _p_E_partial_match) (abst_diag (abst_voter va vb vc)) (fun
zenon_Ha=>(zenon_eqsym _ (abst_diag (abst_voter va vb vc)) (_p_P_constr
_p_C_capt_1 _p_E_partial_match) zenon_H9 zenon_Ha)) (zenon_notnot _ (
refl_equal (_p_P_prj_b (abst_diag (abst_voter va vb vc))))) zenon_H8)) (
zenon_notnot _ (refl_equal (_p_E_equal (_p_P_prj_b (abst_diag (
abst_voter va vb vc))) _p_E_partial_match))) zenon_H7)) zenon_H5
zenon_H6)) zenon_Hb)) _p_P_prj_b_is_snd_of_pair)) (fun zenon_H4=>(
zenon_G zenon_H4)) zenon_Hc)) _p_P_partial_match_is_valid))
__C_1_1_1_2_4_LEMMA)))).
Qed.

0
09307f4574fc915f912d5cfd9e2fd8eb
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1814

%%begin-auto-proof
%%name: for_zenon___C_1_1_1_2_6_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H11". *)
              Parameter H11 : Is_true ((_p_V_consistency_rule va vc)).
              (* For hypothesis "H112". *)
              Parameter H112 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_partial_c2". *)
              Parameter abst_vote_partial_c2 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v2))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_2
                                     _p_E_partial_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_2_6_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vb va vc))
                          (_p_P_constr _p_C_capt_2 _p_E_partial_match)))).
%%end-auto-proof
0
650d14f3a35412edfca9c0388094d8ef
proof
2157
Theorem for_zenon___C_1_1_1_2_6_LEMMA:(Is_true (basics._equal_ _ (
abst_diag (abst_voter vb va vc)) (_p_P_constr _p_C_capt_2
_p_E_partial_match))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule v1 v2))/\((~
(Is_true (_p_V_consistency_rule v1 v3)))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v2))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_2
_p_E_partial_match)))))))) vb (fun zenon_H15=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule vb v2))/\((
~(Is_true (_p_V_consistency_rule vb v3)))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter vb v2 v3)) v2))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter vb v2 v3)) (_p_P_constr _p_C_capt_2
_p_E_partial_match))))))) va (fun zenon_H14=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((Is_true (_p_V_consistency_rule vb va))/\((~(Is_true (
_p_V_consistency_rule vb v3)))/\(Is_true (_p_V_consistency_rule va v3)))
)->((Is_true (basics._equal_ _ (abst_value (abst_voter vb va v3)) va))
/\(Is_true (basics._equal_ _ (abst_diag (abst_voter vb va v3)) (
_p_P_constr _p_C_capt_2 _p_E_partial_match)))))) vc (fun zenon_H13=>(
zenon_imply _ _ (fun zenon_H12=>(zenon_notand _ _ (fun zenon_He=>(
zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2:_p_V_T,((Is_true (
_p_V_consistency_rule v1 v2))->(Is_true (_p_V_consistency_rule v2 v1))))
) va (fun zenon_H11=>(zenon_all _p_V_T (fun v2:_p_V_T=>((Is_true (
_p_V_consistency_rule va v2))->(Is_true (_p_V_consistency_rule v2 va))))
 vb (fun zenon_H10=>(zenon_imply _ _ (fun zenon_Hf=>(zenon_Hf H1)) (fun
zenon_Hd=>(zenon_He zenon_Hd)) zenon_H10)) zenon_H11))
abst_consistency_rule_is_symmetric)) (fun zenon_Hc=>(zenon_notand _ _ (
fun zenon_Hb=>(zenon_Hb (fun zenon_Ha=>(H112 zenon_Ha)))) (fun
zenon_H9=>(zenon_H9 H11)) zenon_Hc)) zenon_H12)) (fun zenon_H8=>(
zenon_and _ _ (fun zenon_H7 zenon_H6=>(zenon_G zenon_H6)) zenon_H8))
zenon_H13)) zenon_H14)) zenon_H15)) abst_vote_partial_c2)))).
Qed.

0
f6005b8f333e7046703cbaec7d01a624
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1232

%%begin-auto-proof
%%name: for_zenon___C_1_1_1_2_7_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>6. *)
              Parameter __C_1_1_1_2_6_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vb va vc))
                             (_p_P_constr _p_C_capt_2 _p_E_partial_match))))).
              (* For species parameter method used via "by property vote#P!partial_match_is_valid". *)
              Parameter _p_P_partial_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_partial_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_2_7_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc))))).
%%end-auto-proof
0
13737078f6edf781097af3719086bf6d
proof
1971
Theorem for_zenon___C_1_1_1_2_7_LEMMA:(Is_true (_p_P_valid (abst_diag (
abst_voter vb va vc)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(coq_builtins.zenon_syntactic_equal
zenon_focal_eqdec _ (abst_diag (abst_voter vb va vc)) (_p_P_constr
_p_C_capt_2 _p_E_partial_match) (fun zenon_H9=>(zenon_all _p_P_T (fun x
:_p_P_T=>((Is_true (_p_E_equal (_p_P_prj_b x) _p_E_partial_match))->(
Is_true (_p_P_valid x)))) (abst_diag (abst_voter vb va vc)) (fun
zenon_Hc=>(zenon_imply _ _ (fun zenon_H5=>(zenon_all _p_C_T (fun n1
:_p_C_T=>(forall n2:_p_E_T,(Is_true (_p_E_equal (_p_P_prj_b (
_p_P_constr n1 n2)) n2)))) _p_C_capt_2 (fun zenon_Hb=>(zenon_all _p_E_T
(fun n2:_p_E_T=>(Is_true (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_2 n2)) n2))) _p_E_partial_match (fun zenon_H6=>(zenon_subst _
(fun zenon_Vf=>(Is_true zenon_Vf)) (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_2 _p_E_partial_match)) _p_E_partial_match) (_p_E_equal (
_p_P_prj_b (abst_diag (abst_voter vb va vc))) _p_E_partial_match) (fun
zenon_H7=>(zenon_subst _ (fun zenon_Vg=>(~((_p_E_equal zenon_Vg
_p_E_partial_match) = (_p_E_equal (_p_P_prj_b (abst_diag (abst_voter vb
va vc))) _p_E_partial_match)))) (_p_P_prj_b (_p_P_constr _p_C_capt_2
_p_E_partial_match)) (_p_P_prj_b (abst_diag (abst_voter vb va vc))) (
fun zenon_H8=>(zenon_subst _ (fun zenon_Vh=>(~((_p_P_prj_b zenon_Vh) = (
_p_P_prj_b (abst_diag (abst_voter vb va vc)))))) (_p_P_constr
_p_C_capt_2 _p_E_partial_match) (abst_diag (abst_voter vb va vc)) (fun
zenon_Ha=>(zenon_eqsym _ (abst_diag (abst_voter vb va vc)) (_p_P_constr
_p_C_capt_2 _p_E_partial_match) zenon_H9 zenon_Ha)) (zenon_notnot _ (
refl_equal (_p_P_prj_b (abst_diag (abst_voter vb va vc))))) zenon_H8)) (
zenon_notnot _ (refl_equal (_p_E_equal (_p_P_prj_b (abst_diag (
abst_voter vb va vc))) _p_E_partial_match))) zenon_H7)) zenon_H5
zenon_H6)) zenon_Hb)) _p_P_prj_b_is_snd_of_pair)) (fun zenon_H4=>(
zenon_G zenon_H4)) zenon_Hc)) _p_P_partial_match_is_valid))
__C_1_1_1_2_6_LEMMA)))).
Qed.

0
609f11c5f82234f3aac19f0003261aa6
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1814

%%begin-auto-proof
%%name: for_zenon___C_1_1_1_2_8_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H11". *)
              Parameter H11 : Is_true ((_p_V_consistency_rule va vc)).
              (* For hypothesis "H112". *)
              Parameter H112 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_partial_c2". *)
              Parameter abst_vote_partial_c2 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v2))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_2
                                     _p_E_partial_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_2_8_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vc va vb))
                          (_p_P_constr _p_C_capt_2 _p_E_partial_match)))).
%%end-auto-proof
0
392bc27e6975c62dd554c7cfac8006db
proof
2587
Theorem for_zenon___C_1_1_1_2_8_LEMMA:(Is_true (basics._equal_ _ (
abst_diag (abst_voter vc va vb)) (_p_P_constr _p_C_capt_2
_p_E_partial_match))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule v1 v2))/\((~
(Is_true (_p_V_consistency_rule v1 v3)))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v2))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_2
_p_E_partial_match)))))))) vc (fun zenon_H19=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule vc v2))/\((
~(Is_true (_p_V_consistency_rule vc v3)))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter vc v2 v3)) v2))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter vc v2 v3)) (_p_P_constr _p_C_capt_2
_p_E_partial_match))))))) va (fun zenon_H18=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((Is_true (_p_V_consistency_rule vc va))/\((~(Is_true (
_p_V_consistency_rule vc v3)))/\(Is_true (_p_V_consistency_rule va v3)))
)->((Is_true (basics._equal_ _ (abst_value (abst_voter vc va v3)) va))
/\(Is_true (basics._equal_ _ (abst_diag (abst_voter vc va v3)) (
_p_P_constr _p_C_capt_2 _p_E_partial_match)))))) vb (fun zenon_H17=>(
zenon_imply _ _ (fun zenon_H16=>(zenon_notand _ _ (fun zenon_H12=>(
zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2:_p_V_T,((Is_true (
_p_V_consistency_rule v1 v2))->(Is_true (_p_V_consistency_rule v2 v1))))
) va (fun zenon_H15=>(zenon_all _p_V_T (fun v2:_p_V_T=>((Is_true (
_p_V_consistency_rule va v2))->(Is_true (_p_V_consistency_rule v2 va))))
 vc (fun zenon_H14=>(zenon_imply _ _ (fun zenon_H13=>(zenon_H13 H11)) (
fun zenon_H11=>(zenon_H12 zenon_H11)) zenon_H14)) zenon_H15))
abst_consistency_rule_is_symmetric)) (fun zenon_H10=>(zenon_notand _ _ (
fun zenon_Hf=>(zenon_Hf (fun zenon_Hb=>(zenon_all _p_V_T (fun v1
:_p_V_T=>(forall v2:_p_V_T,((Is_true (_p_V_consistency_rule v1 v2))->(
Is_true (_p_V_consistency_rule v2 v1))))) vc (fun zenon_He=>(zenon_all
_p_V_T (fun v2:_p_V_T=>((Is_true (_p_V_consistency_rule vc v2))->(
Is_true (_p_V_consistency_rule v2 vc)))) vb (fun zenon_Hd=>(zenon_imply
_ _ (fun zenon_Hc=>(zenon_Hc zenon_Hb)) (fun zenon_Ha=>(H112 zenon_Ha))
zenon_Hd)) zenon_He)) abst_consistency_rule_is_symmetric)))) (fun
zenon_H9=>(zenon_H9 H1)) zenon_H10)) zenon_H16)) (fun zenon_H8=>(
zenon_and _ _ (fun zenon_H7 zenon_H6=>(zenon_G zenon_H6)) zenon_H8))
zenon_H17)) zenon_H18)) zenon_H19)) abst_vote_partial_c2)))).
Qed.

0
d845b80d00d59b322f4b60a39e7a14c4
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1232

%%begin-auto-proof
%%name: for_zenon___C_1_1_1_2_9_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>8. *)
              Parameter __C_1_1_1_2_8_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vc va vb))
                             (_p_P_constr _p_C_capt_2 _p_E_partial_match))))).
              (* For species parameter method used via "by property vote#P!partial_match_is_valid". *)
              Parameter _p_P_partial_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_partial_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_2_9_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb))))).
%%end-auto-proof
0
b07bd6d52c595201380c0f6d8b6ea059
proof
1971
Theorem for_zenon___C_1_1_1_2_9_LEMMA:(Is_true (_p_P_valid (abst_diag (
abst_voter vc va vb)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(coq_builtins.zenon_syntactic_equal
zenon_focal_eqdec _ (abst_diag (abst_voter vc va vb)) (_p_P_constr
_p_C_capt_2 _p_E_partial_match) (fun zenon_H9=>(zenon_all _p_P_T (fun x
:_p_P_T=>((Is_true (_p_E_equal (_p_P_prj_b x) _p_E_partial_match))->(
Is_true (_p_P_valid x)))) (abst_diag (abst_voter vc va vb)) (fun
zenon_Hc=>(zenon_imply _ _ (fun zenon_H5=>(zenon_all _p_C_T (fun n1
:_p_C_T=>(forall n2:_p_E_T,(Is_true (_p_E_equal (_p_P_prj_b (
_p_P_constr n1 n2)) n2)))) _p_C_capt_2 (fun zenon_Hb=>(zenon_all _p_E_T
(fun n2:_p_E_T=>(Is_true (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_2 n2)) n2))) _p_E_partial_match (fun zenon_H6=>(zenon_subst _
(fun zenon_Vf=>(Is_true zenon_Vf)) (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_2 _p_E_partial_match)) _p_E_partial_match) (_p_E_equal (
_p_P_prj_b (abst_diag (abst_voter vc va vb))) _p_E_partial_match) (fun
zenon_H7=>(zenon_subst _ (fun zenon_Vg=>(~((_p_E_equal zenon_Vg
_p_E_partial_match) = (_p_E_equal (_p_P_prj_b (abst_diag (abst_voter vc
va vb))) _p_E_partial_match)))) (_p_P_prj_b (_p_P_constr _p_C_capt_2
_p_E_partial_match)) (_p_P_prj_b (abst_diag (abst_voter vc va vb))) (
fun zenon_H8=>(zenon_subst _ (fun zenon_Vh=>(~((_p_P_prj_b zenon_Vh) = (
_p_P_prj_b (abst_diag (abst_voter vc va vb)))))) (_p_P_constr
_p_C_capt_2 _p_E_partial_match) (abst_diag (abst_voter vc va vb)) (fun
zenon_Ha=>(zenon_eqsym _ (abst_diag (abst_voter vc va vb)) (_p_P_constr
_p_C_capt_2 _p_E_partial_match) zenon_H9 zenon_Ha)) (zenon_notnot _ (
refl_equal (_p_P_prj_b (abst_diag (abst_voter vc va vb))))) zenon_H8)) (
zenon_notnot _ (refl_equal (_p_E_equal (_p_P_prj_b (abst_diag (
abst_voter vc va vb))) _p_E_partial_match))) zenon_H7)) zenon_H5
zenon_H6)) zenon_Hb)) _p_P_prj_b_is_snd_of_pair)) (fun zenon_H4=>(
zenon_G zenon_H4)) zenon_Hc)) _p_P_partial_match_is_valid))
__C_1_1_1_2_8_LEMMA)))).
Qed.

0
add00b1bf6c7b78b28e295147c52ae3a
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
2263

%%begin-auto-proof
%%name: for_zenon___C_1_1_1_2_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For step <5>1. *)
            Parameter __C_1_1_1_2_1_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter va vb vc)) va)))).
            (* For step <5>2. *)
            Parameter __C_1_1_1_2_2_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter vb va vc)) va)))).
            (* For step <5>3. *)
            Parameter __C_1_1_1_2_3_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter vc va vb)) va)))).
            (* For step <5>5. *)
            Parameter __C_1_1_1_2_5_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc)))))).
            (* For step <5>7. *)
            Parameter __C_1_1_1_2_7_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc)))))).
            (* For step <5>9. *)
            Parameter __C_1_1_1_2_9_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb)))))).
            (* For species parameter method used via "by property vote#V!consistency_rule_reflexive". *)
            Parameter _p_V_consistency_rule_reflexive :
              forall a : _p_V_T, Is_true ((_p_V_consistency_rule a a)).
            (* For method of Self used via "by definition of !compatible". *)
            Definition abst_compatible (s1 : (Datatypes.prod _p_V_T _p_P_T))
              (s2 : (Datatypes.prod _p_V_T _p_P_T)) : coq_builtins.prop__t :=
              (Is_true ((_p_P_valid (abst_diag s1))) /\
                 Is_true ((_p_P_valid (abst_diag s2))) /\
                   Is_true ((_p_V_consistency_rule (abst_value s1)
                              (abst_value s2)))) \/
                (~Is_true (((_p_P_valid (abst_diag s1)))) /\
                   ~Is_true (((_p_P_valid (abst_diag s2))))).
            (* Theorem's body. *)
            Theorem for_zenon___C_1_1_1_2_LEMMA :
            ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
               (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
%%end-auto-proof
0
40af4a6f6e0451130b8037b0d6e33dee
proof
3530
Theorem for_zenon___C_1_1_1_2_LEMMA:((abst_compatible (abst_voter va vb
vc) (abst_voter vb va vc))/\(abst_compatible (abst_voter va vb vc) (
abst_voter vc va vb))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notand _ _ (fun zenon_H20=>(let zenon_H1f
:=zenon_H20 in (zenon_notor _ _ (fun zenon_H1d zenon_H1e=>(zenon_notand
_ _ (fun zenon_H11=>(zenon_H11 __C_1_1_1_2_5_LEMMA)) (fun zenon_H1c=>(
zenon_notand _ _ (fun zenon_H1b=>(zenon_H1b __C_1_1_1_2_7_LEMMA)) (fun
zenon_H16=>(zenon_all _p_V_T (fun a:_p_V_T=>(Is_true (
_p_V_consistency_rule a a))) (abst_value (abst_voter va vb vc)) (fun
zenon_H9=>(zenon_subst _ (fun zenon_Vi=>(Is_true zenon_Vi)) (
_p_V_consistency_rule (abst_value (abst_voter va vb vc)) (abst_value (
abst_voter va vb vc))) (_p_V_consistency_rule (abst_value (abst_voter
va vb vc)) (abst_value (abst_voter vb va vc))) (fun zenon_H17=>(
zenon_subst _ (fun zenon_Vj=>(~((_p_V_consistency_rule (abst_value (
abst_voter va vb vc)) zenon_Vj) = (_p_V_consistency_rule (abst_value (
abst_voter va vb vc)) (abst_value (abst_voter vb va vc)))))) (
abst_value (abst_voter va vb vc)) (abst_value (abst_voter vb va vc)) (
fun zenon_H18=>(coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ (
abst_value (abst_voter va vb vc)) va (fun zenon_Hc=>(
coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ (abst_value (
abst_voter vb va vc)) va (fun zenon_H19=>(zenon_subst _ (fun zenon_Vk=>(
(abst_value (abst_voter va vb vc)) = zenon_Vk)) va (abst_value (
abst_voter vb va vc)) (fun zenon_H1a=>(zenon_eqsym _ (abst_value (
abst_voter vb va vc)) va zenon_H19 zenon_H1a)) zenon_H18 zenon_Hc))
__C_1_1_1_2_2_LEMMA)) __C_1_1_1_2_1_LEMMA)) (zenon_notnot _ (refl_equal
(_p_V_consistency_rule (abst_value (abst_voter va vb vc)) (abst_value (
abst_voter vb va vc))))) zenon_H17)) zenon_H16 zenon_H9))
_p_V_consistency_rule_reflexive)) zenon_H1c)) zenon_H1d)) zenon_H1f))) (
fun zenon_H15=>(let zenon_H14:=zenon_H15 in (zenon_notor _ _ (fun
zenon_H12 zenon_H13=>(zenon_notand _ _ (fun zenon_H11=>(zenon_H11
__C_1_1_1_2_5_LEMMA)) (fun zenon_H10=>(zenon_notand _ _ (fun zenon_Hf=>(
zenon_Hf __C_1_1_1_2_9_LEMMA)) (fun zenon_H8=>(zenon_all _p_V_T (fun a
:_p_V_T=>(Is_true (_p_V_consistency_rule a a))) (abst_value (abst_voter
va vb vc)) (fun zenon_H9=>(zenon_subst _ (fun zenon_Vf=>(Is_true
zenon_Vf)) (_p_V_consistency_rule (abst_value (abst_voter va vb vc)) (
abst_value (abst_voter va vb vc))) (_p_V_consistency_rule (abst_value (
abst_voter va vb vc)) (abst_value (abst_voter vc va vb))) (fun
zenon_Ha=>(zenon_subst _ (fun zenon_Vg=>(~((_p_V_consistency_rule (
abst_value (abst_voter va vb vc)) zenon_Vg) = (_p_V_consistency_rule (
abst_value (abst_voter va vb vc)) (abst_value (abst_voter vc va vb))))))
 (abst_value (abst_voter va vb vc)) (abst_value (abst_voter vc va vb)) (
fun zenon_Hb=>(coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ (
abst_value (abst_voter va vb vc)) va (fun zenon_Hc=>(
coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ (abst_value (
abst_voter vc va vb)) va (fun zenon_Hd=>(zenon_subst _ (fun zenon_Vh=>((
abst_value (abst_voter va vb vc)) = zenon_Vh)) va (abst_value (
abst_voter vc va vb)) (fun zenon_He=>(zenon_eqsym _ (abst_value (
abst_voter vc va vb)) va zenon_Hd zenon_He)) zenon_Hb zenon_Hc))
__C_1_1_1_2_3_LEMMA)) __C_1_1_1_2_1_LEMMA)) (zenon_notnot _ (refl_equal
(_p_V_consistency_rule (abst_value (abst_voter va vb vc)) (abst_value (
abst_voter vc va vb))))) zenon_Ha)) zenon_H8 zenon_H9))
_p_V_consistency_rule_reflexive)) zenon_H10)) zenon_H12)) zenon_H14)))
zenon_G)))).
Qed.

0
2158ca154ba4841b70326e84e1e8677b
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
2291

%%begin-auto-proof
%%name: for_zenon___C_1_1_1_LEMMA
          
          
          
          (* Methods to use for automated proof. *)
          (* For step <4>1. *)
          Parameter __C_1_1_1_1_LEMMA :
            (Is_true ((_p_V_consistency_rule vb vc))) -> (((abst_compatible
                                                             (abst_voter va
                                                               vb vc)
                                                             (abst_voter vb
                                                               va vc)) /\
                                                             (abst_compatible
                                                               (abst_voter va
                                                                 vb vc)
                                                               (abst_voter vc
                                                                 va vb)))).
          (* For step <4>2. *)
          Parameter __C_1_1_1_2_LEMMA :
            (~Is_true (((_p_V_consistency_rule vb vc)))) -> (((abst_compatible
                                                                (abst_voter
                                                                  va vb vc)
                                                                (abst_voter
                                                                  vb va vc)) /\
                                                                (abst_compatible
                                                                  (abst_voter
                                                                    va vb vc)
                                                                  (abst_voter
                                                                    vc va vb)))).
          (* For method of Self used via "by property !compatible". *)
          Parameter abst_compatible :
            (Datatypes.prod _p_V_T _p_P_T) ->
              (Datatypes.prod _p_V_T _p_P_T) -> coq_builtins.prop__t.
          (* Theorem's body. *)
          Theorem for_zenon___C_1_1_1_LEMMA :
          ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
             (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
%%end-auto-proof
0
7a41a64523993b8a729ea9058c8808d9
proof
403
Theorem for_zenon___C_1_1_1_LEMMA:((abst_compatible (abst_voter va vb
vc) (abst_voter vb va vc))/\(abst_compatible (abst_voter va vb vc) (
abst_voter vc va vb))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_imply _ _ (fun zenon_H5=>(zenon_imply _ _ (
fun zenon_H6=>(zenon_H6 zenon_H5)) (fun zenon_H4=>(zenon_G zenon_H4))
__C_1_1_1_2_LEMMA)) (fun zenon_H4=>(zenon_G zenon_H4))
__C_1_1_1_1_LEMMA)))).
Qed.

0
c4d8e6d6fbe89ad480d4bfdb6b89c50f
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1456

%%begin-auto-proof
%%name: for_zenon___C_1_1_2_1_1_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H12". *)
              Parameter H12 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H121". *)
              Parameter H121 : Is_true ((_p_V_consistency_rule vb vc)).
              (* For method of Self used via "by property !vote_partial_c2". *)
              Parameter abst_vote_partial_c2 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v2))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_2
                                     _p_E_partial_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_1_1_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter va vb vc)) vb))).
%%end-auto-proof
0
bff65e8c7fc42465c6cb2caa24225ee7
proof
1682
Theorem for_zenon___C_1_1_2_1_1_LEMMA:(Is_true (basics._equal_ _ (
abst_value (abst_voter va vb vc)) vb)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule v1 v2))/\((~
(Is_true (_p_V_consistency_rule v1 v3)))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v2))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_2
_p_E_partial_match)))))))) va (fun zenon_H10=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule va v2))/\((
~(Is_true (_p_V_consistency_rule va v3)))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter va v2 v3)) v2))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter va v2 v3)) (_p_P_constr _p_C_capt_2
_p_E_partial_match))))))) vb (fun zenon_Hf=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((Is_true (_p_V_consistency_rule va vb))/\((~(Is_true (
_p_V_consistency_rule va v3)))/\(Is_true (_p_V_consistency_rule vb v3)))
)->((Is_true (basics._equal_ _ (abst_value (abst_voter va vb v3)) vb))
/\(Is_true (basics._equal_ _ (abst_diag (abst_voter va vb v3)) (
_p_P_constr _p_C_capt_2 _p_E_partial_match)))))) vc (fun zenon_He=>(
zenon_imply _ _ (fun zenon_Hd=>(zenon_notand _ _ (fun zenon_Hc=>(
zenon_Hc H1)) (fun zenon_Hb=>(zenon_notand _ _ (fun zenon_Ha=>(zenon_Ha
(fun zenon_H9=>(H12 zenon_H9)))) (fun zenon_H8=>(zenon_H8 H121))
zenon_Hb)) zenon_Hd)) (fun zenon_H7=>(zenon_and _ _ (fun zenon_H5
zenon_H6=>(zenon_G zenon_H5)) zenon_H7)) zenon_He)) zenon_Hf))
zenon_H10)) abst_vote_partial_c2)))).
Qed.

0
51b33401f5c1ca7878b60e11b49c4941
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1773

%%begin-auto-proof
%%name: for_zenon___C_1_1_2_1_2_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H12". *)
              Parameter H12 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H121". *)
              Parameter H121 : Is_true ((_p_V_consistency_rule vb vc)).
              (* For method of Self used via "by property !vote_partial_c1". *)
              Parameter abst_vote_partial_c1 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1
                                     _p_E_partial_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_1_2_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter vb va vc)) vb))).
%%end-auto-proof
0
b177224a049708cdff2b0d168396069d
proof
2117
Theorem for_zenon___C_1_1_2_1_2_LEMMA:(Is_true (basics._equal_ _ (
abst_value (abst_voter vb va vc)) vb)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule v1 v2))/\((
Is_true (_p_V_consistency_rule v1 v3))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v1))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_partial_match)))))))) vb (fun zenon_H15=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule vb v2))/\((
Is_true (_p_V_consistency_rule vb v3))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter vb v2 v3)) vb))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter vb v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_partial_match))))))) va (fun zenon_H14=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((Is_true (_p_V_consistency_rule vb va))/\((Is_true (
_p_V_consistency_rule vb v3))/\(~(Is_true (_p_V_consistency_rule va v3))
)))->((Is_true (basics._equal_ _ (abst_value (abst_voter vb va v3)) vb))
/\(Is_true (basics._equal_ _ (abst_diag (abst_voter vb va v3)) (
_p_P_constr _p_C_capt_1 _p_E_partial_match)))))) vc (fun zenon_H13=>(
zenon_imply _ _ (fun zenon_H12=>(zenon_notand _ _ (fun zenon_He=>(
zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2:_p_V_T,((Is_true (
_p_V_consistency_rule v1 v2))->(Is_true (_p_V_consistency_rule v2 v1))))
) va (fun zenon_H11=>(zenon_all _p_V_T (fun v2:_p_V_T=>((Is_true (
_p_V_consistency_rule va v2))->(Is_true (_p_V_consistency_rule v2 va))))
 vb (fun zenon_H10=>(zenon_imply _ _ (fun zenon_Hf=>(zenon_Hf H1)) (fun
zenon_Hd=>(zenon_He zenon_Hd)) zenon_H10)) zenon_H11))
abst_consistency_rule_is_symmetric)) (fun zenon_Hc=>(zenon_notand _ _ (
fun zenon_Hb=>(zenon_Hb H121)) (fun zenon_Ha=>(zenon_Ha (fun zenon_H9=>(
H12 zenon_H9)))) zenon_Hc)) zenon_H12)) (fun zenon_H8=>(zenon_and _ _ (
fun zenon_H6 zenon_H7=>(zenon_G zenon_H6)) zenon_H8)) zenon_H13))
zenon_H14)) zenon_H15)) abst_vote_partial_c1)))).
Qed.

0
240b8320a70193287db35363380c4c60
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1773

%%begin-auto-proof
%%name: for_zenon___C_1_1_2_1_3_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H12". *)
              Parameter H12 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H121". *)
              Parameter H121 : Is_true ((_p_V_consistency_rule vb vc)).
              (* For method of Self used via "by property !vote_partial_c3". *)
              Parameter abst_vote_partial_c3 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v3))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_3
                                     _p_E_partial_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_1_3_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter vc va vb)) vb))).
%%end-auto-proof
0
5112ca4fc34e569f123101bdb2a503ab
proof
2545
Theorem for_zenon___C_1_1_2_1_3_LEMMA:(Is_true (basics._equal_ _ (
abst_value (abst_voter vc va vb)) vb)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule v1 v2)))
/\((Is_true (_p_V_consistency_rule v1 v3))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v3))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_3
_p_E_partial_match)))))))) vc (fun zenon_H19=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule vc v2)))
/\((Is_true (_p_V_consistency_rule vc v3))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter vc v2 v3)) v3))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter vc v2 v3)) (_p_P_constr _p_C_capt_3
_p_E_partial_match))))))) va (fun zenon_H18=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((~(Is_true (_p_V_consistency_rule vc va)))/\((Is_true (
_p_V_consistency_rule vc v3))/\(Is_true (_p_V_consistency_rule va v3))))
->((Is_true (basics._equal_ _ (abst_value (abst_voter vc va v3)) v3))/\(
Is_true (basics._equal_ _ (abst_diag (abst_voter vc va v3)) (
_p_P_constr _p_C_capt_3 _p_E_partial_match)))))) vb (fun zenon_H17=>(
zenon_imply _ _ (fun zenon_H16=>(zenon_notand _ _ (fun zenon_H15=>(
zenon_H15 (fun zenon_H11=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,((Is_true (_p_V_consistency_rule v1 v2))->(Is_true (
_p_V_consistency_rule v2 v1))))) vc (fun zenon_H14=>(zenon_all _p_V_T (
fun v2:_p_V_T=>((Is_true (_p_V_consistency_rule vc v2))->(Is_true (
_p_V_consistency_rule v2 vc)))) va (fun zenon_H13=>(zenon_imply _ _ (
fun zenon_H12=>(zenon_H12 zenon_H11)) (fun zenon_H10=>(H12 zenon_H10))
zenon_H13)) zenon_H14)) abst_consistency_rule_is_symmetric)))) (fun
zenon_Hf=>(zenon_notand _ _ (fun zenon_Hb=>(zenon_all _p_V_T (fun v1
:_p_V_T=>(forall v2:_p_V_T,((Is_true (_p_V_consistency_rule v1 v2))->(
Is_true (_p_V_consistency_rule v2 v1))))) vb (fun zenon_He=>(zenon_all
_p_V_T (fun v2:_p_V_T=>((Is_true (_p_V_consistency_rule vb v2))->(
Is_true (_p_V_consistency_rule v2 vb)))) vc (fun zenon_Hd=>(zenon_imply
_ _ (fun zenon_Hc=>(zenon_Hc H121)) (fun zenon_Ha=>(zenon_Hb zenon_Ha))
zenon_Hd)) zenon_He)) abst_consistency_rule_is_symmetric)) (fun
zenon_H9=>(zenon_H9 H1)) zenon_Hf)) zenon_H16)) (fun zenon_H8=>(
zenon_and _ _ (fun zenon_H6 zenon_H7=>(zenon_G zenon_H6)) zenon_H8))
zenon_H17)) zenon_H18)) zenon_H19)) abst_vote_partial_c3)))).
Qed.

0
83434095136229fe6adfe7d72f52a809
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1497

%%begin-auto-proof
%%name: for_zenon___C_1_1_2_1_4_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H12". *)
              Parameter H12 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H121". *)
              Parameter H121 : Is_true ((_p_V_consistency_rule vb vc)).
              (* For method of Self used via "by property !vote_partial_c2". *)
              Parameter abst_vote_partial_c2 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v2))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_2
                                     _p_E_partial_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_1_4_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter va vb vc))
                          (_p_P_constr _p_C_capt_2 _p_E_partial_match)))).
%%end-auto-proof
0
ced7c4e791080e4203014fce5e9fe5fd
proof
1723
Theorem for_zenon___C_1_1_2_1_4_LEMMA:(Is_true (basics._equal_ _ (
abst_diag (abst_voter va vb vc)) (_p_P_constr _p_C_capt_2
_p_E_partial_match))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule v1 v2))/\((~
(Is_true (_p_V_consistency_rule v1 v3)))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v2))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_2
_p_E_partial_match)))))))) va (fun zenon_H10=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule va v2))/\((
~(Is_true (_p_V_consistency_rule va v3)))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter va v2 v3)) v2))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter va v2 v3)) (_p_P_constr _p_C_capt_2
_p_E_partial_match))))))) vb (fun zenon_Hf=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((Is_true (_p_V_consistency_rule va vb))/\((~(Is_true (
_p_V_consistency_rule va v3)))/\(Is_true (_p_V_consistency_rule vb v3)))
)->((Is_true (basics._equal_ _ (abst_value (abst_voter va vb v3)) vb))
/\(Is_true (basics._equal_ _ (abst_diag (abst_voter va vb v3)) (
_p_P_constr _p_C_capt_2 _p_E_partial_match)))))) vc (fun zenon_He=>(
zenon_imply _ _ (fun zenon_Hd=>(zenon_notand _ _ (fun zenon_Hc=>(
zenon_Hc H1)) (fun zenon_Hb=>(zenon_notand _ _ (fun zenon_Ha=>(zenon_Ha
(fun zenon_H9=>(H12 zenon_H9)))) (fun zenon_H8=>(zenon_H8 H121))
zenon_Hb)) zenon_Hd)) (fun zenon_H7=>(zenon_and _ _ (fun zenon_H6
zenon_H5=>(zenon_G zenon_H5)) zenon_H7)) zenon_He)) zenon_Hf))
zenon_H10)) abst_vote_partial_c2)))).
Qed.

0
b191f4342bad37113d4713d22142e064
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1232

%%begin-auto-proof
%%name: for_zenon___C_1_1_2_1_5_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>4. *)
              Parameter __C_1_1_2_1_4_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter va vb vc))
                             (_p_P_constr _p_C_capt_2 _p_E_partial_match))))).
              (* For species parameter method used via "by property vote#P!partial_match_is_valid". *)
              Parameter _p_P_partial_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_partial_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_1_5_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))).
%%end-auto-proof
0
6d46e10152ea1d11768cd8f8a7c24777
proof
1971
Theorem for_zenon___C_1_1_2_1_5_LEMMA:(Is_true (_p_P_valid (abst_diag (
abst_voter va vb vc)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(coq_builtins.zenon_syntactic_equal
zenon_focal_eqdec _ (abst_diag (abst_voter va vb vc)) (_p_P_constr
_p_C_capt_2 _p_E_partial_match) (fun zenon_H9=>(zenon_all _p_P_T (fun x
:_p_P_T=>((Is_true (_p_E_equal (_p_P_prj_b x) _p_E_partial_match))->(
Is_true (_p_P_valid x)))) (abst_diag (abst_voter va vb vc)) (fun
zenon_Hc=>(zenon_imply _ _ (fun zenon_H5=>(zenon_all _p_C_T (fun n1
:_p_C_T=>(forall n2:_p_E_T,(Is_true (_p_E_equal (_p_P_prj_b (
_p_P_constr n1 n2)) n2)))) _p_C_capt_2 (fun zenon_Hb=>(zenon_all _p_E_T
(fun n2:_p_E_T=>(Is_true (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_2 n2)) n2))) _p_E_partial_match (fun zenon_H6=>(zenon_subst _
(fun zenon_Vf=>(Is_true zenon_Vf)) (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_2 _p_E_partial_match)) _p_E_partial_match) (_p_E_equal (
_p_P_prj_b (abst_diag (abst_voter va vb vc))) _p_E_partial_match) (fun
zenon_H7=>(zenon_subst _ (fun zenon_Vg=>(~((_p_E_equal zenon_Vg
_p_E_partial_match) = (_p_E_equal (_p_P_prj_b (abst_diag (abst_voter va
vb vc))) _p_E_partial_match)))) (_p_P_prj_b (_p_P_constr _p_C_capt_2
_p_E_partial_match)) (_p_P_prj_b (abst_diag (abst_voter va vb vc))) (
fun zenon_H8=>(zenon_subst _ (fun zenon_Vh=>(~((_p_P_prj_b zenon_Vh) = (
_p_P_prj_b (abst_diag (abst_voter va vb vc)))))) (_p_P_constr
_p_C_capt_2 _p_E_partial_match) (abst_diag (abst_voter va vb vc)) (fun
zenon_Ha=>(zenon_eqsym _ (abst_diag (abst_voter va vb vc)) (_p_P_constr
_p_C_capt_2 _p_E_partial_match) zenon_H9 zenon_Ha)) (zenon_notnot _ (
refl_equal (_p_P_prj_b (abst_diag (abst_voter va vb vc))))) zenon_H8)) (
zenon_notnot _ (refl_equal (_p_E_equal (_p_P_prj_b (abst_diag (
abst_voter va vb vc))) _p_E_partial_match))) zenon_H7)) zenon_H5
zenon_H6)) zenon_Hb)) _p_P_prj_b_is_snd_of_pair)) (fun zenon_H4=>(
zenon_G zenon_H4)) zenon_Hc)) _p_P_partial_match_is_valid))
__C_1_1_2_1_4_LEMMA)))).
Qed.

0
073de9b910884b2d1a5a00b82e78c734
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1814

%%begin-auto-proof
%%name: for_zenon___C_1_1_2_1_6_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H12". *)
              Parameter H12 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H121". *)
              Parameter H121 : Is_true ((_p_V_consistency_rule vb vc)).
              (* For method of Self used via "by property !vote_partial_c1". *)
              Parameter abst_vote_partial_c1 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1
                                     _p_E_partial_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_1_6_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vb va vc))
                          (_p_P_constr _p_C_capt_1 _p_E_partial_match)))).
%%end-auto-proof
0
b3eff17770bf0d201b039a5d0c145cf6
proof
2158
Theorem for_zenon___C_1_1_2_1_6_LEMMA:(Is_true (basics._equal_ _ (
abst_diag (abst_voter vb va vc)) (_p_P_constr _p_C_capt_1
_p_E_partial_match))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule v1 v2))/\((
Is_true (_p_V_consistency_rule v1 v3))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v1))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_partial_match)))))))) vb (fun zenon_H15=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule vb v2))/\((
Is_true (_p_V_consistency_rule vb v3))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter vb v2 v3)) vb))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter vb v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_partial_match))))))) va (fun zenon_H14=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((Is_true (_p_V_consistency_rule vb va))/\((Is_true (
_p_V_consistency_rule vb v3))/\(~(Is_true (_p_V_consistency_rule va v3))
)))->((Is_true (basics._equal_ _ (abst_value (abst_voter vb va v3)) vb))
/\(Is_true (basics._equal_ _ (abst_diag (abst_voter vb va v3)) (
_p_P_constr _p_C_capt_1 _p_E_partial_match)))))) vc (fun zenon_H13=>(
zenon_imply _ _ (fun zenon_H12=>(zenon_notand _ _ (fun zenon_He=>(
zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2:_p_V_T,((Is_true (
_p_V_consistency_rule v1 v2))->(Is_true (_p_V_consistency_rule v2 v1))))
) va (fun zenon_H11=>(zenon_all _p_V_T (fun v2:_p_V_T=>((Is_true (
_p_V_consistency_rule va v2))->(Is_true (_p_V_consistency_rule v2 va))))
 vb (fun zenon_H10=>(zenon_imply _ _ (fun zenon_Hf=>(zenon_Hf H1)) (fun
zenon_Hd=>(zenon_He zenon_Hd)) zenon_H10)) zenon_H11))
abst_consistency_rule_is_symmetric)) (fun zenon_Hc=>(zenon_notand _ _ (
fun zenon_Hb=>(zenon_Hb H121)) (fun zenon_Ha=>(zenon_Ha (fun zenon_H9=>(
H12 zenon_H9)))) zenon_Hc)) zenon_H12)) (fun zenon_H8=>(zenon_and _ _ (
fun zenon_H7 zenon_H6=>(zenon_G zenon_H6)) zenon_H8)) zenon_H13))
zenon_H14)) zenon_H15)) abst_vote_partial_c1)))).
Qed.

0
c56b0ce68db34eeb3731f40f603d7a0c
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1232

%%begin-auto-proof
%%name: for_zenon___C_1_1_2_1_7_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>6. *)
              Parameter __C_1_1_2_1_6_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vb va vc))
                             (_p_P_constr _p_C_capt_1 _p_E_partial_match))))).
              (* For species parameter method used via "by property vote#P!partial_match_is_valid". *)
              Parameter _p_P_partial_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_partial_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_1_7_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc))))).
%%end-auto-proof
0
b970a2f3707c8e26df071a6ccf9d8ff4
proof
1971
Theorem for_zenon___C_1_1_2_1_7_LEMMA:(Is_true (_p_P_valid (abst_diag (
abst_voter vb va vc)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(coq_builtins.zenon_syntactic_equal
zenon_focal_eqdec _ (abst_diag (abst_voter vb va vc)) (_p_P_constr
_p_C_capt_1 _p_E_partial_match) (fun zenon_H9=>(zenon_all _p_P_T (fun x
:_p_P_T=>((Is_true (_p_E_equal (_p_P_prj_b x) _p_E_partial_match))->(
Is_true (_p_P_valid x)))) (abst_diag (abst_voter vb va vc)) (fun
zenon_Hc=>(zenon_imply _ _ (fun zenon_H5=>(zenon_all _p_C_T (fun n1
:_p_C_T=>(forall n2:_p_E_T,(Is_true (_p_E_equal (_p_P_prj_b (
_p_P_constr n1 n2)) n2)))) _p_C_capt_1 (fun zenon_Hb=>(zenon_all _p_E_T
(fun n2:_p_E_T=>(Is_true (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_1 n2)) n2))) _p_E_partial_match (fun zenon_H6=>(zenon_subst _
(fun zenon_Vf=>(Is_true zenon_Vf)) (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_1 _p_E_partial_match)) _p_E_partial_match) (_p_E_equal (
_p_P_prj_b (abst_diag (abst_voter vb va vc))) _p_E_partial_match) (fun
zenon_H7=>(zenon_subst _ (fun zenon_Vg=>(~((_p_E_equal zenon_Vg
_p_E_partial_match) = (_p_E_equal (_p_P_prj_b (abst_diag (abst_voter vb
va vc))) _p_E_partial_match)))) (_p_P_prj_b (_p_P_constr _p_C_capt_1
_p_E_partial_match)) (_p_P_prj_b (abst_diag (abst_voter vb va vc))) (
fun zenon_H8=>(zenon_subst _ (fun zenon_Vh=>(~((_p_P_prj_b zenon_Vh) = (
_p_P_prj_b (abst_diag (abst_voter vb va vc)))))) (_p_P_constr
_p_C_capt_1 _p_E_partial_match) (abst_diag (abst_voter vb va vc)) (fun
zenon_Ha=>(zenon_eqsym _ (abst_diag (abst_voter vb va vc)) (_p_P_constr
_p_C_capt_1 _p_E_partial_match) zenon_H9 zenon_Ha)) (zenon_notnot _ (
refl_equal (_p_P_prj_b (abst_diag (abst_voter vb va vc))))) zenon_H8)) (
zenon_notnot _ (refl_equal (_p_E_equal (_p_P_prj_b (abst_diag (
abst_voter vb va vc))) _p_E_partial_match))) zenon_H7)) zenon_H5
zenon_H6)) zenon_Hb)) _p_P_prj_b_is_snd_of_pair)) (fun zenon_H4=>(
zenon_G zenon_H4)) zenon_Hc)) _p_P_partial_match_is_valid))
__C_1_1_2_1_6_LEMMA)))).
Qed.

0
f74cf020e2af7cdd2efe235158110de3
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1814

%%begin-auto-proof
%%name: for_zenon___C_1_1_2_1_8_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H12". *)
              Parameter H12 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H121". *)
              Parameter H121 : Is_true ((_p_V_consistency_rule vb vc)).
              (* For method of Self used via "by property !vote_partial_c3". *)
              Parameter abst_vote_partial_c3 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v3))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_3
                                     _p_E_partial_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_1_8_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vc va vb))
                          (_p_P_constr _p_C_capt_3 _p_E_partial_match)))).
%%end-auto-proof
0
3291e1e6ef8c4406502268db6c5d1f34
proof
2586
Theorem for_zenon___C_1_1_2_1_8_LEMMA:(Is_true (basics._equal_ _ (
abst_diag (abst_voter vc va vb)) (_p_P_constr _p_C_capt_3
_p_E_partial_match))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule v1 v2)))
/\((Is_true (_p_V_consistency_rule v1 v3))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v3))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_3
_p_E_partial_match)))))))) vc (fun zenon_H19=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule vc v2)))
/\((Is_true (_p_V_consistency_rule vc v3))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter vc v2 v3)) v3))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter vc v2 v3)) (_p_P_constr _p_C_capt_3
_p_E_partial_match))))))) va (fun zenon_H18=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((~(Is_true (_p_V_consistency_rule vc va)))/\((Is_true (
_p_V_consistency_rule vc v3))/\(Is_true (_p_V_consistency_rule va v3))))
->((Is_true (basics._equal_ _ (abst_value (abst_voter vc va v3)) v3))/\(
Is_true (basics._equal_ _ (abst_diag (abst_voter vc va v3)) (
_p_P_constr _p_C_capt_3 _p_E_partial_match)))))) vb (fun zenon_H17=>(
zenon_imply _ _ (fun zenon_H16=>(zenon_notand _ _ (fun zenon_H15=>(
zenon_H15 (fun zenon_H11=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,((Is_true (_p_V_consistency_rule v1 v2))->(Is_true (
_p_V_consistency_rule v2 v1))))) vc (fun zenon_H14=>(zenon_all _p_V_T (
fun v2:_p_V_T=>((Is_true (_p_V_consistency_rule vc v2))->(Is_true (
_p_V_consistency_rule v2 vc)))) va (fun zenon_H13=>(zenon_imply _ _ (
fun zenon_H12=>(zenon_H12 zenon_H11)) (fun zenon_H10=>(H12 zenon_H10))
zenon_H13)) zenon_H14)) abst_consistency_rule_is_symmetric)))) (fun
zenon_Hf=>(zenon_notand _ _ (fun zenon_Hb=>(zenon_all _p_V_T (fun v1
:_p_V_T=>(forall v2:_p_V_T,((Is_true (_p_V_consistency_rule v1 v2))->(
Is_true (_p_V_consistency_rule v2 v1))))) vb (fun zenon_He=>(zenon_all
_p_V_T (fun v2:_p_V_T=>((Is_true (_p_V_consistency_rule vb v2))->(
Is_true (_p_V_consistency_rule v2 vb)))) vc (fun zenon_Hd=>(zenon_imply
_ _ (fun zenon_Hc=>(zenon_Hc H121)) (fun zenon_Ha=>(zenon_Hb zenon_Ha))
zenon_Hd)) zenon_He)) abst_consistency_rule_is_symmetric)) (fun
zenon_H9=>(zenon_H9 H1)) zenon_Hf)) zenon_H16)) (fun zenon_H8=>(
zenon_and _ _ (fun zenon_H7 zenon_H6=>(zenon_G zenon_H6)) zenon_H8))
zenon_H17)) zenon_H18)) zenon_H19)) abst_vote_partial_c3)))).
Qed.

0
872e4133ff2962c98cb4585ac0adfc7d
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1232

%%begin-auto-proof
%%name: for_zenon___C_1_1_2_1_9_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>8. *)
              Parameter __C_1_1_2_1_8_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vc va vb))
                             (_p_P_constr _p_C_capt_3 _p_E_partial_match))))).
              (* For species parameter method used via "by property vote#P!partial_match_is_valid". *)
              Parameter _p_P_partial_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_partial_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_1_9_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb))))).
%%end-auto-proof
0
609c3f885823777b8c2e795c2de3bf50
proof
1971
Theorem for_zenon___C_1_1_2_1_9_LEMMA:(Is_true (_p_P_valid (abst_diag (
abst_voter vc va vb)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(coq_builtins.zenon_syntactic_equal
zenon_focal_eqdec _ (abst_diag (abst_voter vc va vb)) (_p_P_constr
_p_C_capt_3 _p_E_partial_match) (fun zenon_H9=>(zenon_all _p_P_T (fun x
:_p_P_T=>((Is_true (_p_E_equal (_p_P_prj_b x) _p_E_partial_match))->(
Is_true (_p_P_valid x)))) (abst_diag (abst_voter vc va vb)) (fun
zenon_Hc=>(zenon_imply _ _ (fun zenon_H5=>(zenon_all _p_C_T (fun n1
:_p_C_T=>(forall n2:_p_E_T,(Is_true (_p_E_equal (_p_P_prj_b (
_p_P_constr n1 n2)) n2)))) _p_C_capt_3 (fun zenon_Hb=>(zenon_all _p_E_T
(fun n2:_p_E_T=>(Is_true (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_3 n2)) n2))) _p_E_partial_match (fun zenon_H6=>(zenon_subst _
(fun zenon_Vf=>(Is_true zenon_Vf)) (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_3 _p_E_partial_match)) _p_E_partial_match) (_p_E_equal (
_p_P_prj_b (abst_diag (abst_voter vc va vb))) _p_E_partial_match) (fun
zenon_H7=>(zenon_subst _ (fun zenon_Vg=>(~((_p_E_equal zenon_Vg
_p_E_partial_match) = (_p_E_equal (_p_P_prj_b (abst_diag (abst_voter vc
va vb))) _p_E_partial_match)))) (_p_P_prj_b (_p_P_constr _p_C_capt_3
_p_E_partial_match)) (_p_P_prj_b (abst_diag (abst_voter vc va vb))) (
fun zenon_H8=>(zenon_subst _ (fun zenon_Vh=>(~((_p_P_prj_b zenon_Vh) = (
_p_P_prj_b (abst_diag (abst_voter vc va vb)))))) (_p_P_constr
_p_C_capt_3 _p_E_partial_match) (abst_diag (abst_voter vc va vb)) (fun
zenon_Ha=>(zenon_eqsym _ (abst_diag (abst_voter vc va vb)) (_p_P_constr
_p_C_capt_3 _p_E_partial_match) zenon_H9 zenon_Ha)) (zenon_notnot _ (
refl_equal (_p_P_prj_b (abst_diag (abst_voter vc va vb))))) zenon_H8)) (
zenon_notnot _ (refl_equal (_p_E_equal (_p_P_prj_b (abst_diag (
abst_voter vc va vb))) _p_E_partial_match))) zenon_H7)) zenon_H5
zenon_H6)) zenon_Hb)) _p_P_prj_b_is_snd_of_pair)) (fun zenon_H4=>(
zenon_G zenon_H4)) zenon_Hc)) _p_P_partial_match_is_valid))
__C_1_1_2_1_8_LEMMA)))).
Qed.

0
bf7ecf8c1cb0a7a238de69fa966e1b89
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
2263

%%begin-auto-proof
%%name: for_zenon___C_1_1_2_1_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For step <5>1. *)
            Parameter __C_1_1_2_1_1_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter va vb vc)) vb)))).
            (* For step <5>2. *)
            Parameter __C_1_1_2_1_2_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter vb va vc)) vb)))).
            (* For step <5>3. *)
            Parameter __C_1_1_2_1_3_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter vc va vb)) vb)))).
            (* For step <5>5. *)
            Parameter __C_1_1_2_1_5_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc)))))).
            (* For step <5>7. *)
            Parameter __C_1_1_2_1_7_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc)))))).
            (* For step <5>9. *)
            Parameter __C_1_1_2_1_9_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb)))))).
            (* For species parameter method used via "by property vote#V!consistency_rule_reflexive". *)
            Parameter _p_V_consistency_rule_reflexive :
              forall a : _p_V_T, Is_true ((_p_V_consistency_rule a a)).
            (* For method of Self used via "by definition of !compatible". *)
            Definition abst_compatible (s1 : (Datatypes.prod _p_V_T _p_P_T))
              (s2 : (Datatypes.prod _p_V_T _p_P_T)) : coq_builtins.prop__t :=
              (Is_true ((_p_P_valid (abst_diag s1))) /\
                 Is_true ((_p_P_valid (abst_diag s2))) /\
                   Is_true ((_p_V_consistency_rule (abst_value s1)
                              (abst_value s2)))) \/
                (~Is_true (((_p_P_valid (abst_diag s1)))) /\
                   ~Is_true (((_p_P_valid (abst_diag s2))))).
            (* Theorem's body. *)
            Theorem for_zenon___C_1_1_2_1_LEMMA :
            ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
               (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
%%end-auto-proof
0
09a4d457d94c4909ef2eabb8aceb6db8
proof
3530
Theorem for_zenon___C_1_1_2_1_LEMMA:((abst_compatible (abst_voter va vb
vc) (abst_voter vb va vc))/\(abst_compatible (abst_voter va vb vc) (
abst_voter vc va vb))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notand _ _ (fun zenon_H20=>(let zenon_H1f
:=zenon_H20 in (zenon_notor _ _ (fun zenon_H1d zenon_H1e=>(zenon_notand
_ _ (fun zenon_H11=>(zenon_H11 __C_1_1_2_1_5_LEMMA)) (fun zenon_H1c=>(
zenon_notand _ _ (fun zenon_H1b=>(zenon_H1b __C_1_1_2_1_7_LEMMA)) (fun
zenon_H16=>(zenon_all _p_V_T (fun a:_p_V_T=>(Is_true (
_p_V_consistency_rule a a))) (abst_value (abst_voter va vb vc)) (fun
zenon_H9=>(zenon_subst _ (fun zenon_Vi=>(Is_true zenon_Vi)) (
_p_V_consistency_rule (abst_value (abst_voter va vb vc)) (abst_value (
abst_voter va vb vc))) (_p_V_consistency_rule (abst_value (abst_voter
va vb vc)) (abst_value (abst_voter vb va vc))) (fun zenon_H17=>(
zenon_subst _ (fun zenon_Vj=>(~((_p_V_consistency_rule (abst_value (
abst_voter va vb vc)) zenon_Vj) = (_p_V_consistency_rule (abst_value (
abst_voter va vb vc)) (abst_value (abst_voter vb va vc)))))) (
abst_value (abst_voter va vb vc)) (abst_value (abst_voter vb va vc)) (
fun zenon_H18=>(coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ (
abst_value (abst_voter va vb vc)) vb (fun zenon_Hc=>(
coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ (abst_value (
abst_voter vb va vc)) vb (fun zenon_H19=>(zenon_subst _ (fun zenon_Vk=>(
(abst_value (abst_voter va vb vc)) = zenon_Vk)) vb (abst_value (
abst_voter vb va vc)) (fun zenon_H1a=>(zenon_eqsym _ (abst_value (
abst_voter vb va vc)) vb zenon_H19 zenon_H1a)) zenon_H18 zenon_Hc))
__C_1_1_2_1_2_LEMMA)) __C_1_1_2_1_1_LEMMA)) (zenon_notnot _ (refl_equal
(_p_V_consistency_rule (abst_value (abst_voter va vb vc)) (abst_value (
abst_voter vb va vc))))) zenon_H17)) zenon_H16 zenon_H9))
_p_V_consistency_rule_reflexive)) zenon_H1c)) zenon_H1d)) zenon_H1f))) (
fun zenon_H15=>(let zenon_H14:=zenon_H15 in (zenon_notor _ _ (fun
zenon_H12 zenon_H13=>(zenon_notand _ _ (fun zenon_H11=>(zenon_H11
__C_1_1_2_1_5_LEMMA)) (fun zenon_H10=>(zenon_notand _ _ (fun zenon_Hf=>(
zenon_Hf __C_1_1_2_1_9_LEMMA)) (fun zenon_H8=>(zenon_all _p_V_T (fun a
:_p_V_T=>(Is_true (_p_V_consistency_rule a a))) (abst_value (abst_voter
va vb vc)) (fun zenon_H9=>(zenon_subst _ (fun zenon_Vf=>(Is_true
zenon_Vf)) (_p_V_consistency_rule (abst_value (abst_voter va vb vc)) (
abst_value (abst_voter va vb vc))) (_p_V_consistency_rule (abst_value (
abst_voter va vb vc)) (abst_value (abst_voter vc va vb))) (fun
zenon_Ha=>(zenon_subst _ (fun zenon_Vg=>(~((_p_V_consistency_rule (
abst_value (abst_voter va vb vc)) zenon_Vg) = (_p_V_consistency_rule (
abst_value (abst_voter va vb vc)) (abst_value (abst_voter vc va vb))))))
 (abst_value (abst_voter va vb vc)) (abst_value (abst_voter vc va vb)) (
fun zenon_Hb=>(coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ (
abst_value (abst_voter va vb vc)) vb (fun zenon_Hc=>(
coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ (abst_value (
abst_voter vc va vb)) vb (fun zenon_Hd=>(zenon_subst _ (fun zenon_Vh=>((
abst_value (abst_voter va vb vc)) = zenon_Vh)) vb (abst_value (
abst_voter vc va vb)) (fun zenon_He=>(zenon_eqsym _ (abst_value (
abst_voter vc va vb)) vb zenon_Hd zenon_He)) zenon_Hb zenon_Hc))
__C_1_1_2_1_3_LEMMA)) __C_1_1_2_1_1_LEMMA)) (zenon_notnot _ (refl_equal
(_p_V_consistency_rule (abst_value (abst_voter va vb vc)) (abst_value (
abst_voter vc va vb))))) zenon_Ha)) zenon_H8 zenon_H9))
_p_V_consistency_rule_reflexive)) zenon_H10)) zenon_H12)) zenon_H14)))
zenon_G)))).
Qed.

0
558d50c7dd40295d9b3b91d51182f61a
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1734

%%begin-auto-proof
%%name: for_zenon___C_1_1_2_2_1_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H12". *)
              Parameter H12 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H122". *)
              Parameter H122 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_match_c3". *)
              Parameter abst_vote_match_c3 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_3 _p_E_range_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_2_1_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter va vb vc)) va))).
%%end-auto-proof
0
96e415ca9c914e31cb81482387fc12d7
proof
1715
Theorem for_zenon___C_1_1_2_2_1_LEMMA:(Is_true (basics._equal_ _ (
abst_value (abst_voter va vb vc)) va)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule v1 v2))/\((~
(Is_true (_p_V_consistency_rule v1 v3)))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v1))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_3
_p_E_range_match)))))))) va (fun zenon_H12=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule va v2))/\((
~(Is_true (_p_V_consistency_rule va v3)))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter va v2 v3)) va))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter va v2 v3)) (_p_P_constr _p_C_capt_3
_p_E_range_match))))))) vb (fun zenon_H11=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((Is_true (_p_V_consistency_rule va vb))/\((~(Is_true (
_p_V_consistency_rule va v3)))/\(~(Is_true (_p_V_consistency_rule vb v3)
))))->((Is_true (basics._equal_ _ (abst_value (abst_voter va vb v3)) va)
)/\(Is_true (basics._equal_ _ (abst_diag (abst_voter va vb v3)) (
_p_P_constr _p_C_capt_3 _p_E_range_match)))))) vc (fun zenon_H10=>(
zenon_imply _ _ (fun zenon_Hf=>(zenon_notand _ _ (fun zenon_He=>(
zenon_He H1)) (fun zenon_Hd=>(zenon_notand _ _ (fun zenon_Hc=>(zenon_Hc
(fun zenon_Hb=>(H12 zenon_Hb)))) (fun zenon_Ha=>(zenon_Ha (fun
zenon_H9=>(H122 zenon_H9)))) zenon_Hd)) zenon_Hf)) (fun zenon_H8=>(
zenon_and _ _ (fun zenon_H6 zenon_H7=>(zenon_G zenon_H6)) zenon_H8))
zenon_H10)) zenon_H11)) zenon_H12)) abst_vote_match_c3)))).
Qed.

0
0004c9831b8ec34b63a3c0bdef9d5609
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1734

%%begin-auto-proof
%%name: for_zenon___C_1_1_2_2_2_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H12". *)
              Parameter H12 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H122". *)
              Parameter H122 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_match_c3". *)
              Parameter abst_vote_match_c3 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_3 _p_E_range_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_2_2_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter vb va vc)) vb))).
%%end-auto-proof
0
361e7ccf9c36c7d2d10194a3cecc4b6f
proof
2147
Theorem for_zenon___C_1_1_2_2_2_LEMMA:(Is_true (basics._equal_ _ (
abst_value (abst_voter vb va vc)) vb)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule v1 v2))/\((~
(Is_true (_p_V_consistency_rule v1 v3)))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v1))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_3
_p_E_range_match)))))))) vb (fun zenon_H16=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule vb v2))/\((
~(Is_true (_p_V_consistency_rule vb v3)))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter vb v2 v3)) vb))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter vb v2 v3)) (_p_P_constr _p_C_capt_3
_p_E_range_match))))))) va (fun zenon_H15=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((Is_true (_p_V_consistency_rule vb va))/\((~(Is_true (
_p_V_consistency_rule vb v3)))/\(~(Is_true (_p_V_consistency_rule va v3)
))))->((Is_true (basics._equal_ _ (abst_value (abst_voter vb va v3)) vb)
)/\(Is_true (basics._equal_ _ (abst_diag (abst_voter vb va v3)) (
_p_P_constr _p_C_capt_3 _p_E_range_match)))))) vc (fun zenon_H14=>(
zenon_imply _ _ (fun zenon_H13=>(zenon_notand _ _ (fun zenon_Hf=>(
zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2:_p_V_T,((Is_true (
_p_V_consistency_rule v1 v2))->(Is_true (_p_V_consistency_rule v2 v1))))
) va (fun zenon_H12=>(zenon_all _p_V_T (fun v2:_p_V_T=>((Is_true (
_p_V_consistency_rule va v2))->(Is_true (_p_V_consistency_rule v2 va))))
 vb (fun zenon_H11=>(zenon_imply _ _ (fun zenon_H10=>(zenon_H10 H1)) (
fun zenon_He=>(zenon_Hf zenon_He)) zenon_H11)) zenon_H12))
abst_consistency_rule_is_symmetric)) (fun zenon_Hd=>(zenon_notand _ _ (
fun zenon_Hc=>(zenon_Hc (fun zenon_Hb=>(H122 zenon_Hb)))) (fun
zenon_Ha=>(zenon_Ha (fun zenon_H9=>(H12 zenon_H9)))) zenon_Hd))
zenon_H13)) (fun zenon_H8=>(zenon_and _ _ (fun zenon_H6 zenon_H7=>(
zenon_G zenon_H6)) zenon_H8)) zenon_H14)) zenon_H15)) zenon_H16))
abst_vote_match_c3)))).
Qed.

0
e41161bbba8ef9bae3aea0092ad1efcb
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1734

%%begin-auto-proof
%%name: for_zenon___C_1_1_2_2_3_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H12". *)
              Parameter H12 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H122". *)
              Parameter H122 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_match_c1". *)
              Parameter abst_vote_match_c1 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v2))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1 _p_E_range_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_2_3_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter vc va vb)) va))).
%%end-auto-proof
0
7980c1aca5e0a6158650b24fe86c217f
proof
2574
Theorem for_zenon___C_1_1_2_2_3_LEMMA:(Is_true (basics._equal_ _ (
abst_value (abst_voter vc va vb)) va)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule v1 v2)))
/\((~(Is_true (_p_V_consistency_rule v1 v3)))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v2))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_range_match)))))))) vc (fun zenon_H19=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule vc v2)))
/\((~(Is_true (_p_V_consistency_rule vc v3)))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter vc v2 v3)) v2))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter vc v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_range_match))))))) va (fun zenon_H18=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((~(Is_true (_p_V_consistency_rule vc va)))/\((~(Is_true (
_p_V_consistency_rule vc v3)))/\(Is_true (_p_V_consistency_rule va v3)))
)->((Is_true (basics._equal_ _ (abst_value (abst_voter vc va v3)) va))
/\(Is_true (basics._equal_ _ (abst_diag (abst_voter vc va v3)) (
_p_P_constr _p_C_capt_1 _p_E_range_match)))))) vb (fun zenon_H17=>(
zenon_imply _ _ (fun zenon_H16=>(zenon_notand _ _ (fun zenon_H15=>(
zenon_H15 (fun zenon_H12=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,((Is_true (_p_V_consistency_rule v1 v2))->(Is_true (
_p_V_consistency_rule v2 v1))))) vc (fun zenon_He=>(zenon_all _p_V_T (
fun v2:_p_V_T=>((Is_true (_p_V_consistency_rule vc v2))->(Is_true (
_p_V_consistency_rule v2 vc)))) va (fun zenon_H14=>(zenon_imply _ _ (
fun zenon_H13=>(zenon_H13 zenon_H12)) (fun zenon_H11=>(H12 zenon_H11))
zenon_H14)) zenon_He)) abst_consistency_rule_is_symmetric)))) (fun
zenon_H10=>(zenon_notand _ _ (fun zenon_Hf=>(zenon_Hf (fun zenon_Hb=>(
zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2:_p_V_T,((Is_true (
_p_V_consistency_rule v1 v2))->(Is_true (_p_V_consistency_rule v2 v1))))
) vc (fun zenon_He=>(zenon_all _p_V_T (fun v2:_p_V_T=>((Is_true (
_p_V_consistency_rule vc v2))->(Is_true (_p_V_consistency_rule v2 vc))))
 vb (fun zenon_Hd=>(zenon_imply _ _ (fun zenon_Hc=>(zenon_Hc zenon_Hb))
(fun zenon_Ha=>(H122 zenon_Ha)) zenon_Hd)) zenon_He))
abst_consistency_rule_is_symmetric)))) (fun zenon_H9=>(zenon_H9 H1))
zenon_H10)) zenon_H16)) (fun zenon_H8=>(zenon_and _ _ (fun zenon_H6
zenon_H7=>(zenon_G zenon_H6)) zenon_H8)) zenon_H17)) zenon_H18))
zenon_H19)) abst_vote_match_c1)))).
Qed.

0
30c8c79e249636c17ca8c49cf5931f54
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1773

%%begin-auto-proof
%%name: for_zenon___C_1_1_2_2_4_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H12". *)
              Parameter H12 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H122". *)
              Parameter H122 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_match_c3". *)
              Parameter abst_vote_match_c3 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_3 _p_E_range_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_2_4_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter va vb vc))
                          (_p_P_constr _p_C_capt_3 _p_E_range_match)))).
%%end-auto-proof
0
518af374f496543074155c2e9347d5d8
proof
1754
Theorem for_zenon___C_1_1_2_2_4_LEMMA:(Is_true (basics._equal_ _ (
abst_diag (abst_voter va vb vc)) (_p_P_constr _p_C_capt_3
_p_E_range_match))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule v1 v2))/\((~
(Is_true (_p_V_consistency_rule v1 v3)))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v1))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_3
_p_E_range_match)))))))) va (fun zenon_H12=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule va v2))/\((
~(Is_true (_p_V_consistency_rule va v3)))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter va v2 v3)) va))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter va v2 v3)) (_p_P_constr _p_C_capt_3
_p_E_range_match))))))) vb (fun zenon_H11=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((Is_true (_p_V_consistency_rule va vb))/\((~(Is_true (
_p_V_consistency_rule va v3)))/\(~(Is_true (_p_V_consistency_rule vb v3)
))))->((Is_true (basics._equal_ _ (abst_value (abst_voter va vb v3)) va)
)/\(Is_true (basics._equal_ _ (abst_diag (abst_voter va vb v3)) (
_p_P_constr _p_C_capt_3 _p_E_range_match)))))) vc (fun zenon_H10=>(
zenon_imply _ _ (fun zenon_Hf=>(zenon_notand _ _ (fun zenon_He=>(
zenon_He H1)) (fun zenon_Hd=>(zenon_notand _ _ (fun zenon_Hc=>(zenon_Hc
(fun zenon_Hb=>(H12 zenon_Hb)))) (fun zenon_Ha=>(zenon_Ha (fun
zenon_H9=>(H122 zenon_H9)))) zenon_Hd)) zenon_Hf)) (fun zenon_H8=>(
zenon_and _ _ (fun zenon_H7 zenon_H6=>(zenon_G zenon_H6)) zenon_H8))
zenon_H10)) zenon_H11)) zenon_H12)) abst_vote_match_c3)))).
Qed.

0
ab79d0e22817b0016fa8a2fa28ea1ebf
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1224

%%begin-auto-proof
%%name: for_zenon___C_1_1_2_2_5_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>4. *)
              Parameter __C_1_1_2_2_4_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter va vb vc))
                             (_p_P_constr _p_C_capt_3 _p_E_range_match))))).
              (* For species parameter method used via "by property vote#P!range_match_is_valid". *)
              Parameter _p_P_range_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_range_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_2_5_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))).
%%end-auto-proof
0
111e714a092ad67432f20a7ab96012b9
proof
1946
Theorem for_zenon___C_1_1_2_2_5_LEMMA:(Is_true (_p_P_valid (abst_diag (
abst_voter va vb vc)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(coq_builtins.zenon_syntactic_equal
zenon_focal_eqdec _ (abst_diag (abst_voter va vb vc)) (_p_P_constr
_p_C_capt_3 _p_E_range_match) (fun zenon_H9=>(zenon_all _p_P_T (fun x
:_p_P_T=>((Is_true (_p_E_equal (_p_P_prj_b x) _p_E_range_match))->(
Is_true (_p_P_valid x)))) (abst_diag (abst_voter va vb vc)) (fun
zenon_Hc=>(zenon_imply _ _ (fun zenon_H5=>(zenon_all _p_C_T (fun n1
:_p_C_T=>(forall n2:_p_E_T,(Is_true (_p_E_equal (_p_P_prj_b (
_p_P_constr n1 n2)) n2)))) _p_C_capt_3 (fun zenon_Hb=>(zenon_all _p_E_T
(fun n2:_p_E_T=>(Is_true (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_3 n2)) n2))) _p_E_range_match (fun zenon_H6=>(zenon_subst _ (
fun zenon_Vf=>(Is_true zenon_Vf)) (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_3 _p_E_range_match)) _p_E_range_match) (_p_E_equal (
_p_P_prj_b (abst_diag (abst_voter va vb vc))) _p_E_range_match) (fun
zenon_H7=>(zenon_subst _ (fun zenon_Vg=>(~((_p_E_equal zenon_Vg
_p_E_range_match) = (_p_E_equal (_p_P_prj_b (abst_diag (abst_voter va
vb vc))) _p_E_range_match)))) (_p_P_prj_b (_p_P_constr _p_C_capt_3
_p_E_range_match)) (_p_P_prj_b (abst_diag (abst_voter va vb vc))) (fun
zenon_H8=>(zenon_subst _ (fun zenon_Vh=>(~((_p_P_prj_b zenon_Vh) = (
_p_P_prj_b (abst_diag (abst_voter va vb vc)))))) (_p_P_constr
_p_C_capt_3 _p_E_range_match) (abst_diag (abst_voter va vb vc)) (fun
zenon_Ha=>(zenon_eqsym _ (abst_diag (abst_voter va vb vc)) (_p_P_constr
_p_C_capt_3 _p_E_range_match) zenon_H9 zenon_Ha)) (zenon_notnot _ (
refl_equal (_p_P_prj_b (abst_diag (abst_voter va vb vc))))) zenon_H8)) (
zenon_notnot _ (refl_equal (_p_E_equal (_p_P_prj_b (abst_diag (
abst_voter va vb vc))) _p_E_range_match))) zenon_H7)) zenon_H5 zenon_H6)
) zenon_Hb)) _p_P_prj_b_is_snd_of_pair)) (fun zenon_H4=>(zenon_G
zenon_H4)) zenon_Hc)) _p_P_range_match_is_valid)) __C_1_1_2_2_4_LEMMA)))
).
Qed.

0
0753280d71e9928a2008d1604833d02c
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1773

%%begin-auto-proof
%%name: for_zenon___C_1_1_2_2_6_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H12". *)
              Parameter H12 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H122". *)
              Parameter H122 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_match_c3". *)
              Parameter abst_vote_match_c3 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_3 _p_E_range_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_2_6_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vb va vc))
                          (_p_P_constr _p_C_capt_3 _p_E_range_match)))).
%%end-auto-proof
0
16ad3a531ed37e5311ac17d483bbfaa8
proof
2186
Theorem for_zenon___C_1_1_2_2_6_LEMMA:(Is_true (basics._equal_ _ (
abst_diag (abst_voter vb va vc)) (_p_P_constr _p_C_capt_3
_p_E_range_match))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule v1 v2))/\((~
(Is_true (_p_V_consistency_rule v1 v3)))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v1))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_3
_p_E_range_match)))))))) vb (fun zenon_H16=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule vb v2))/\((
~(Is_true (_p_V_consistency_rule vb v3)))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter vb v2 v3)) vb))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter vb v2 v3)) (_p_P_constr _p_C_capt_3
_p_E_range_match))))))) va (fun zenon_H15=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((Is_true (_p_V_consistency_rule vb va))/\((~(Is_true (
_p_V_consistency_rule vb v3)))/\(~(Is_true (_p_V_consistency_rule va v3)
))))->((Is_true (basics._equal_ _ (abst_value (abst_voter vb va v3)) vb)
)/\(Is_true (basics._equal_ _ (abst_diag (abst_voter vb va v3)) (
_p_P_constr _p_C_capt_3 _p_E_range_match)))))) vc (fun zenon_H14=>(
zenon_imply _ _ (fun zenon_H13=>(zenon_notand _ _ (fun zenon_Hf=>(
zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2:_p_V_T,((Is_true (
_p_V_consistency_rule v1 v2))->(Is_true (_p_V_consistency_rule v2 v1))))
) va (fun zenon_H12=>(zenon_all _p_V_T (fun v2:_p_V_T=>((Is_true (
_p_V_consistency_rule va v2))->(Is_true (_p_V_consistency_rule v2 va))))
 vb (fun zenon_H11=>(zenon_imply _ _ (fun zenon_H10=>(zenon_H10 H1)) (
fun zenon_He=>(zenon_Hf zenon_He)) zenon_H11)) zenon_H12))
abst_consistency_rule_is_symmetric)) (fun zenon_Hd=>(zenon_notand _ _ (
fun zenon_Hc=>(zenon_Hc (fun zenon_Hb=>(H122 zenon_Hb)))) (fun
zenon_Ha=>(zenon_Ha (fun zenon_H9=>(H12 zenon_H9)))) zenon_Hd))
zenon_H13)) (fun zenon_H8=>(zenon_and _ _ (fun zenon_H7 zenon_H6=>(
zenon_G zenon_H6)) zenon_H8)) zenon_H14)) zenon_H15)) zenon_H16))
abst_vote_match_c3)))).
Qed.

0
1d2a269480ca5f9f0803b5c92d7df95f
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1224

%%begin-auto-proof
%%name: for_zenon___C_1_1_2_2_7_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>6. *)
              Parameter __C_1_1_2_2_6_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vb va vc))
                             (_p_P_constr _p_C_capt_3 _p_E_range_match))))).
              (* For species parameter method used via "by property vote#P!range_match_is_valid". *)
              Parameter _p_P_range_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_range_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_2_7_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc))))).
%%end-auto-proof
0
e2cc4b9e000d90d12015f83c42427b52
proof
1946
Theorem for_zenon___C_1_1_2_2_7_LEMMA:(Is_true (_p_P_valid (abst_diag (
abst_voter vb va vc)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(coq_builtins.zenon_syntactic_equal
zenon_focal_eqdec _ (abst_diag (abst_voter vb va vc)) (_p_P_constr
_p_C_capt_3 _p_E_range_match) (fun zenon_H9=>(zenon_all _p_P_T (fun x
:_p_P_T=>((Is_true (_p_E_equal (_p_P_prj_b x) _p_E_range_match))->(
Is_true (_p_P_valid x)))) (abst_diag (abst_voter vb va vc)) (fun
zenon_Hc=>(zenon_imply _ _ (fun zenon_H5=>(zenon_all _p_C_T (fun n1
:_p_C_T=>(forall n2:_p_E_T,(Is_true (_p_E_equal (_p_P_prj_b (
_p_P_constr n1 n2)) n2)))) _p_C_capt_3 (fun zenon_Hb=>(zenon_all _p_E_T
(fun n2:_p_E_T=>(Is_true (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_3 n2)) n2))) _p_E_range_match (fun zenon_H6=>(zenon_subst _ (
fun zenon_Vf=>(Is_true zenon_Vf)) (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_3 _p_E_range_match)) _p_E_range_match) (_p_E_equal (
_p_P_prj_b (abst_diag (abst_voter vb va vc))) _p_E_range_match) (fun
zenon_H7=>(zenon_subst _ (fun zenon_Vg=>(~((_p_E_equal zenon_Vg
_p_E_range_match) = (_p_E_equal (_p_P_prj_b (abst_diag (abst_voter vb
va vc))) _p_E_range_match)))) (_p_P_prj_b (_p_P_constr _p_C_capt_3
_p_E_range_match)) (_p_P_prj_b (abst_diag (abst_voter vb va vc))) (fun
zenon_H8=>(zenon_subst _ (fun zenon_Vh=>(~((_p_P_prj_b zenon_Vh) = (
_p_P_prj_b (abst_diag (abst_voter vb va vc)))))) (_p_P_constr
_p_C_capt_3 _p_E_range_match) (abst_diag (abst_voter vb va vc)) (fun
zenon_Ha=>(zenon_eqsym _ (abst_diag (abst_voter vb va vc)) (_p_P_constr
_p_C_capt_3 _p_E_range_match) zenon_H9 zenon_Ha)) (zenon_notnot _ (
refl_equal (_p_P_prj_b (abst_diag (abst_voter vb va vc))))) zenon_H8)) (
zenon_notnot _ (refl_equal (_p_E_equal (_p_P_prj_b (abst_diag (
abst_voter vb va vc))) _p_E_range_match))) zenon_H7)) zenon_H5 zenon_H6)
) zenon_Hb)) _p_P_prj_b_is_snd_of_pair)) (fun zenon_H4=>(zenon_G
zenon_H4)) zenon_Hc)) _p_P_range_match_is_valid)) __C_1_1_2_2_6_LEMMA)))
).
Qed.

0
c4126f0b7fe98d36bb01a1dd4125ab56
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1773

%%begin-auto-proof
%%name: for_zenon___C_1_1_2_2_8_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H12". *)
              Parameter H12 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H122". *)
              Parameter H122 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_match_c1". *)
              Parameter abst_vote_match_c1 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v2))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1 _p_E_range_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_2_8_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vc va vb))
                          (_p_P_constr _p_C_capt_1 _p_E_range_match)))).
%%end-auto-proof
0
a36ed60fe7e9de085b571ff73fdcb78b
proof
2613
Theorem for_zenon___C_1_1_2_2_8_LEMMA:(Is_true (basics._equal_ _ (
abst_diag (abst_voter vc va vb)) (_p_P_constr _p_C_capt_1
_p_E_range_match))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule v1 v2)))
/\((~(Is_true (_p_V_consistency_rule v1 v3)))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v2))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_range_match)))))))) vc (fun zenon_H19=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule vc v2)))
/\((~(Is_true (_p_V_consistency_rule vc v3)))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter vc v2 v3)) v2))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter vc v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_range_match))))))) va (fun zenon_H18=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((~(Is_true (_p_V_consistency_rule vc va)))/\((~(Is_true (
_p_V_consistency_rule vc v3)))/\(Is_true (_p_V_consistency_rule va v3)))
)->((Is_true (basics._equal_ _ (abst_value (abst_voter vc va v3)) va))
/\(Is_true (basics._equal_ _ (abst_diag (abst_voter vc va v3)) (
_p_P_constr _p_C_capt_1 _p_E_range_match)))))) vb (fun zenon_H17=>(
zenon_imply _ _ (fun zenon_H16=>(zenon_notand _ _ (fun zenon_H15=>(
zenon_H15 (fun zenon_H12=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,((Is_true (_p_V_consistency_rule v1 v2))->(Is_true (
_p_V_consistency_rule v2 v1))))) vc (fun zenon_He=>(zenon_all _p_V_T (
fun v2:_p_V_T=>((Is_true (_p_V_consistency_rule vc v2))->(Is_true (
_p_V_consistency_rule v2 vc)))) va (fun zenon_H14=>(zenon_imply _ _ (
fun zenon_H13=>(zenon_H13 zenon_H12)) (fun zenon_H11=>(H12 zenon_H11))
zenon_H14)) zenon_He)) abst_consistency_rule_is_symmetric)))) (fun
zenon_H10=>(zenon_notand _ _ (fun zenon_Hf=>(zenon_Hf (fun zenon_Hb=>(
zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2:_p_V_T,((Is_true (
_p_V_consistency_rule v1 v2))->(Is_true (_p_V_consistency_rule v2 v1))))
) vc (fun zenon_He=>(zenon_all _p_V_T (fun v2:_p_V_T=>((Is_true (
_p_V_consistency_rule vc v2))->(Is_true (_p_V_consistency_rule v2 vc))))
 vb (fun zenon_Hd=>(zenon_imply _ _ (fun zenon_Hc=>(zenon_Hc zenon_Hb))
(fun zenon_Ha=>(H122 zenon_Ha)) zenon_Hd)) zenon_He))
abst_consistency_rule_is_symmetric)))) (fun zenon_H9=>(zenon_H9 H1))
zenon_H10)) zenon_H16)) (fun zenon_H8=>(zenon_and _ _ (fun zenon_H7
zenon_H6=>(zenon_G zenon_H6)) zenon_H8)) zenon_H17)) zenon_H18))
zenon_H19)) abst_vote_match_c1)))).
Qed.

0
cdafa5ea714097e1aa21054f46124e41
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1224

%%begin-auto-proof
%%name: for_zenon___C_1_1_2_2_9_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>8. *)
              Parameter __C_1_1_2_2_8_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vc va vb))
                             (_p_P_constr _p_C_capt_1 _p_E_range_match))))).
              (* For species parameter method used via "by property vote#P!range_match_is_valid". *)
              Parameter _p_P_range_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_range_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_2_9_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb))))).
%%end-auto-proof
0
f235d44922d73fba43913aba0c804f6d
proof
1946
Theorem for_zenon___C_1_1_2_2_9_LEMMA:(Is_true (_p_P_valid (abst_diag (
abst_voter vc va vb)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(coq_builtins.zenon_syntactic_equal
zenon_focal_eqdec _ (abst_diag (abst_voter vc va vb)) (_p_P_constr
_p_C_capt_1 _p_E_range_match) (fun zenon_H9=>(zenon_all _p_P_T (fun x
:_p_P_T=>((Is_true (_p_E_equal (_p_P_prj_b x) _p_E_range_match))->(
Is_true (_p_P_valid x)))) (abst_diag (abst_voter vc va vb)) (fun
zenon_Hc=>(zenon_imply _ _ (fun zenon_H5=>(zenon_all _p_C_T (fun n1
:_p_C_T=>(forall n2:_p_E_T,(Is_true (_p_E_equal (_p_P_prj_b (
_p_P_constr n1 n2)) n2)))) _p_C_capt_1 (fun zenon_Hb=>(zenon_all _p_E_T
(fun n2:_p_E_T=>(Is_true (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_1 n2)) n2))) _p_E_range_match (fun zenon_H6=>(zenon_subst _ (
fun zenon_Vf=>(Is_true zenon_Vf)) (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_1 _p_E_range_match)) _p_E_range_match) (_p_E_equal (
_p_P_prj_b (abst_diag (abst_voter vc va vb))) _p_E_range_match) (fun
zenon_H7=>(zenon_subst _ (fun zenon_Vg=>(~((_p_E_equal zenon_Vg
_p_E_range_match) = (_p_E_equal (_p_P_prj_b (abst_diag (abst_voter vc
va vb))) _p_E_range_match)))) (_p_P_prj_b (_p_P_constr _p_C_capt_1
_p_E_range_match)) (_p_P_prj_b (abst_diag (abst_voter vc va vb))) (fun
zenon_H8=>(zenon_subst _ (fun zenon_Vh=>(~((_p_P_prj_b zenon_Vh) = (
_p_P_prj_b (abst_diag (abst_voter vc va vb)))))) (_p_P_constr
_p_C_capt_1 _p_E_range_match) (abst_diag (abst_voter vc va vb)) (fun
zenon_Ha=>(zenon_eqsym _ (abst_diag (abst_voter vc va vb)) (_p_P_constr
_p_C_capt_1 _p_E_range_match) zenon_H9 zenon_Ha)) (zenon_notnot _ (
refl_equal (_p_P_prj_b (abst_diag (abst_voter vc va vb))))) zenon_H8)) (
zenon_notnot _ (refl_equal (_p_E_equal (_p_P_prj_b (abst_diag (
abst_voter vc va vb))) _p_E_range_match))) zenon_H7)) zenon_H5 zenon_H6)
) zenon_Hb)) _p_P_prj_b_is_snd_of_pair)) (fun zenon_H4=>(zenon_G
zenon_H4)) zenon_Hc)) _p_P_range_match_is_valid)) __C_1_1_2_2_8_LEMMA)))
).
Qed.

0
98940d03660f308bba7f4fc6670b8e3b
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
2370

%%begin-auto-proof
%%name: for_zenon___C_1_1_2_2_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For step <5>1. *)
            Parameter __C_1_1_2_2_1_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter va vb vc)) va)))).
            (* For step <5>2. *)
            Parameter __C_1_1_2_2_2_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter vb va vc)) vb)))).
            (* For step <5>3. *)
            Parameter __C_1_1_2_2_3_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter vc va vb)) va)))).
            (* For step <5>5. *)
            Parameter __C_1_1_2_2_5_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc)))))).
            (* For step <5>7. *)
            Parameter __C_1_1_2_2_7_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc)))))).
            (* For step <5>9. *)
            Parameter __C_1_1_2_2_9_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb)))))).
            (* For hypothesis "H1". *)
            Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
            (* For species parameter method used via "by property vote#V!consistency_rule_reflexive". *)
            Parameter _p_V_consistency_rule_reflexive :
              forall a : _p_V_T, Is_true ((_p_V_consistency_rule a a)).
            (* For method of Self used via "by definition of !compatible". *)
            Definition abst_compatible (s1 : (Datatypes.prod _p_V_T _p_P_T))
              (s2 : (Datatypes.prod _p_V_T _p_P_T)) : coq_builtins.prop__t :=
              (Is_true ((_p_P_valid (abst_diag s1))) /\
                 Is_true ((_p_P_valid (abst_diag s2))) /\
                   Is_true ((_p_V_consistency_rule (abst_value s1)
                              (abst_value s2)))) \/
                (~Is_true (((_p_P_valid (abst_diag s1)))) /\
                   ~Is_true (((_p_P_valid (abst_diag s2))))).
            (* Theorem's body. *)
            Theorem for_zenon___C_1_1_2_2_LEMMA :
            ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
               (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
%%end-auto-proof
0
a4305e267686befc6ef3562a16ecd1c3
proof
3415
Theorem for_zenon___C_1_1_2_2_LEMMA:((abst_compatible (abst_voter va vb
vc) (abst_voter vb va vc))/\(abst_compatible (abst_voter va vb vc) (
abst_voter vc va vb))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notand _ _ (fun zenon_H21=>(let zenon_H20
:=zenon_H21 in (zenon_notor _ _ (fun zenon_H1e zenon_H1f=>(zenon_notand
_ _ (fun zenon_H12=>(zenon_H12 __C_1_1_2_2_5_LEMMA)) (fun zenon_H1d=>(
zenon_notand _ _ (fun zenon_H1c=>(zenon_H1c __C_1_1_2_2_7_LEMMA)) (fun
zenon_H17=>(coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ (
abst_value (abst_voter va vb vc)) va (fun zenon_Hd=>(
coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ (abst_value (
abst_voter vb va vc)) vb (fun zenon_H19=>(zenon_subst _ (fun zenon_Vi=>(
Is_true zenon_Vi)) (_p_V_consistency_rule va vb) (_p_V_consistency_rule
(abst_value (abst_voter va vb vc)) (abst_value (abst_voter vb va vc))) (
fun zenon_H18=>(zenon_subst _ (fun zenon_Vk=>(~((_p_V_consistency_rule
zenon_Vk vb) = (_p_V_consistency_rule (abst_value (abst_voter va vb vc))
 (abst_value (abst_voter vb va vc)))))) va (abst_value (abst_voter va
vb vc)) (fun zenon_H1b=>(zenon_eqsym _ (abst_value (abst_voter va vb vc)
) va zenon_Hd zenon_H1b)) (zenon_subst _ (fun zenon_Vj=>(~((
_p_V_consistency_rule (abst_value (abst_voter va vb vc)) zenon_Vj) = (
_p_V_consistency_rule (abst_value (abst_voter va vb vc)) (abst_value (
abst_voter vb va vc)))))) vb (abst_value (abst_voter vb va vc)) (fun
zenon_H1a=>(zenon_eqsym _ (abst_value (abst_voter vb va vc)) vb
zenon_H19 zenon_H1a)) (zenon_notnot _ (refl_equal (
_p_V_consistency_rule (abst_value (abst_voter va vb vc)) (abst_value (
abst_voter vb va vc)))))) zenon_H18)) zenon_H17 H1))
__C_1_1_2_2_2_LEMMA)) __C_1_1_2_2_1_LEMMA)) zenon_H1d)) zenon_H1e))
zenon_H20))) (fun zenon_H16=>(let zenon_H15:=zenon_H16 in (zenon_notor
_ _ (fun zenon_H13 zenon_H14=>(zenon_notand _ _ (fun zenon_H12=>(
zenon_H12 __C_1_1_2_2_5_LEMMA)) (fun zenon_H11=>(zenon_notand _ _ (fun
zenon_H10=>(zenon_H10 __C_1_1_2_2_9_LEMMA)) (fun zenon_H9=>(zenon_all
_p_V_T (fun a:_p_V_T=>(Is_true (_p_V_consistency_rule a a))) (
abst_value (abst_voter va vb vc)) (fun zenon_Ha=>(zenon_subst _ (fun
zenon_Vf=>(Is_true zenon_Vf)) (_p_V_consistency_rule (abst_value (
abst_voter va vb vc)) (abst_value (abst_voter va vb vc))) (
_p_V_consistency_rule (abst_value (abst_voter va vb vc)) (abst_value (
abst_voter vc va vb))) (fun zenon_Hb=>(zenon_subst _ (fun zenon_Vg=>(~((
_p_V_consistency_rule (abst_value (abst_voter va vb vc)) zenon_Vg) = (
_p_V_consistency_rule (abst_value (abst_voter va vb vc)) (abst_value (
abst_voter vc va vb)))))) (abst_value (abst_voter va vb vc)) (
abst_value (abst_voter vc va vb)) (fun zenon_Hc=>(
coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ (abst_value (
abst_voter va vb vc)) va (fun zenon_Hd=>(
coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ (abst_value (
abst_voter vc va vb)) va (fun zenon_He=>(zenon_subst _ (fun zenon_Vh=>((
abst_value (abst_voter va vb vc)) = zenon_Vh)) va (abst_value (
abst_voter vc va vb)) (fun zenon_Hf=>(zenon_eqsym _ (abst_value (
abst_voter vc va vb)) va zenon_He zenon_Hf)) zenon_Hc zenon_Hd))
__C_1_1_2_2_3_LEMMA)) __C_1_1_2_2_1_LEMMA)) (zenon_notnot _ (refl_equal
(_p_V_consistency_rule (abst_value (abst_voter va vb vc)) (abst_value (
abst_voter vc va vb))))) zenon_Hb)) zenon_H9 zenon_Ha))
_p_V_consistency_rule_reflexive)) zenon_H11)) zenon_H13)) zenon_H15)))
zenon_G)))).
Qed.

0
9f5f92f27e76e7cfd04c3bdbe86a4061
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
2291

%%begin-auto-proof
%%name: for_zenon___C_1_1_2_LEMMA
          
          
          
          (* Methods to use for automated proof. *)
          (* For step <4>1. *)
          Parameter __C_1_1_2_1_LEMMA :
            (Is_true ((_p_V_consistency_rule vb vc))) -> (((abst_compatible
                                                             (abst_voter va
                                                               vb vc)
                                                             (abst_voter vb
                                                               va vc)) /\
                                                             (abst_compatible
                                                               (abst_voter va
                                                                 vb vc)
                                                               (abst_voter vc
                                                                 va vb)))).
          (* For step <4>2. *)
          Parameter __C_1_1_2_2_LEMMA :
            (~Is_true (((_p_V_consistency_rule vb vc)))) -> (((abst_compatible
                                                                (abst_voter
                                                                  va vb vc)
                                                                (abst_voter
                                                                  vb va vc)) /\
                                                                (abst_compatible
                                                                  (abst_voter
                                                                    va vb vc)
                                                                  (abst_voter
                                                                    vc va vb)))).
          (* For method of Self used via "by property !compatible". *)
          Parameter abst_compatible :
            (Datatypes.prod _p_V_T _p_P_T) ->
              (Datatypes.prod _p_V_T _p_P_T) -> coq_builtins.prop__t.
          (* Theorem's body. *)
          Theorem for_zenon___C_1_1_2_LEMMA :
          ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
             (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
%%end-auto-proof
0
a19dcc33d48fbb3c7f73424f5e954664
proof
403
Theorem for_zenon___C_1_1_2_LEMMA:((abst_compatible (abst_voter va vb
vc) (abst_voter vb va vc))/\(abst_compatible (abst_voter va vb vc) (
abst_voter vc va vb))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_imply _ _ (fun zenon_H5=>(zenon_imply _ _ (
fun zenon_H6=>(zenon_H6 zenon_H5)) (fun zenon_H4=>(zenon_G zenon_H4))
__C_1_1_2_2_LEMMA)) (fun zenon_H4=>(zenon_G zenon_H4))
__C_1_1_2_1_LEMMA)))).
Qed.

0
615848da12cc35b483a471d566ea4f7e
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
2211

%%begin-auto-proof
%%name: for_zenon___C_1_1_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For step <3>1. *)
        Parameter __C_1_1_1_LEMMA :
          (Is_true ((_p_V_consistency_rule va vc))) -> (((abst_compatible
                                                           (abst_voter va vb
                                                             vc)
                                                           (abst_voter vb va
                                                             vc)) /\
                                                           (abst_compatible
                                                             (abst_voter va
                                                               vb vc)
                                                             (abst_voter vc
                                                               va vb)))).
        (* For step <3>2. *)
        Parameter __C_1_1_2_LEMMA :
          (~Is_true (((_p_V_consistency_rule va vc)))) -> (((abst_compatible
                                                              (abst_voter va
                                                                vb vc)
                                                              (abst_voter vb
                                                                va vc)) /\
                                                              (abst_compatible
                                                                (abst_voter
                                                                  va vb vc)
                                                                (abst_voter
                                                                  vc va vb)))).
        (* For method of Self used via "by property !compatible". *)
        Parameter abst_compatible :
          (Datatypes.prod _p_V_T _p_P_T) ->
            (Datatypes.prod _p_V_T _p_P_T) -> coq_builtins.prop__t.
        (* Theorem's body. *)
        Theorem for_zenon___C_1_1_LEMMA :
        ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
           (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
%%end-auto-proof
0
2d9ac225a77cc60d7b1178d49dbd403d
proof
397
Theorem for_zenon___C_1_1_LEMMA:((abst_compatible (abst_voter va vb vc)
(abst_voter vb va vc))/\(abst_compatible (abst_voter va vb vc) (
abst_voter vc va vb))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_imply _ _ (fun zenon_H5=>(zenon_imply _ _ (
fun zenon_H6=>(zenon_H6 zenon_H5)) (fun zenon_H4=>(zenon_G zenon_H4))
__C_1_1_2_LEMMA)) (fun zenon_H4=>(zenon_G zenon_H4)) __C_1_1_1_LEMMA)))).
Qed.

0
883e569a456726ee26fbeed15f9795ed
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
730

%%begin-auto-proof
%%name: for_zenon___C_1_2_1_1_1_1_LEMMA
                
                
                
                (* Methods to use for automated proof. *)
                (* For species parameter method used via "by property vote#V!consistency_rule_symmetric". *)
                Parameter _p_V_consistency_rule_symmetric :
                  forall a  b : _p_V_T,
                    Is_true ((_p_V_consistency_rule a b)) ->
                      Is_true ((_p_V_consistency_rule b a)).
                (* Theorem's body. *)
                Theorem for_zenon___C_1_2_1_1_1_1_LEMMA :
                Is_true ((_p_V_consistency_rule vb va)) ->
                  Is_true ((_p_V_consistency_rule va vb)).
%%end-auto-proof
0
ad6d3677dbc2b076f2826909bec2ca4a
proof
654
Theorem for_zenon___C_1_2_1_1_1_1_LEMMA:((Is_true (
_p_V_consistency_rule vb va))->(Is_true (_p_V_consistency_rule va vb))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notimply _ _ (fun zenon_H4 zenon_H3=>(
zenon_all _p_V_T (fun a:_p_V_T=>(forall b:_p_V_T,((Is_true (
_p_V_consistency_rule a b))->(Is_true (_p_V_consistency_rule b a)))))
vb (fun zenon_H7=>(zenon_all _p_V_T (fun b:_p_V_T=>((Is_true (
_p_V_consistency_rule vb b))->(Is_true (_p_V_consistency_rule b vb))))
va (fun zenon_H6=>(zenon_imply _ _ (fun zenon_H5=>(zenon_H5 zenon_H4)) (
fun zenon_H2=>(zenon_H3 zenon_H2)) zenon_H6)) zenon_H7))
_p_V_consistency_rule_symmetric)) zenon_G)))).
Qed.

0
0312d0664df3a6f137b0ec7e9dbbf28b
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
641

%%begin-auto-proof
%%name: for_zenon___C_1_2_1_1_1_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <6>1. *)
              Parameter __C_1_2_1_1_1_1_LEMMA :
                (Is_true ((_p_V_consistency_rule vb va)) ->
                   Is_true ((_p_V_consistency_rule va vb))).
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_1_1_LEMMA :
              ~Is_true (((_p_V_consistency_rule vb va))).
%%end-auto-proof
0
8192db5c348f496087a9e069e683249c
proof
259
Theorem for_zenon___C_1_2_1_1_1_LEMMA:(~(Is_true (_p_V_consistency_rule
vb va))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_G (fun zenon_H4=>(zenon_imply _ _ (fun
zenon_H5=>(zenon_H5 zenon_H4)) (fun zenon_H3=>(H2 zenon_H3))
__C_1_2_1_1_1_1_LEMMA)))))).
Qed.

0
0b083178e136a92ec43d286be3973592
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1460

%%begin-auto-proof
%%name: for_zenon___C_1_2_1_1_2_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* For hypothesis "H21". *)
              Parameter H21 : Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H211". *)
              Parameter H211 : Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_partial_c3". *)
              Parameter abst_vote_partial_c3 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v3))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_3
                                     _p_E_partial_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_1_2_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter va vb vc)) vc))).
%%end-auto-proof
0
d6b88af9640df4a600748f79cfa0bdf4
proof
1682
Theorem for_zenon___C_1_2_1_1_2_LEMMA:(Is_true (basics._equal_ _ (
abst_value (abst_voter va vb vc)) vc)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule v1 v2)))
/\((Is_true (_p_V_consistency_rule v1 v3))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v3))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_3
_p_E_partial_match)))))))) va (fun zenon_H10=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule va v2)))
/\((Is_true (_p_V_consistency_rule va v3))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter va v2 v3)) v3))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter va v2 v3)) (_p_P_constr _p_C_capt_3
_p_E_partial_match))))))) vb (fun zenon_Hf=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((~(Is_true (_p_V_consistency_rule va vb)))/\((Is_true (
_p_V_consistency_rule va v3))/\(Is_true (_p_V_consistency_rule vb v3))))
->((Is_true (basics._equal_ _ (abst_value (abst_voter va vb v3)) v3))/\(
Is_true (basics._equal_ _ (abst_diag (abst_voter va vb v3)) (
_p_P_constr _p_C_capt_3 _p_E_partial_match)))))) vc (fun zenon_He=>(
zenon_imply _ _ (fun zenon_Hd=>(zenon_notand _ _ (fun zenon_Hc=>(
zenon_Hc (fun zenon_Hb=>(H2 zenon_Hb)))) (fun zenon_Ha=>(zenon_notand _
_ (fun zenon_H9=>(zenon_H9 H21)) (fun zenon_H8=>(zenon_H8 H211))
zenon_Ha)) zenon_Hd)) (fun zenon_H7=>(zenon_and _ _ (fun zenon_H5
zenon_H6=>(zenon_G zenon_H5)) zenon_H7)) zenon_He)) zenon_Hf))
zenon_H10)) abst_vote_partial_c3)))).
Qed.

0
ffccb86577a43b93958351f7895c3370
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1489

%%begin-auto-proof
%%name: for_zenon___C_1_2_1_1_3_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H21". *)
              Parameter H21 : Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H211". *)
              Parameter H211 : Is_true (((_p_V_consistency_rule vb vc))).
              (* For step <5>1. *)
              Parameter __C_1_2_1_1_1_LEMMA :
                (~Is_true (((_p_V_consistency_rule vb va)))).
              (* For method of Self used via "by property !vote_partial_c3". *)
              Parameter abst_vote_partial_c3 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v3))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_3
                                     _p_E_partial_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_1_3_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter vb va vc)) vc))).
%%end-auto-proof
0
84f2e0096745c2a69ec922e79e6f328d
proof
1700
Theorem for_zenon___C_1_2_1_1_3_LEMMA:(Is_true (basics._equal_ _ (
abst_value (abst_voter vb va vc)) vc)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule v1 v2)))
/\((Is_true (_p_V_consistency_rule v1 v3))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v3))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_3
_p_E_partial_match)))))))) vb (fun zenon_H10=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule vb v2)))
/\((Is_true (_p_V_consistency_rule vb v3))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter vb v2 v3)) v3))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter vb v2 v3)) (_p_P_constr _p_C_capt_3
_p_E_partial_match))))))) va (fun zenon_Hf=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((~(Is_true (_p_V_consistency_rule vb va)))/\((Is_true (
_p_V_consistency_rule vb v3))/\(Is_true (_p_V_consistency_rule va v3))))
->((Is_true (basics._equal_ _ (abst_value (abst_voter vb va v3)) v3))/\(
Is_true (basics._equal_ _ (abst_diag (abst_voter vb va v3)) (
_p_P_constr _p_C_capt_3 _p_E_partial_match)))))) vc (fun zenon_He=>(
zenon_imply _ _ (fun zenon_Hd=>(zenon_notand _ _ (fun zenon_Hc=>(
zenon_Hc (fun zenon_Hb=>(__C_1_2_1_1_1_LEMMA zenon_Hb)))) (fun
zenon_Ha=>(zenon_notand _ _ (fun zenon_H9=>(zenon_H9 H211)) (fun
zenon_H8=>(zenon_H8 H21)) zenon_Ha)) zenon_Hd)) (fun zenon_H7=>(
zenon_and _ _ (fun zenon_H5 zenon_H6=>(zenon_G zenon_H5)) zenon_H7))
zenon_He)) zenon_Hf)) zenon_H10)) abst_vote_partial_c3)))).
Qed.

0
a7b376f53f34efe21b898f3a799f4220
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1777

%%begin-auto-proof
%%name: for_zenon___C_1_2_1_1_4_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* For hypothesis "H21". *)
              Parameter H21 : Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H211". *)
              Parameter H211 : Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_partial_c1". *)
              Parameter abst_vote_partial_c1 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1
                                     _p_E_partial_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_1_4_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter vc va vb)) vc))).
%%end-auto-proof
0
6dfa15c2881a8fae0ba8f89046206c7d
proof
2545
Theorem for_zenon___C_1_2_1_1_4_LEMMA:(Is_true (basics._equal_ _ (
abst_value (abst_voter vc va vb)) vc)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule v1 v2))/\((
Is_true (_p_V_consistency_rule v1 v3))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v1))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_partial_match)))))))) vc (fun zenon_H19=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule vc v2))/\((
Is_true (_p_V_consistency_rule vc v3))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter vc v2 v3)) vc))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter vc v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_partial_match))))))) va (fun zenon_H18=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((Is_true (_p_V_consistency_rule vc va))/\((Is_true (
_p_V_consistency_rule vc v3))/\(~(Is_true (_p_V_consistency_rule va v3))
)))->((Is_true (basics._equal_ _ (abst_value (abst_voter vc va v3)) vc))
/\(Is_true (basics._equal_ _ (abst_diag (abst_voter vc va v3)) (
_p_P_constr _p_C_capt_1 _p_E_partial_match)))))) vb (fun zenon_H17=>(
zenon_imply _ _ (fun zenon_H16=>(zenon_notand _ _ (fun zenon_H12=>(
zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2:_p_V_T,((Is_true (
_p_V_consistency_rule v1 v2))->(Is_true (_p_V_consistency_rule v2 v1))))
) va (fun zenon_H15=>(zenon_all _p_V_T (fun v2:_p_V_T=>((Is_true (
_p_V_consistency_rule va v2))->(Is_true (_p_V_consistency_rule v2 va))))
 vc (fun zenon_H14=>(zenon_imply _ _ (fun zenon_H13=>(zenon_H13 H21)) (
fun zenon_H11=>(zenon_H12 zenon_H11)) zenon_H14)) zenon_H15))
abst_consistency_rule_is_symmetric)) (fun zenon_H10=>(zenon_notand _ _ (
fun zenon_Hc=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2:_p_V_T,((
Is_true (_p_V_consistency_rule v1 v2))->(Is_true (_p_V_consistency_rule
v2 v1))))) vb (fun zenon_Hf=>(zenon_all _p_V_T (fun v2:_p_V_T=>((
Is_true (_p_V_consistency_rule vb v2))->(Is_true (_p_V_consistency_rule
v2 vb)))) vc (fun zenon_He=>(zenon_imply _ _ (fun zenon_Hd=>(zenon_Hd
H211)) (fun zenon_Hb=>(zenon_Hc zenon_Hb)) zenon_He)) zenon_Hf))
abst_consistency_rule_is_symmetric)) (fun zenon_Ha=>(zenon_Ha (fun
zenon_H9=>(H2 zenon_H9)))) zenon_H10)) zenon_H16)) (fun zenon_H8=>(
zenon_and _ _ (fun zenon_H6 zenon_H7=>(zenon_G zenon_H6)) zenon_H8))
zenon_H17)) zenon_H18)) zenon_H19)) abst_vote_partial_c1)))).
Qed.

0
6116ef3f948f1b6d440d6c58a3aa3de8
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1501

%%begin-auto-proof
%%name: for_zenon___C_1_2_1_1_5_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* For hypothesis "H21". *)
              Parameter H21 : Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H211". *)
              Parameter H211 : Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_partial_c3". *)
              Parameter abst_vote_partial_c3 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v3))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_3
                                     _p_E_partial_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_1_5_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter va vb vc))
                          (_p_P_constr _p_C_capt_3 _p_E_partial_match)))).
%%end-auto-proof
0
4308d8b51c256312f2bee5633ef2d6e7
proof
1723
Theorem for_zenon___C_1_2_1_1_5_LEMMA:(Is_true (basics._equal_ _ (
abst_diag (abst_voter va vb vc)) (_p_P_constr _p_C_capt_3
_p_E_partial_match))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule v1 v2)))
/\((Is_true (_p_V_consistency_rule v1 v3))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v3))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_3
_p_E_partial_match)))))))) va (fun zenon_H10=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule va v2)))
/\((Is_true (_p_V_consistency_rule va v3))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter va v2 v3)) v3))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter va v2 v3)) (_p_P_constr _p_C_capt_3
_p_E_partial_match))))))) vb (fun zenon_Hf=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((~(Is_true (_p_V_consistency_rule va vb)))/\((Is_true (
_p_V_consistency_rule va v3))/\(Is_true (_p_V_consistency_rule vb v3))))
->((Is_true (basics._equal_ _ (abst_value (abst_voter va vb v3)) v3))/\(
Is_true (basics._equal_ _ (abst_diag (abst_voter va vb v3)) (
_p_P_constr _p_C_capt_3 _p_E_partial_match)))))) vc (fun zenon_He=>(
zenon_imply _ _ (fun zenon_Hd=>(zenon_notand _ _ (fun zenon_Hc=>(
zenon_Hc (fun zenon_Hb=>(H2 zenon_Hb)))) (fun zenon_Ha=>(zenon_notand _
_ (fun zenon_H9=>(zenon_H9 H21)) (fun zenon_H8=>(zenon_H8 H211))
zenon_Ha)) zenon_Hd)) (fun zenon_H7=>(zenon_and _ _ (fun zenon_H6
zenon_H5=>(zenon_G zenon_H5)) zenon_H7)) zenon_He)) zenon_Hf))
zenon_H10)) abst_vote_partial_c3)))).
Qed.

0
96ad9385d64329a7090dc6ed329ddf00
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1232

%%begin-auto-proof
%%name: for_zenon___C_1_2_1_1_6_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>5. *)
              Parameter __C_1_2_1_1_5_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter va vb vc))
                             (_p_P_constr _p_C_capt_3 _p_E_partial_match))))).
              (* For species parameter method used via "by property vote#P!partial_match_is_valid". *)
              Parameter _p_P_partial_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_partial_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_1_6_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))).
%%end-auto-proof
0
3bcf349d84d4d513db43c1c3982582d0
proof
1971
Theorem for_zenon___C_1_2_1_1_6_LEMMA:(Is_true (_p_P_valid (abst_diag (
abst_voter va vb vc)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(coq_builtins.zenon_syntactic_equal
zenon_focal_eqdec _ (abst_diag (abst_voter va vb vc)) (_p_P_constr
_p_C_capt_3 _p_E_partial_match) (fun zenon_H9=>(zenon_all _p_P_T (fun x
:_p_P_T=>((Is_true (_p_E_equal (_p_P_prj_b x) _p_E_partial_match))->(
Is_true (_p_P_valid x)))) (abst_diag (abst_voter va vb vc)) (fun
zenon_Hc=>(zenon_imply _ _ (fun zenon_H5=>(zenon_all _p_C_T (fun n1
:_p_C_T=>(forall n2:_p_E_T,(Is_true (_p_E_equal (_p_P_prj_b (
_p_P_constr n1 n2)) n2)))) _p_C_capt_3 (fun zenon_Hb=>(zenon_all _p_E_T
(fun n2:_p_E_T=>(Is_true (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_3 n2)) n2))) _p_E_partial_match (fun zenon_H6=>(zenon_subst _
(fun zenon_Vf=>(Is_true zenon_Vf)) (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_3 _p_E_partial_match)) _p_E_partial_match) (_p_E_equal (
_p_P_prj_b (abst_diag (abst_voter va vb vc))) _p_E_partial_match) (fun
zenon_H7=>(zenon_subst _ (fun zenon_Vg=>(~((_p_E_equal zenon_Vg
_p_E_partial_match) = (_p_E_equal (_p_P_prj_b (abst_diag (abst_voter va
vb vc))) _p_E_partial_match)))) (_p_P_prj_b (_p_P_constr _p_C_capt_3
_p_E_partial_match)) (_p_P_prj_b (abst_diag (abst_voter va vb vc))) (
fun zenon_H8=>(zenon_subst _ (fun zenon_Vh=>(~((_p_P_prj_b zenon_Vh) = (
_p_P_prj_b (abst_diag (abst_voter va vb vc)))))) (_p_P_constr
_p_C_capt_3 _p_E_partial_match) (abst_diag (abst_voter va vb vc)) (fun
zenon_Ha=>(zenon_eqsym _ (abst_diag (abst_voter va vb vc)) (_p_P_constr
_p_C_capt_3 _p_E_partial_match) zenon_H9 zenon_Ha)) (zenon_notnot _ (
refl_equal (_p_P_prj_b (abst_diag (abst_voter va vb vc))))) zenon_H8)) (
zenon_notnot _ (refl_equal (_p_E_equal (_p_P_prj_b (abst_diag (
abst_voter va vb vc))) _p_E_partial_match))) zenon_H7)) zenon_H5
zenon_H6)) zenon_Hb)) _p_P_prj_b_is_snd_of_pair)) (fun zenon_H4=>(
zenon_G zenon_H4)) zenon_Hc)) _p_P_partial_match_is_valid))
__C_1_2_1_1_5_LEMMA)))).
Qed.

0
c3376e84f634f8f20d979545b2161fcc
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1530

%%begin-auto-proof
%%name: for_zenon___C_1_2_1_1_7_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H21". *)
              Parameter H21 : Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H211". *)
              Parameter H211 : Is_true (((_p_V_consistency_rule vb vc))).
              (* For step <5>1. *)
              Parameter __C_1_2_1_1_1_LEMMA :
                (~Is_true (((_p_V_consistency_rule vb va)))).
              (* For method of Self used via "by property !vote_partial_c3". *)
              Parameter abst_vote_partial_c3 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v3))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_3
                                     _p_E_partial_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_1_7_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vb va vc))
                          (_p_P_constr _p_C_capt_3 _p_E_partial_match)))).
%%end-auto-proof
0
00ecc7f7ccec977e5d0aa0473b96e52a
proof
1741
Theorem for_zenon___C_1_2_1_1_7_LEMMA:(Is_true (basics._equal_ _ (
abst_diag (abst_voter vb va vc)) (_p_P_constr _p_C_capt_3
_p_E_partial_match))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule v1 v2)))
/\((Is_true (_p_V_consistency_rule v1 v3))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v3))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_3
_p_E_partial_match)))))))) vb (fun zenon_H10=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule vb v2)))
/\((Is_true (_p_V_consistency_rule vb v3))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter vb v2 v3)) v3))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter vb v2 v3)) (_p_P_constr _p_C_capt_3
_p_E_partial_match))))))) va (fun zenon_Hf=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((~(Is_true (_p_V_consistency_rule vb va)))/\((Is_true (
_p_V_consistency_rule vb v3))/\(Is_true (_p_V_consistency_rule va v3))))
->((Is_true (basics._equal_ _ (abst_value (abst_voter vb va v3)) v3))/\(
Is_true (basics._equal_ _ (abst_diag (abst_voter vb va v3)) (
_p_P_constr _p_C_capt_3 _p_E_partial_match)))))) vc (fun zenon_He=>(
zenon_imply _ _ (fun zenon_Hd=>(zenon_notand _ _ (fun zenon_Hc=>(
zenon_Hc (fun zenon_Hb=>(__C_1_2_1_1_1_LEMMA zenon_Hb)))) (fun
zenon_Ha=>(zenon_notand _ _ (fun zenon_H9=>(zenon_H9 H211)) (fun
zenon_H8=>(zenon_H8 H21)) zenon_Ha)) zenon_Hd)) (fun zenon_H7=>(
zenon_and _ _ (fun zenon_H6 zenon_H5=>(zenon_G zenon_H5)) zenon_H7))
zenon_He)) zenon_Hf)) zenon_H10)) abst_vote_partial_c3)))).
Qed.

0
9ffce7d663131828f4b822c1b0223490
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1232

%%begin-auto-proof
%%name: for_zenon___C_1_2_1_1_8_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>7. *)
              Parameter __C_1_2_1_1_7_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vb va vc))
                             (_p_P_constr _p_C_capt_3 _p_E_partial_match))))).
              (* For species parameter method used via "by property vote#P!partial_match_is_valid". *)
              Parameter _p_P_partial_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_partial_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_1_8_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc))))).
%%end-auto-proof
0
51c35abb3c80828b5b4d31f995c9e38a
proof
1971
Theorem for_zenon___C_1_2_1_1_8_LEMMA:(Is_true (_p_P_valid (abst_diag (
abst_voter vb va vc)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(coq_builtins.zenon_syntactic_equal
zenon_focal_eqdec _ (abst_diag (abst_voter vb va vc)) (_p_P_constr
_p_C_capt_3 _p_E_partial_match) (fun zenon_H9=>(zenon_all _p_P_T (fun x
:_p_P_T=>((Is_true (_p_E_equal (_p_P_prj_b x) _p_E_partial_match))->(
Is_true (_p_P_valid x)))) (abst_diag (abst_voter vb va vc)) (fun
zenon_Hc=>(zenon_imply _ _ (fun zenon_H5=>(zenon_all _p_C_T (fun n1
:_p_C_T=>(forall n2:_p_E_T,(Is_true (_p_E_equal (_p_P_prj_b (
_p_P_constr n1 n2)) n2)))) _p_C_capt_3 (fun zenon_Hb=>(zenon_all _p_E_T
(fun n2:_p_E_T=>(Is_true (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_3 n2)) n2))) _p_E_partial_match (fun zenon_H6=>(zenon_subst _
(fun zenon_Vf=>(Is_true zenon_Vf)) (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_3 _p_E_partial_match)) _p_E_partial_match) (_p_E_equal (
_p_P_prj_b (abst_diag (abst_voter vb va vc))) _p_E_partial_match) (fun
zenon_H7=>(zenon_subst _ (fun zenon_Vg=>(~((_p_E_equal zenon_Vg
_p_E_partial_match) = (_p_E_equal (_p_P_prj_b (abst_diag (abst_voter vb
va vc))) _p_E_partial_match)))) (_p_P_prj_b (_p_P_constr _p_C_capt_3
_p_E_partial_match)) (_p_P_prj_b (abst_diag (abst_voter vb va vc))) (
fun zenon_H8=>(zenon_subst _ (fun zenon_Vh=>(~((_p_P_prj_b zenon_Vh) = (
_p_P_prj_b (abst_diag (abst_voter vb va vc)))))) (_p_P_constr
_p_C_capt_3 _p_E_partial_match) (abst_diag (abst_voter vb va vc)) (fun
zenon_Ha=>(zenon_eqsym _ (abst_diag (abst_voter vb va vc)) (_p_P_constr
_p_C_capt_3 _p_E_partial_match) zenon_H9 zenon_Ha)) (zenon_notnot _ (
refl_equal (_p_P_prj_b (abst_diag (abst_voter vb va vc))))) zenon_H8)) (
zenon_notnot _ (refl_equal (_p_E_equal (_p_P_prj_b (abst_diag (
abst_voter vb va vc))) _p_E_partial_match))) zenon_H7)) zenon_H5
zenon_H6)) zenon_Hb)) _p_P_prj_b_is_snd_of_pair)) (fun zenon_H4=>(
zenon_G zenon_H4)) zenon_Hc)) _p_P_partial_match_is_valid))
__C_1_2_1_1_7_LEMMA)))).
Qed.

0
ae0de22857a9f85cfeccb5046c884105
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1818

%%begin-auto-proof
%%name: for_zenon___C_1_2_1_1_9_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* For hypothesis "H21". *)
              Parameter H21 : Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H211". *)
              Parameter H211 : Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_partial_c1". *)
              Parameter abst_vote_partial_c1 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1
                                     _p_E_partial_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_1_9_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vc va vb))
                          (_p_P_constr _p_C_capt_1 _p_E_partial_match)))).
%%end-auto-proof
0
6bfc12ed8fd2212f06a0bb366a495a68
proof
2586
Theorem for_zenon___C_1_2_1_1_9_LEMMA:(Is_true (basics._equal_ _ (
abst_diag (abst_voter vc va vb)) (_p_P_constr _p_C_capt_1
_p_E_partial_match))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule v1 v2))/\((
Is_true (_p_V_consistency_rule v1 v3))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v1))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_partial_match)))))))) vc (fun zenon_H19=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule vc v2))/\((
Is_true (_p_V_consistency_rule vc v3))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter vc v2 v3)) vc))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter vc v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_partial_match))))))) va (fun zenon_H18=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((Is_true (_p_V_consistency_rule vc va))/\((Is_true (
_p_V_consistency_rule vc v3))/\(~(Is_true (_p_V_consistency_rule va v3))
)))->((Is_true (basics._equal_ _ (abst_value (abst_voter vc va v3)) vc))
/\(Is_true (basics._equal_ _ (abst_diag (abst_voter vc va v3)) (
_p_P_constr _p_C_capt_1 _p_E_partial_match)))))) vb (fun zenon_H17=>(
zenon_imply _ _ (fun zenon_H16=>(zenon_notand _ _ (fun zenon_H12=>(
zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2:_p_V_T,((Is_true (
_p_V_consistency_rule v1 v2))->(Is_true (_p_V_consistency_rule v2 v1))))
) va (fun zenon_H15=>(zenon_all _p_V_T (fun v2:_p_V_T=>((Is_true (
_p_V_consistency_rule va v2))->(Is_true (_p_V_consistency_rule v2 va))))
 vc (fun zenon_H14=>(zenon_imply _ _ (fun zenon_H13=>(zenon_H13 H21)) (
fun zenon_H11=>(zenon_H12 zenon_H11)) zenon_H14)) zenon_H15))
abst_consistency_rule_is_symmetric)) (fun zenon_H10=>(zenon_notand _ _ (
fun zenon_Hc=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2:_p_V_T,((
Is_true (_p_V_consistency_rule v1 v2))->(Is_true (_p_V_consistency_rule
v2 v1))))) vb (fun zenon_Hf=>(zenon_all _p_V_T (fun v2:_p_V_T=>((
Is_true (_p_V_consistency_rule vb v2))->(Is_true (_p_V_consistency_rule
v2 vb)))) vc (fun zenon_He=>(zenon_imply _ _ (fun zenon_Hd=>(zenon_Hd
H211)) (fun zenon_Hb=>(zenon_Hc zenon_Hb)) zenon_He)) zenon_Hf))
abst_consistency_rule_is_symmetric)) (fun zenon_Ha=>(zenon_Ha (fun
zenon_H9=>(H2 zenon_H9)))) zenon_H10)) zenon_H16)) (fun zenon_H8=>(
zenon_and _ _ (fun zenon_H7 zenon_H6=>(zenon_G zenon_H6)) zenon_H8))
zenon_H17)) zenon_H18)) zenon_H19)) abst_vote_partial_c1)))).
Qed.

0
738fdb8bbe3ec99d9d1505b3886037b1
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1234

%%begin-auto-proof
%%name: for_zenon___C_1_2_1_1_10_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>9. *)
              Parameter __C_1_2_1_1_9_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vc va vb))
                             (_p_P_constr _p_C_capt_1 _p_E_partial_match))))).
              (* For species parameter method used via "by property vote#P!partial_match_is_valid". *)
              Parameter _p_P_partial_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_partial_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_1_10_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb))))).
%%end-auto-proof
0
2d882f6d84e72df4e33df2d33d14c632
proof
1972
Theorem for_zenon___C_1_2_1_1_10_LEMMA:(Is_true (_p_P_valid (abst_diag (
abst_voter vc va vb)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(coq_builtins.zenon_syntactic_equal
zenon_focal_eqdec _ (abst_diag (abst_voter vc va vb)) (_p_P_constr
_p_C_capt_1 _p_E_partial_match) (fun zenon_H9=>(zenon_all _p_P_T (fun x
:_p_P_T=>((Is_true (_p_E_equal (_p_P_prj_b x) _p_E_partial_match))->(
Is_true (_p_P_valid x)))) (abst_diag (abst_voter vc va vb)) (fun
zenon_Hc=>(zenon_imply _ _ (fun zenon_H5=>(zenon_all _p_C_T (fun n1
:_p_C_T=>(forall n2:_p_E_T,(Is_true (_p_E_equal (_p_P_prj_b (
_p_P_constr n1 n2)) n2)))) _p_C_capt_1 (fun zenon_Hb=>(zenon_all _p_E_T
(fun n2:_p_E_T=>(Is_true (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_1 n2)) n2))) _p_E_partial_match (fun zenon_H6=>(zenon_subst _
(fun zenon_Vf=>(Is_true zenon_Vf)) (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_1 _p_E_partial_match)) _p_E_partial_match) (_p_E_equal (
_p_P_prj_b (abst_diag (abst_voter vc va vb))) _p_E_partial_match) (fun
zenon_H7=>(zenon_subst _ (fun zenon_Vg=>(~((_p_E_equal zenon_Vg
_p_E_partial_match) = (_p_E_equal (_p_P_prj_b (abst_diag (abst_voter vc
va vb))) _p_E_partial_match)))) (_p_P_prj_b (_p_P_constr _p_C_capt_1
_p_E_partial_match)) (_p_P_prj_b (abst_diag (abst_voter vc va vb))) (
fun zenon_H8=>(zenon_subst _ (fun zenon_Vh=>(~((_p_P_prj_b zenon_Vh) = (
_p_P_prj_b (abst_diag (abst_voter vc va vb)))))) (_p_P_constr
_p_C_capt_1 _p_E_partial_match) (abst_diag (abst_voter vc va vb)) (fun
zenon_Ha=>(zenon_eqsym _ (abst_diag (abst_voter vc va vb)) (_p_P_constr
_p_C_capt_1 _p_E_partial_match) zenon_H9 zenon_Ha)) (zenon_notnot _ (
refl_equal (_p_P_prj_b (abst_diag (abst_voter vc va vb))))) zenon_H8)) (
zenon_notnot _ (refl_equal (_p_E_equal (_p_P_prj_b (abst_diag (
abst_voter vc va vb))) _p_E_partial_match))) zenon_H7)) zenon_H5
zenon_H6)) zenon_Hb)) _p_P_prj_b_is_snd_of_pair)) (fun zenon_H4=>(
zenon_G zenon_H4)) zenon_Hc)) _p_P_partial_match_is_valid))
__C_1_2_1_1_9_LEMMA)))).
Qed.

0
156f0b6706d5e2505f56a5041fb3d384
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
2265

%%begin-auto-proof
%%name: for_zenon___C_1_2_1_1_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For step <5>2. *)
            Parameter __C_1_2_1_1_2_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter va vb vc)) vc)))).
            (* For step <5>3. *)
            Parameter __C_1_2_1_1_3_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter vb va vc)) vc)))).
            (* For step <5>4. *)
            Parameter __C_1_2_1_1_4_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter vc va vb)) vc)))).
            (* For step <5>6. *)
            Parameter __C_1_2_1_1_6_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc)))))).
            (* For step <5>8. *)
            Parameter __C_1_2_1_1_8_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc)))))).
            (* For step <5>10. *)
            Parameter __C_1_2_1_1_10_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb)))))).
            (* For species parameter method used via "by property vote#V!consistency_rule_reflexive". *)
            Parameter _p_V_consistency_rule_reflexive :
              forall a : _p_V_T, Is_true ((_p_V_consistency_rule a a)).
            (* For method of Self used via "by definition of !compatible". *)
            Definition abst_compatible (s1 : (Datatypes.prod _p_V_T _p_P_T))
              (s2 : (Datatypes.prod _p_V_T _p_P_T)) : coq_builtins.prop__t :=
              (Is_true ((_p_P_valid (abst_diag s1))) /\
                 Is_true ((_p_P_valid (abst_diag s2))) /\
                   Is_true ((_p_V_consistency_rule (abst_value s1)
                              (abst_value s2)))) \/
                (~Is_true (((_p_P_valid (abst_diag s1)))) /\
                   ~Is_true (((_p_P_valid (abst_diag s2))))).
            (* Theorem's body. *)
            Theorem for_zenon___C_1_2_1_1_LEMMA :
            ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
               (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
%%end-auto-proof
0
940c899f54acb96f0a0db5bbd3ce9711
proof
3531
Theorem for_zenon___C_1_2_1_1_LEMMA:((abst_compatible (abst_voter va vb
vc) (abst_voter vb va vc))/\(abst_compatible (abst_voter va vb vc) (
abst_voter vc va vb))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notand _ _ (fun zenon_H20=>(let zenon_H1f
:=zenon_H20 in (zenon_notor _ _ (fun zenon_H1d zenon_H1e=>(zenon_notand
_ _ (fun zenon_H11=>(zenon_H11 __C_1_2_1_1_6_LEMMA)) (fun zenon_H1c=>(
zenon_notand _ _ (fun zenon_H1b=>(zenon_H1b __C_1_2_1_1_8_LEMMA)) (fun
zenon_H16=>(zenon_all _p_V_T (fun a:_p_V_T=>(Is_true (
_p_V_consistency_rule a a))) (abst_value (abst_voter va vb vc)) (fun
zenon_H9=>(zenon_subst _ (fun zenon_Vi=>(Is_true zenon_Vi)) (
_p_V_consistency_rule (abst_value (abst_voter va vb vc)) (abst_value (
abst_voter va vb vc))) (_p_V_consistency_rule (abst_value (abst_voter
va vb vc)) (abst_value (abst_voter vb va vc))) (fun zenon_H17=>(
zenon_subst _ (fun zenon_Vj=>(~((_p_V_consistency_rule (abst_value (
abst_voter va vb vc)) zenon_Vj) = (_p_V_consistency_rule (abst_value (
abst_voter va vb vc)) (abst_value (abst_voter vb va vc)))))) (
abst_value (abst_voter va vb vc)) (abst_value (abst_voter vb va vc)) (
fun zenon_H18=>(coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ (
abst_value (abst_voter va vb vc)) vc (fun zenon_Hc=>(
coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ (abst_value (
abst_voter vb va vc)) vc (fun zenon_H19=>(zenon_subst _ (fun zenon_Vk=>(
(abst_value (abst_voter va vb vc)) = zenon_Vk)) vc (abst_value (
abst_voter vb va vc)) (fun zenon_H1a=>(zenon_eqsym _ (abst_value (
abst_voter vb va vc)) vc zenon_H19 zenon_H1a)) zenon_H18 zenon_Hc))
__C_1_2_1_1_3_LEMMA)) __C_1_2_1_1_2_LEMMA)) (zenon_notnot _ (refl_equal
(_p_V_consistency_rule (abst_value (abst_voter va vb vc)) (abst_value (
abst_voter vb va vc))))) zenon_H17)) zenon_H16 zenon_H9))
_p_V_consistency_rule_reflexive)) zenon_H1c)) zenon_H1d)) zenon_H1f))) (
fun zenon_H15=>(let zenon_H14:=zenon_H15 in (zenon_notor _ _ (fun
zenon_H12 zenon_H13=>(zenon_notand _ _ (fun zenon_H11=>(zenon_H11
__C_1_2_1_1_6_LEMMA)) (fun zenon_H10=>(zenon_notand _ _ (fun zenon_Hf=>(
zenon_Hf __C_1_2_1_1_10_LEMMA)) (fun zenon_H8=>(zenon_all _p_V_T (fun a
:_p_V_T=>(Is_true (_p_V_consistency_rule a a))) (abst_value (abst_voter
va vb vc)) (fun zenon_H9=>(zenon_subst _ (fun zenon_Vf=>(Is_true
zenon_Vf)) (_p_V_consistency_rule (abst_value (abst_voter va vb vc)) (
abst_value (abst_voter va vb vc))) (_p_V_consistency_rule (abst_value (
abst_voter va vb vc)) (abst_value (abst_voter vc va vb))) (fun
zenon_Ha=>(zenon_subst _ (fun zenon_Vg=>(~((_p_V_consistency_rule (
abst_value (abst_voter va vb vc)) zenon_Vg) = (_p_V_consistency_rule (
abst_value (abst_voter va vb vc)) (abst_value (abst_voter vc va vb))))))
 (abst_value (abst_voter va vb vc)) (abst_value (abst_voter vc va vb)) (
fun zenon_Hb=>(coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ (
abst_value (abst_voter va vb vc)) vc (fun zenon_Hc=>(
coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ (abst_value (
abst_voter vc va vb)) vc (fun zenon_Hd=>(zenon_subst _ (fun zenon_Vh=>((
abst_value (abst_voter va vb vc)) = zenon_Vh)) vc (abst_value (
abst_voter vc va vb)) (fun zenon_He=>(zenon_eqsym _ (abst_value (
abst_voter vc va vb)) vc zenon_Hd zenon_He)) zenon_Hb zenon_Hc))
__C_1_2_1_1_4_LEMMA)) __C_1_2_1_1_2_LEMMA)) (zenon_notnot _ (refl_equal
(_p_V_consistency_rule (abst_value (abst_voter va vb vc)) (abst_value (
abst_voter vc va vb))))) zenon_Ha)) zenon_H8 zenon_H9))
_p_V_consistency_rule_reflexive)) zenon_H10)) zenon_H12)) zenon_H14)))
zenon_G)))).
Qed.

0
a0ce0ad64c239c22aa62f0de209ed18f
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
730

%%begin-auto-proof
%%name: for_zenon___C_1_2_1_2_1_1_LEMMA
                
                
                
                (* Methods to use for automated proof. *)
                (* For species parameter method used via "by property vote#V!consistency_rule_symmetric". *)
                Parameter _p_V_consistency_rule_symmetric :
                  forall a  b : _p_V_T,
                    Is_true ((_p_V_consistency_rule a b)) ->
                      Is_true ((_p_V_consistency_rule b a)).
                (* Theorem's body. *)
                Theorem for_zenon___C_1_2_1_2_1_1_LEMMA :
                Is_true ((_p_V_consistency_rule vb va)) ->
                  Is_true ((_p_V_consistency_rule va vb)).
%%end-auto-proof
0
d31c57307d23ba80361c2c2f0d528e21
proof
654
Theorem for_zenon___C_1_2_1_2_1_1_LEMMA:((Is_true (
_p_V_consistency_rule vb va))->(Is_true (_p_V_consistency_rule va vb))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notimply _ _ (fun zenon_H4 zenon_H3=>(
zenon_all _p_V_T (fun a:_p_V_T=>(forall b:_p_V_T,((Is_true (
_p_V_consistency_rule a b))->(Is_true (_p_V_consistency_rule b a)))))
vb (fun zenon_H7=>(zenon_all _p_V_T (fun b:_p_V_T=>((Is_true (
_p_V_consistency_rule vb b))->(Is_true (_p_V_consistency_rule b vb))))
va (fun zenon_H6=>(zenon_imply _ _ (fun zenon_H5=>(zenon_H5 zenon_H4)) (
fun zenon_H2=>(zenon_H3 zenon_H2)) zenon_H6)) zenon_H7))
_p_V_consistency_rule_symmetric)) zenon_G)))).
Qed.

0
2f0b8ef36334e455540e3c91a6c2e93c
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
641

%%begin-auto-proof
%%name: for_zenon___C_1_2_1_2_1_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <6>1. *)
              Parameter __C_1_2_1_2_1_1_LEMMA :
                (Is_true ((_p_V_consistency_rule vb va)) ->
                   Is_true ((_p_V_consistency_rule va vb))).
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_2_1_LEMMA :
              ~Is_true (((_p_V_consistency_rule vb va))).
%%end-auto-proof
0
c9200d8a645c4fc5e1263704cb65671a
proof
259
Theorem for_zenon___C_1_2_1_2_1_LEMMA:(~(Is_true (_p_V_consistency_rule
vb va))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_G (fun zenon_H4=>(zenon_imply _ _ (fun
zenon_H5=>(zenon_H5 zenon_H4)) (fun zenon_H3=>(H2 zenon_H3))
__C_1_2_1_2_1_1_LEMMA)))))).
Qed.

0
54e8ac1ddf6bba8eb5580d3350ed7d4f
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1419

%%begin-auto-proof
%%name: for_zenon___C_1_2_1_2_2_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* For hypothesis "H21". *)
              Parameter H21 : Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H212". *)
              Parameter H212 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_match_c2". *)
              Parameter abst_vote_match_c2 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v3))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_2 _p_E_range_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_2_2_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter va vb vc)) vc))).
%%end-auto-proof
0
87f3ff7648723bb5fae0e72b960aff35
proof
1713
Theorem for_zenon___C_1_2_1_2_2_LEMMA:(Is_true (basics._equal_ _ (
abst_value (abst_voter va vb vc)) vc)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule v1 v2)))
/\((Is_true (_p_V_consistency_rule v1 v3))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v3))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_2
_p_E_range_match)))))))) va (fun zenon_H11=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule va v2)))
/\((Is_true (_p_V_consistency_rule va v3))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter va v2 v3)) v3))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter va v2 v3)) (_p_P_constr _p_C_capt_2
_p_E_range_match))))))) vb (fun zenon_H10=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((~(Is_true (_p_V_consistency_rule va vb)))/\((Is_true (
_p_V_consistency_rule va v3))/\(~(Is_true (_p_V_consistency_rule vb v3))
)))->((Is_true (basics._equal_ _ (abst_value (abst_voter va vb v3)) v3))
/\(Is_true (basics._equal_ _ (abst_diag (abst_voter va vb v3)) (
_p_P_constr _p_C_capt_2 _p_E_range_match)))))) vc (fun zenon_Hf=>(
zenon_imply _ _ (fun zenon_He=>(zenon_notand _ _ (fun zenon_Hd=>(
zenon_Hd (fun zenon_Hc=>(H2 zenon_Hc)))) (fun zenon_Hb=>(zenon_notand _
_ (fun zenon_Ha=>(zenon_Ha H21)) (fun zenon_H9=>(zenon_H9 (fun
zenon_H8=>(H212 zenon_H8)))) zenon_Hb)) zenon_He)) (fun zenon_H7=>(
zenon_and _ _ (fun zenon_H5 zenon_H6=>(zenon_G zenon_H5)) zenon_H7))
zenon_Hf)) zenon_H10)) zenon_H11)) abst_vote_match_c2)))).
Qed.

0
a5b2434d45ac566d81bf5d31462c2110
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1448

%%begin-auto-proof
%%name: for_zenon___C_1_2_1_2_3_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H21". *)
              Parameter H21 : Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H212". *)
              Parameter H212 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For step <5>1. *)
              Parameter __C_1_2_1_2_1_LEMMA :
                (~Is_true (((_p_V_consistency_rule vb va)))).
              (* For method of Self used via "by property !vote_match_c1". *)
              Parameter abst_vote_match_c1 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v2))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1 _p_E_range_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_2_3_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter vb va vc)) va))).
%%end-auto-proof
0
5adc7211fd49e80033ac4c11381e9403
proof
1732
Theorem for_zenon___C_1_2_1_2_3_LEMMA:(Is_true (basics._equal_ _ (
abst_value (abst_voter vb va vc)) va)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule v1 v2)))
/\((~(Is_true (_p_V_consistency_rule v1 v3)))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v2))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_range_match)))))))) vb (fun zenon_H11=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule vb v2)))
/\((~(Is_true (_p_V_consistency_rule vb v3)))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter vb v2 v3)) v2))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter vb v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_range_match))))))) va (fun zenon_H10=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((~(Is_true (_p_V_consistency_rule vb va)))/\((~(Is_true (
_p_V_consistency_rule vb v3)))/\(Is_true (_p_V_consistency_rule va v3)))
)->((Is_true (basics._equal_ _ (abst_value (abst_voter vb va v3)) va))
/\(Is_true (basics._equal_ _ (abst_diag (abst_voter vb va v3)) (
_p_P_constr _p_C_capt_1 _p_E_range_match)))))) vc (fun zenon_Hf=>(
zenon_imply _ _ (fun zenon_He=>(zenon_notand _ _ (fun zenon_Hd=>(
zenon_Hd (fun zenon_Hc=>(__C_1_2_1_2_1_LEMMA zenon_Hc)))) (fun
zenon_Hb=>(zenon_notand _ _ (fun zenon_Ha=>(zenon_Ha (fun zenon_H9=>(
H212 zenon_H9)))) (fun zenon_H8=>(zenon_H8 H21)) zenon_Hb)) zenon_He)) (
fun zenon_H7=>(zenon_and _ _ (fun zenon_H5 zenon_H6=>(zenon_G zenon_H5))
 zenon_H7)) zenon_Hf)) zenon_H10)) zenon_H11)) abst_vote_match_c1)))).
Qed.

0
ad2ce6a98713f798982302b4aaa0e743
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
730

%%begin-auto-proof
%%name: for_zenon___C_1_2_1_2_4_1_LEMMA
                
                
                
                (* Methods to use for automated proof. *)
                (* For species parameter method used via "by property vote#V!consistency_rule_symmetric". *)
                Parameter _p_V_consistency_rule_symmetric :
                  forall a  b : _p_V_T,
                    Is_true ((_p_V_consistency_rule a b)) ->
                      Is_true ((_p_V_consistency_rule b a)).
                (* Theorem's body. *)
                Theorem for_zenon___C_1_2_1_2_4_1_LEMMA :
                Is_true ((_p_V_consistency_rule vc vb)) ->
                  Is_true ((_p_V_consistency_rule vb vc)).
%%end-auto-proof
0
4936ae9e1868e192313a4605e5882bcc
proof
654
Theorem for_zenon___C_1_2_1_2_4_1_LEMMA:((Is_true (
_p_V_consistency_rule vc vb))->(Is_true (_p_V_consistency_rule vb vc))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notimply _ _ (fun zenon_H4 zenon_H3=>(
zenon_all _p_V_T (fun a:_p_V_T=>(forall b:_p_V_T,((Is_true (
_p_V_consistency_rule a b))->(Is_true (_p_V_consistency_rule b a)))))
vc (fun zenon_H7=>(zenon_all _p_V_T (fun b:_p_V_T=>((Is_true (
_p_V_consistency_rule vc b))->(Is_true (_p_V_consistency_rule b vc))))
vb (fun zenon_H6=>(zenon_imply _ _ (fun zenon_H5=>(zenon_H5 zenon_H4)) (
fun zenon_H2=>(zenon_H3 zenon_H2)) zenon_H6)) zenon_H7))
_p_V_consistency_rule_symmetric)) zenon_G)))).
Qed.

0
f634911460dab277db9752f4f9a7898b
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
645

%%begin-auto-proof
%%name: for_zenon___C_1_2_1_2_4_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <6>1. *)
              Parameter __C_1_2_1_2_4_1_LEMMA :
                (Is_true ((_p_V_consistency_rule vc vb)) ->
                   Is_true ((_p_V_consistency_rule vb vc))).
              (* For hypothesis "H212". *)
              Parameter H212 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_2_4_LEMMA :
              ~Is_true (((_p_V_consistency_rule vc vb))).
%%end-auto-proof
0
8bd370b97f43ca76aa000aee50d0debd
proof
261
Theorem for_zenon___C_1_2_1_2_4_LEMMA:(~(Is_true (_p_V_consistency_rule
vc vb))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_G (fun zenon_H4=>(zenon_imply _ _ (fun
zenon_H5=>(zenon_H5 zenon_H4)) (fun zenon_H3=>(H212 zenon_H3))
__C_1_2_1_2_4_1_LEMMA)))))).
Qed.

0
72dc9f5ed39d93ecfc4efa0fca08a330
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1761

%%begin-auto-proof
%%name: for_zenon___C_1_2_1_2_5_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* For hypothesis "H21". *)
              Parameter H21 : Is_true (((_p_V_consistency_rule va vc))).
              (* For step <5>4. *)
              Parameter __C_1_2_1_2_4_LEMMA :
                (~Is_true (((_p_V_consistency_rule vc vb)))).
              (* For method of Self used via "by property !vote_match_c3". *)
              Parameter abst_vote_match_c3 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_3 _p_E_range_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_2_5_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter vc va vb)) vc))).
%%end-auto-proof
0
6b3f7b1b2a6903c3444b2c1fe68129a6
proof
2163
Theorem for_zenon___C_1_2_1_2_5_LEMMA:(Is_true (basics._equal_ _ (
abst_value (abst_voter vc va vb)) vc)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule v1 v2))/\((~
(Is_true (_p_V_consistency_rule v1 v3)))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v1))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_3
_p_E_range_match)))))))) vc (fun zenon_H16=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule vc v2))/\((
~(Is_true (_p_V_consistency_rule vc v3)))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter vc v2 v3)) vc))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter vc v2 v3)) (_p_P_constr _p_C_capt_3
_p_E_range_match))))))) va (fun zenon_H15=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((Is_true (_p_V_consistency_rule vc va))/\((~(Is_true (
_p_V_consistency_rule vc v3)))/\(~(Is_true (_p_V_consistency_rule va v3)
))))->((Is_true (basics._equal_ _ (abst_value (abst_voter vc va v3)) vc)
)/\(Is_true (basics._equal_ _ (abst_diag (abst_voter vc va v3)) (
_p_P_constr _p_C_capt_3 _p_E_range_match)))))) vb (fun zenon_H14=>(
zenon_imply _ _ (fun zenon_H13=>(zenon_notand _ _ (fun zenon_Hf=>(
zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2:_p_V_T,((Is_true (
_p_V_consistency_rule v1 v2))->(Is_true (_p_V_consistency_rule v2 v1))))
) va (fun zenon_H12=>(zenon_all _p_V_T (fun v2:_p_V_T=>((Is_true (
_p_V_consistency_rule va v2))->(Is_true (_p_V_consistency_rule v2 va))))
 vc (fun zenon_H11=>(zenon_imply _ _ (fun zenon_H10=>(zenon_H10 H21)) (
fun zenon_He=>(zenon_Hf zenon_He)) zenon_H11)) zenon_H12))
abst_consistency_rule_is_symmetric)) (fun zenon_Hd=>(zenon_notand _ _ (
fun zenon_Hc=>(zenon_Hc (fun zenon_Hb=>(__C_1_2_1_2_4_LEMMA zenon_Hb))))
 (fun zenon_Ha=>(zenon_Ha (fun zenon_H9=>(H2 zenon_H9)))) zenon_Hd))
zenon_H13)) (fun zenon_H8=>(zenon_and _ _ (fun zenon_H6 zenon_H7=>(
zenon_G zenon_H6)) zenon_H8)) zenon_H14)) zenon_H15)) zenon_H16))
abst_vote_match_c3)))).
Qed.

0
135902fb2e34d6deb31e46eeb470a6de
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1458

%%begin-auto-proof
%%name: for_zenon___C_1_2_1_2_6_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* For hypothesis "H21". *)
              Parameter H21 : Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H212". *)
              Parameter H212 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_match_c2". *)
              Parameter abst_vote_match_c2 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v3))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_2 _p_E_range_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_2_6_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter va vb vc))
                          (_p_P_constr _p_C_capt_2 _p_E_range_match)))).
%%end-auto-proof
0
3a224d6e3f63497b76ecd3415c224526
proof
1752
Theorem for_zenon___C_1_2_1_2_6_LEMMA:(Is_true (basics._equal_ _ (
abst_diag (abst_voter va vb vc)) (_p_P_constr _p_C_capt_2
_p_E_range_match))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule v1 v2)))
/\((Is_true (_p_V_consistency_rule v1 v3))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v3))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_2
_p_E_range_match)))))))) va (fun zenon_H11=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule va v2)))
/\((Is_true (_p_V_consistency_rule va v3))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter va v2 v3)) v3))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter va v2 v3)) (_p_P_constr _p_C_capt_2
_p_E_range_match))))))) vb (fun zenon_H10=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((~(Is_true (_p_V_consistency_rule va vb)))/\((Is_true (
_p_V_consistency_rule va v3))/\(~(Is_true (_p_V_consistency_rule vb v3))
)))->((Is_true (basics._equal_ _ (abst_value (abst_voter va vb v3)) v3))
/\(Is_true (basics._equal_ _ (abst_diag (abst_voter va vb v3)) (
_p_P_constr _p_C_capt_2 _p_E_range_match)))))) vc (fun zenon_Hf=>(
zenon_imply _ _ (fun zenon_He=>(zenon_notand _ _ (fun zenon_Hd=>(
zenon_Hd (fun zenon_Hc=>(H2 zenon_Hc)))) (fun zenon_Hb=>(zenon_notand _
_ (fun zenon_Ha=>(zenon_Ha H21)) (fun zenon_H9=>(zenon_H9 (fun
zenon_H8=>(H212 zenon_H8)))) zenon_Hb)) zenon_He)) (fun zenon_H7=>(
zenon_and _ _ (fun zenon_H6 zenon_H5=>(zenon_G zenon_H5)) zenon_H7))
zenon_Hf)) zenon_H10)) zenon_H11)) abst_vote_match_c2)))).
Qed.

0
73612634519db754e915540a1ed4e32a
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1224

%%begin-auto-proof
%%name: for_zenon___C_1_2_1_2_7_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>6. *)
              Parameter __C_1_2_1_2_6_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter va vb vc))
                             (_p_P_constr _p_C_capt_2 _p_E_range_match))))).
              (* For species parameter method used via "by property vote#P!range_match_is_valid". *)
              Parameter _p_P_range_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_range_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_2_7_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))).
%%end-auto-proof
0
3b40c1d3df87d7d052410730e460ac8c
proof
1946
Theorem for_zenon___C_1_2_1_2_7_LEMMA:(Is_true (_p_P_valid (abst_diag (
abst_voter va vb vc)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(coq_builtins.zenon_syntactic_equal
zenon_focal_eqdec _ (abst_diag (abst_voter va vb vc)) (_p_P_constr
_p_C_capt_2 _p_E_range_match) (fun zenon_H9=>(zenon_all _p_P_T (fun x
:_p_P_T=>((Is_true (_p_E_equal (_p_P_prj_b x) _p_E_range_match))->(
Is_true (_p_P_valid x)))) (abst_diag (abst_voter va vb vc)) (fun
zenon_Hc=>(zenon_imply _ _ (fun zenon_H5=>(zenon_all _p_C_T (fun n1
:_p_C_T=>(forall n2:_p_E_T,(Is_true (_p_E_equal (_p_P_prj_b (
_p_P_constr n1 n2)) n2)))) _p_C_capt_2 (fun zenon_Hb=>(zenon_all _p_E_T
(fun n2:_p_E_T=>(Is_true (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_2 n2)) n2))) _p_E_range_match (fun zenon_H6=>(zenon_subst _ (
fun zenon_Vf=>(Is_true zenon_Vf)) (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_2 _p_E_range_match)) _p_E_range_match) (_p_E_equal (
_p_P_prj_b (abst_diag (abst_voter va vb vc))) _p_E_range_match) (fun
zenon_H7=>(zenon_subst _ (fun zenon_Vg=>(~((_p_E_equal zenon_Vg
_p_E_range_match) = (_p_E_equal (_p_P_prj_b (abst_diag (abst_voter va
vb vc))) _p_E_range_match)))) (_p_P_prj_b (_p_P_constr _p_C_capt_2
_p_E_range_match)) (_p_P_prj_b (abst_diag (abst_voter va vb vc))) (fun
zenon_H8=>(zenon_subst _ (fun zenon_Vh=>(~((_p_P_prj_b zenon_Vh) = (
_p_P_prj_b (abst_diag (abst_voter va vb vc)))))) (_p_P_constr
_p_C_capt_2 _p_E_range_match) (abst_diag (abst_voter va vb vc)) (fun
zenon_Ha=>(zenon_eqsym _ (abst_diag (abst_voter va vb vc)) (_p_P_constr
_p_C_capt_2 _p_E_range_match) zenon_H9 zenon_Ha)) (zenon_notnot _ (
refl_equal (_p_P_prj_b (abst_diag (abst_voter va vb vc))))) zenon_H8)) (
zenon_notnot _ (refl_equal (_p_E_equal (_p_P_prj_b (abst_diag (
abst_voter va vb vc))) _p_E_range_match))) zenon_H7)) zenon_H5 zenon_H6)
) zenon_Hb)) _p_P_prj_b_is_snd_of_pair)) (fun zenon_H4=>(zenon_G
zenon_H4)) zenon_Hc)) _p_P_range_match_is_valid)) __C_1_2_1_2_6_LEMMA)))
).
Qed.

0
fbf56e563a5c0f93243620c7343f0e16
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1487

%%begin-auto-proof
%%name: for_zenon___C_1_2_1_2_8_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H21". *)
              Parameter H21 : Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H212". *)
              Parameter H212 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For step <5>1. *)
              Parameter __C_1_2_1_2_1_LEMMA :
                (~Is_true (((_p_V_consistency_rule vb va)))).
              (* For method of Self used via "by property !vote_match_c1". *)
              Parameter abst_vote_match_c1 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v2))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1 _p_E_range_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_2_8_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vb va vc))
                          (_p_P_constr _p_C_capt_1 _p_E_range_match)))).
%%end-auto-proof
0
8d8e9846d5de242a1e55d341ce787766
proof
1771
Theorem for_zenon___C_1_2_1_2_8_LEMMA:(Is_true (basics._equal_ _ (
abst_diag (abst_voter vb va vc)) (_p_P_constr _p_C_capt_1
_p_E_range_match))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule v1 v2)))
/\((~(Is_true (_p_V_consistency_rule v1 v3)))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v2))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_range_match)))))))) vb (fun zenon_H11=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule vb v2)))
/\((~(Is_true (_p_V_consistency_rule vb v3)))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter vb v2 v3)) v2))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter vb v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_range_match))))))) va (fun zenon_H10=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((~(Is_true (_p_V_consistency_rule vb va)))/\((~(Is_true (
_p_V_consistency_rule vb v3)))/\(Is_true (_p_V_consistency_rule va v3)))
)->((Is_true (basics._equal_ _ (abst_value (abst_voter vb va v3)) va))
/\(Is_true (basics._equal_ _ (abst_diag (abst_voter vb va v3)) (
_p_P_constr _p_C_capt_1 _p_E_range_match)))))) vc (fun zenon_Hf=>(
zenon_imply _ _ (fun zenon_He=>(zenon_notand _ _ (fun zenon_Hd=>(
zenon_Hd (fun zenon_Hc=>(__C_1_2_1_2_1_LEMMA zenon_Hc)))) (fun
zenon_Hb=>(zenon_notand _ _ (fun zenon_Ha=>(zenon_Ha (fun zenon_H9=>(
H212 zenon_H9)))) (fun zenon_H8=>(zenon_H8 H21)) zenon_Hb)) zenon_He)) (
fun zenon_H7=>(zenon_and _ _ (fun zenon_H6 zenon_H5=>(zenon_G zenon_H5))
 zenon_H7)) zenon_Hf)) zenon_H10)) zenon_H11)) abst_vote_match_c1)))).
Qed.

0
c23ae01faad1f6811033a2b91c07b57a
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1224

%%begin-auto-proof
%%name: for_zenon___C_1_2_1_2_9_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>8. *)
              Parameter __C_1_2_1_2_8_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vb va vc))
                             (_p_P_constr _p_C_capt_1 _p_E_range_match))))).
              (* For species parameter method used via "by property vote#P!range_match_is_valid". *)
              Parameter _p_P_range_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_range_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_2_9_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc))))).
%%end-auto-proof
0
21d445df8b07ffeb9e14d15b74f3a051
proof
1946
Theorem for_zenon___C_1_2_1_2_9_LEMMA:(Is_true (_p_P_valid (abst_diag (
abst_voter vb va vc)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(coq_builtins.zenon_syntactic_equal
zenon_focal_eqdec _ (abst_diag (abst_voter vb va vc)) (_p_P_constr
_p_C_capt_1 _p_E_range_match) (fun zenon_H9=>(zenon_all _p_P_T (fun x
:_p_P_T=>((Is_true (_p_E_equal (_p_P_prj_b x) _p_E_range_match))->(
Is_true (_p_P_valid x)))) (abst_diag (abst_voter vb va vc)) (fun
zenon_Hc=>(zenon_imply _ _ (fun zenon_H5=>(zenon_all _p_C_T (fun n1
:_p_C_T=>(forall n2:_p_E_T,(Is_true (_p_E_equal (_p_P_prj_b (
_p_P_constr n1 n2)) n2)))) _p_C_capt_1 (fun zenon_Hb=>(zenon_all _p_E_T
(fun n2:_p_E_T=>(Is_true (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_1 n2)) n2))) _p_E_range_match (fun zenon_H6=>(zenon_subst _ (
fun zenon_Vf=>(Is_true zenon_Vf)) (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_1 _p_E_range_match)) _p_E_range_match) (_p_E_equal (
_p_P_prj_b (abst_diag (abst_voter vb va vc))) _p_E_range_match) (fun
zenon_H7=>(zenon_subst _ (fun zenon_Vg=>(~((_p_E_equal zenon_Vg
_p_E_range_match) = (_p_E_equal (_p_P_prj_b (abst_diag (abst_voter vb
va vc))) _p_E_range_match)))) (_p_P_prj_b (_p_P_constr _p_C_capt_1
_p_E_range_match)) (_p_P_prj_b (abst_diag (abst_voter vb va vc))) (fun
zenon_H8=>(zenon_subst _ (fun zenon_Vh=>(~((_p_P_prj_b zenon_Vh) = (
_p_P_prj_b (abst_diag (abst_voter vb va vc)))))) (_p_P_constr
_p_C_capt_1 _p_E_range_match) (abst_diag (abst_voter vb va vc)) (fun
zenon_Ha=>(zenon_eqsym _ (abst_diag (abst_voter vb va vc)) (_p_P_constr
_p_C_capt_1 _p_E_range_match) zenon_H9 zenon_Ha)) (zenon_notnot _ (
refl_equal (_p_P_prj_b (abst_diag (abst_voter vb va vc))))) zenon_H8)) (
zenon_notnot _ (refl_equal (_p_E_equal (_p_P_prj_b (abst_diag (
abst_voter vb va vc))) _p_E_range_match))) zenon_H7)) zenon_H5 zenon_H6)
) zenon_Hb)) _p_P_prj_b_is_snd_of_pair)) (fun zenon_H4=>(zenon_G
zenon_H4)) zenon_Hc)) _p_P_range_match_is_valid)) __C_1_2_1_2_8_LEMMA)))
).
Qed.

0
47a9a781df7ef9f66314cc0be3e83f53
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1802

%%begin-auto-proof
%%name: for_zenon___C_1_2_1_2_10_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* For hypothesis "H21". *)
              Parameter H21 : Is_true (((_p_V_consistency_rule va vc))).
              (* For step <5>4. *)
              Parameter __C_1_2_1_2_4_LEMMA :
                (~Is_true (((_p_V_consistency_rule vc vb)))).
              (* For method of Self used via "by property !vote_match_c3". *)
              Parameter abst_vote_match_c3 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_3 _p_E_range_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_2_10_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vc va vb))
                          (_p_P_constr _p_C_capt_3 _p_E_range_match)))).
%%end-auto-proof
0
b586a22cb122768419774fe5700c9340
proof
2203
Theorem for_zenon___C_1_2_1_2_10_LEMMA:(Is_true (basics._equal_ _ (
abst_diag (abst_voter vc va vb)) (_p_P_constr _p_C_capt_3
_p_E_range_match))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule v1 v2))/\((~
(Is_true (_p_V_consistency_rule v1 v3)))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v1))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_3
_p_E_range_match)))))))) vc (fun zenon_H16=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule vc v2))/\((
~(Is_true (_p_V_consistency_rule vc v3)))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter vc v2 v3)) vc))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter vc v2 v3)) (_p_P_constr _p_C_capt_3
_p_E_range_match))))))) va (fun zenon_H15=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((Is_true (_p_V_consistency_rule vc va))/\((~(Is_true (
_p_V_consistency_rule vc v3)))/\(~(Is_true (_p_V_consistency_rule va v3)
))))->((Is_true (basics._equal_ _ (abst_value (abst_voter vc va v3)) vc)
)/\(Is_true (basics._equal_ _ (abst_diag (abst_voter vc va v3)) (
_p_P_constr _p_C_capt_3 _p_E_range_match)))))) vb (fun zenon_H14=>(
zenon_imply _ _ (fun zenon_H13=>(zenon_notand _ _ (fun zenon_Hf=>(
zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2:_p_V_T,((Is_true (
_p_V_consistency_rule v1 v2))->(Is_true (_p_V_consistency_rule v2 v1))))
) va (fun zenon_H12=>(zenon_all _p_V_T (fun v2:_p_V_T=>((Is_true (
_p_V_consistency_rule va v2))->(Is_true (_p_V_consistency_rule v2 va))))
 vc (fun zenon_H11=>(zenon_imply _ _ (fun zenon_H10=>(zenon_H10 H21)) (
fun zenon_He=>(zenon_Hf zenon_He)) zenon_H11)) zenon_H12))
abst_consistency_rule_is_symmetric)) (fun zenon_Hd=>(zenon_notand _ _ (
fun zenon_Hc=>(zenon_Hc (fun zenon_Hb=>(__C_1_2_1_2_4_LEMMA zenon_Hb))))
 (fun zenon_Ha=>(zenon_Ha (fun zenon_H9=>(H2 zenon_H9)))) zenon_Hd))
zenon_H13)) (fun zenon_H8=>(zenon_and _ _ (fun zenon_H7 zenon_H6=>(
zenon_G zenon_H6)) zenon_H8)) zenon_H14)) zenon_H15)) zenon_H16))
abst_vote_match_c3)))).
Qed.

0
f63f587ae5791d5c10c9fc7a406bf18f
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1228

%%begin-auto-proof
%%name: for_zenon___C_1_2_1_2_11_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>10. *)
              Parameter __C_1_2_1_2_10_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vc va vb))
                             (_p_P_constr _p_C_capt_3 _p_E_range_match))))).
              (* For species parameter method used via "by property vote#P!range_match_is_valid". *)
              Parameter _p_P_range_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_range_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_2_11_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb))))).
%%end-auto-proof
0
192b330e095d55a2f924bb1ed627fa8f
proof
1948
Theorem for_zenon___C_1_2_1_2_11_LEMMA:(Is_true (_p_P_valid (abst_diag (
abst_voter vc va vb)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(coq_builtins.zenon_syntactic_equal
zenon_focal_eqdec _ (abst_diag (abst_voter vc va vb)) (_p_P_constr
_p_C_capt_3 _p_E_range_match) (fun zenon_H9=>(zenon_all _p_P_T (fun x
:_p_P_T=>((Is_true (_p_E_equal (_p_P_prj_b x) _p_E_range_match))->(
Is_true (_p_P_valid x)))) (abst_diag (abst_voter vc va vb)) (fun
zenon_Hc=>(zenon_imply _ _ (fun zenon_H5=>(zenon_all _p_C_T (fun n1
:_p_C_T=>(forall n2:_p_E_T,(Is_true (_p_E_equal (_p_P_prj_b (
_p_P_constr n1 n2)) n2)))) _p_C_capt_3 (fun zenon_Hb=>(zenon_all _p_E_T
(fun n2:_p_E_T=>(Is_true (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_3 n2)) n2))) _p_E_range_match (fun zenon_H6=>(zenon_subst _ (
fun zenon_Vf=>(Is_true zenon_Vf)) (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_3 _p_E_range_match)) _p_E_range_match) (_p_E_equal (
_p_P_prj_b (abst_diag (abst_voter vc va vb))) _p_E_range_match) (fun
zenon_H7=>(zenon_subst _ (fun zenon_Vg=>(~((_p_E_equal zenon_Vg
_p_E_range_match) = (_p_E_equal (_p_P_prj_b (abst_diag (abst_voter vc
va vb))) _p_E_range_match)))) (_p_P_prj_b (_p_P_constr _p_C_capt_3
_p_E_range_match)) (_p_P_prj_b (abst_diag (abst_voter vc va vb))) (fun
zenon_H8=>(zenon_subst _ (fun zenon_Vh=>(~((_p_P_prj_b zenon_Vh) = (
_p_P_prj_b (abst_diag (abst_voter vc va vb)))))) (_p_P_constr
_p_C_capt_3 _p_E_range_match) (abst_diag (abst_voter vc va vb)) (fun
zenon_Ha=>(zenon_eqsym _ (abst_diag (abst_voter vc va vb)) (_p_P_constr
_p_C_capt_3 _p_E_range_match) zenon_H9 zenon_Ha)) (zenon_notnot _ (
refl_equal (_p_P_prj_b (abst_diag (abst_voter vc va vb))))) zenon_H8)) (
zenon_notnot _ (refl_equal (_p_E_equal (_p_P_prj_b (abst_diag (
abst_voter vc va vb))) _p_E_range_match))) zenon_H7)) zenon_H5 zenon_H6)
) zenon_Hb)) _p_P_prj_b_is_snd_of_pair)) (fun zenon_H4=>(zenon_G
zenon_H4)) zenon_Hc)) _p_P_range_match_is_valid)) __C_1_2_1_2_10_LEMMA))
)).
Qed.

0
1c15555ed9fc0c182812de3063c31b1a
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
2683

%%begin-auto-proof
%%name: for_zenon___C_1_2_1_2_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For step <5>2. *)
            Parameter __C_1_2_1_2_2_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter va vb vc)) vc)))).
            (* For step <5>3. *)
            Parameter __C_1_2_1_2_3_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter vb va vc)) va)))).
            (* For step <5>5. *)
            Parameter __C_1_2_1_2_5_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter vc va vb)) vc)))).
            (* For step <5>7. *)
            Parameter __C_1_2_1_2_7_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc)))))).
            (* For step <5>9. *)
            Parameter __C_1_2_1_2_9_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc)))))).
            (* For step <5>11. *)
            Parameter __C_1_2_1_2_11_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb)))))).
            (* For hypothesis "H21". *)
            Parameter H21 : Is_true (((_p_V_consistency_rule va vc))).
            (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
            Parameter abst_consistency_rule_is_symmetric :
              forall v1  v2 : _p_V_T,
                Is_true ((_p_V_consistency_rule v1 v2)) ->
                  Is_true ((_p_V_consistency_rule v2 v1)).
            (* For species parameter method used via "by property vote#V!consistency_rule_reflexive". *)
            Parameter _p_V_consistency_rule_reflexive :
              forall a : _p_V_T, Is_true ((_p_V_consistency_rule a a)).
            (* For method of Self used via "by definition of !compatible". *)
            Definition abst_compatible (s1 : (Datatypes.prod _p_V_T _p_P_T))
              (s2 : (Datatypes.prod _p_V_T _p_P_T)) : coq_builtins.prop__t :=
              (Is_true ((_p_P_valid (abst_diag s1))) /\
                 Is_true ((_p_P_valid (abst_diag s2))) /\
                   Is_true ((_p_V_consistency_rule (abst_value s1)
                              (abst_value s2)))) \/
                (~Is_true (((_p_P_valid (abst_diag s1)))) /\
                   ~Is_true (((_p_P_valid (abst_diag s2))))).
            (* Theorem's body. *)
            Theorem for_zenon___C_1_2_1_2_LEMMA :
            ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
               (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
%%end-auto-proof
0
fbd7a628856d4ff0b2c4d2f2026f5932
proof
3848
Theorem for_zenon___C_1_2_1_2_LEMMA:((abst_compatible (abst_voter va vb
vc) (abst_voter vb va vc))/\(abst_compatible (abst_voter va vb vc) (
abst_voter vc va vb))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notand _ _ (fun zenon_H26=>(let zenon_H25
:=zenon_H26 in (zenon_notor _ _ (fun zenon_H23 zenon_H24=>(zenon_notand
_ _ (fun zenon_H13=>(zenon_H13 __C_1_2_1_2_7_LEMMA)) (fun zenon_H22=>(
zenon_notand _ _ (fun zenon_H21=>(zenon_H21 __C_1_2_1_2_9_LEMMA)) (fun
zenon_H18=>(coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ (
abst_value (abst_voter va vb vc)) vc (fun zenon_He=>(
coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ (abst_value (
abst_voter vb va vc)) va (fun zenon_H1b=>(zenon_all _p_V_T (fun v1
:_p_V_T=>(forall v2:_p_V_T,((Is_true (_p_V_consistency_rule v1 v2))->(
Is_true (_p_V_consistency_rule v2 v1))))) va (fun zenon_H20=>(zenon_all
_p_V_T (fun v2:_p_V_T=>((Is_true (_p_V_consistency_rule va v2))->(
Is_true (_p_V_consistency_rule v2 va)))) vc (fun zenon_H1f=>(
zenon_imply _ _ (fun zenon_H1e=>(zenon_H1e H21)) (fun zenon_H19=>(
zenon_subst _ (fun zenon_Vi=>(Is_true zenon_Vi)) (_p_V_consistency_rule
vc va) (_p_V_consistency_rule (abst_value (abst_voter va vb vc)) (
abst_value (abst_voter vb va vc))) (fun zenon_H1a=>(zenon_subst _ (fun
zenon_Vk=>(~((_p_V_consistency_rule zenon_Vk va) = (
_p_V_consistency_rule (abst_value (abst_voter va vb vc)) (abst_value (
abst_voter vb va vc)))))) vc (abst_value (abst_voter va vb vc)) (fun
zenon_H1d=>(zenon_eqsym _ (abst_value (abst_voter va vb vc)) vc
zenon_He zenon_H1d)) (zenon_subst _ (fun zenon_Vj=>(~((
_p_V_consistency_rule (abst_value (abst_voter va vb vc)) zenon_Vj) = (
_p_V_consistency_rule (abst_value (abst_voter va vb vc)) (abst_value (
abst_voter vb va vc)))))) va (abst_value (abst_voter vb va vc)) (fun
zenon_H1c=>(zenon_eqsym _ (abst_value (abst_voter vb va vc)) va
zenon_H1b zenon_H1c)) (zenon_notnot _ (refl_equal (
_p_V_consistency_rule (abst_value (abst_voter va vb vc)) (abst_value (
abst_voter vb va vc)))))) zenon_H1a)) zenon_H18 zenon_H19)) zenon_H1f))
zenon_H20)) abst_consistency_rule_is_symmetric)) __C_1_2_1_2_3_LEMMA))
__C_1_2_1_2_2_LEMMA)) zenon_H22)) zenon_H23)) zenon_H25))) (fun
zenon_H17=>(let zenon_H16:=zenon_H17 in (zenon_notor _ _ (fun zenon_H14
zenon_H15=>(zenon_notand _ _ (fun zenon_H13=>(zenon_H13
__C_1_2_1_2_7_LEMMA)) (fun zenon_H12=>(zenon_notand _ _ (fun zenon_H11=>
(zenon_H11 __C_1_2_1_2_11_LEMMA)) (fun zenon_Ha=>(zenon_all _p_V_T (fun
a:_p_V_T=>(Is_true (_p_V_consistency_rule a a))) (abst_value (
abst_voter va vb vc)) (fun zenon_Hb=>(zenon_subst _ (fun zenon_Vf=>(
Is_true zenon_Vf)) (_p_V_consistency_rule (abst_value (abst_voter va vb
vc)) (abst_value (abst_voter va vb vc))) (_p_V_consistency_rule (
abst_value (abst_voter va vb vc)) (abst_value (abst_voter vc va vb))) (
fun zenon_Hc=>(zenon_subst _ (fun zenon_Vg=>(~((_p_V_consistency_rule (
abst_value (abst_voter va vb vc)) zenon_Vg) = (_p_V_consistency_rule (
abst_value (abst_voter va vb vc)) (abst_value (abst_voter vc va vb))))))
 (abst_value (abst_voter va vb vc)) (abst_value (abst_voter vc va vb)) (
fun zenon_Hd=>(coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ (
abst_value (abst_voter va vb vc)) vc (fun zenon_He=>(
coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ (abst_value (
abst_voter vc va vb)) vc (fun zenon_Hf=>(zenon_subst _ (fun zenon_Vh=>((
abst_value (abst_voter va vb vc)) = zenon_Vh)) vc (abst_value (
abst_voter vc va vb)) (fun zenon_H10=>(zenon_eqsym _ (abst_value (
abst_voter vc va vb)) vc zenon_Hf zenon_H10)) zenon_Hd zenon_He))
__C_1_2_1_2_5_LEMMA)) __C_1_2_1_2_2_LEMMA)) (zenon_notnot _ (refl_equal
(_p_V_consistency_rule (abst_value (abst_voter va vb vc)) (abst_value (
abst_voter vc va vb))))) zenon_Hc)) zenon_Ha zenon_Hb))
_p_V_consistency_rule_reflexive)) zenon_H12)) zenon_H14)) zenon_H16)))
zenon_G)))).
Qed.

0
a43434232c673dec7ecd88f74d4a5f7d
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
2311

%%begin-auto-proof
%%name: for_zenon___C_1_2_1_LEMMA
          
          
          
          (* Methods to use for automated proof. *)
          (* For step <4>1. *)
          Parameter __C_1_2_1_1_LEMMA :
            (Is_true (((_p_V_consistency_rule vb vc)))) -> (((abst_compatible
                                                               (abst_voter va
                                                                 vb vc)
                                                               (abst_voter vb
                                                                 va vc)) /\
                                                               (abst_compatible
                                                                 (abst_voter
                                                                   va vb vc)
                                                                 (abst_voter
                                                                   vc va vb)))).
          (* For step <4>2. *)
          Parameter __C_1_2_1_2_LEMMA :
            (~Is_true (((_p_V_consistency_rule vb vc)))) -> (((abst_compatible
                                                                (abst_voter
                                                                  va vb vc)
                                                                (abst_voter
                                                                  vb va vc)) /\
                                                                (abst_compatible
                                                                  (abst_voter
                                                                    va vb vc)
                                                                  (abst_voter
                                                                    vc va vb)))).
          (* For method of Self used via "by property !compatible". *)
          Parameter abst_compatible :
            (Datatypes.prod _p_V_T _p_P_T) ->
              (Datatypes.prod _p_V_T _p_P_T) -> coq_builtins.prop__t.
          (* Theorem's body. *)
          Theorem for_zenon___C_1_2_1_LEMMA :
          ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
             (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
%%end-auto-proof
0
b5c63072b514a16c0cb01b2038603ecb
proof
403
Theorem for_zenon___C_1_2_1_LEMMA:((abst_compatible (abst_voter va vb
vc) (abst_voter vb va vc))/\(abst_compatible (abst_voter va vb vc) (
abst_voter vc va vb))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_imply _ _ (fun zenon_H5=>(zenon_imply _ _ (
fun zenon_H6=>(zenon_H6 zenon_H5)) (fun zenon_H4=>(zenon_G zenon_H4))
__C_1_2_1_2_LEMMA)) (fun zenon_H4=>(zenon_G zenon_H4))
__C_1_2_1_1_LEMMA)))).
Qed.

0
0a3a67546e3a64071d6deb84db7c02fd
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
730

%%begin-auto-proof
%%name: for_zenon___C_1_2_2_1_1_1_LEMMA
                
                
                
                (* Methods to use for automated proof. *)
                (* For species parameter method used via "by property vote#V!consistency_rule_symmetric". *)
                Parameter _p_V_consistency_rule_symmetric :
                  forall a  b : _p_V_T,
                    Is_true ((_p_V_consistency_rule a b)) ->
                      Is_true ((_p_V_consistency_rule b a)).
                (* Theorem's body. *)
                Theorem for_zenon___C_1_2_2_1_1_1_LEMMA :
                Is_true ((_p_V_consistency_rule vb va)) ->
                  Is_true ((_p_V_consistency_rule va vb)).
%%end-auto-proof
0
467f475a0d9aa1047dcece577eac1102
proof
654
Theorem for_zenon___C_1_2_2_1_1_1_LEMMA:((Is_true (
_p_V_consistency_rule vb va))->(Is_true (_p_V_consistency_rule va vb))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notimply _ _ (fun zenon_H4 zenon_H3=>(
zenon_all _p_V_T (fun a:_p_V_T=>(forall b:_p_V_T,((Is_true (
_p_V_consistency_rule a b))->(Is_true (_p_V_consistency_rule b a)))))
vb (fun zenon_H7=>(zenon_all _p_V_T (fun b:_p_V_T=>((Is_true (
_p_V_consistency_rule vb b))->(Is_true (_p_V_consistency_rule b vb))))
va (fun zenon_H6=>(zenon_imply _ _ (fun zenon_H5=>(zenon_H5 zenon_H4)) (
fun zenon_H2=>(zenon_H3 zenon_H2)) zenon_H6)) zenon_H7))
_p_V_consistency_rule_symmetric)) zenon_G)))).
Qed.

0
8e75e93546e47e800ddc891e204380ca
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
641

%%begin-auto-proof
%%name: for_zenon___C_1_2_2_1_1_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <6>1. *)
              Parameter __C_1_2_2_1_1_1_LEMMA :
                (Is_true ((_p_V_consistency_rule vb va)) ->
                   Is_true ((_p_V_consistency_rule va vb))).
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_1_1_LEMMA :
              ~Is_true (((_p_V_consistency_rule vb va))).
%%end-auto-proof
0
eb7b883e78aca1ae696b438d7fb1ccfe
proof
259
Theorem for_zenon___C_1_2_2_1_1_LEMMA:(~(Is_true (_p_V_consistency_rule
vb va))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_G (fun zenon_H4=>(zenon_imply _ _ (fun
zenon_H5=>(zenon_H5 zenon_H4)) (fun zenon_H3=>(H2 zenon_H3))
__C_1_2_2_1_1_1_LEMMA)))))).
Qed.

0
66ed4c9525e29611e9703667fdc3b771
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1419

%%begin-auto-proof
%%name: for_zenon___C_1_2_2_1_2_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* For hypothesis "H22". *)
              Parameter H22 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H221". *)
              Parameter H221 : Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_match_c1". *)
              Parameter abst_vote_match_c1 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v2))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1 _p_E_range_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_1_2_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter va vb vc)) vb))).
%%end-auto-proof
0
4bd99662d3dfd245d0ee90e468094261
proof
1713
Theorem for_zenon___C_1_2_2_1_2_LEMMA:(Is_true (basics._equal_ _ (
abst_value (abst_voter va vb vc)) vb)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule v1 v2)))
/\((~(Is_true (_p_V_consistency_rule v1 v3)))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v2))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_range_match)))))))) va (fun zenon_H11=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule va v2)))
/\((~(Is_true (_p_V_consistency_rule va v3)))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter va v2 v3)) v2))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter va v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_range_match))))))) vb (fun zenon_H10=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((~(Is_true (_p_V_consistency_rule va vb)))/\((~(Is_true (
_p_V_consistency_rule va v3)))/\(Is_true (_p_V_consistency_rule vb v3)))
)->((Is_true (basics._equal_ _ (abst_value (abst_voter va vb v3)) vb))
/\(Is_true (basics._equal_ _ (abst_diag (abst_voter va vb v3)) (
_p_P_constr _p_C_capt_1 _p_E_range_match)))))) vc (fun zenon_Hf=>(
zenon_imply _ _ (fun zenon_He=>(zenon_notand _ _ (fun zenon_Hd=>(
zenon_Hd (fun zenon_Hc=>(H2 zenon_Hc)))) (fun zenon_Hb=>(zenon_notand _
_ (fun zenon_Ha=>(zenon_Ha (fun zenon_H9=>(H22 zenon_H9)))) (fun
zenon_H8=>(zenon_H8 H221)) zenon_Hb)) zenon_He)) (fun zenon_H7=>(
zenon_and _ _ (fun zenon_H5 zenon_H6=>(zenon_G zenon_H5)) zenon_H7))
zenon_Hf)) zenon_H10)) zenon_H11)) abst_vote_match_c1)))).
Qed.

0
f0a36ffd825cc353792ab1cfe1f76bcc
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1448

%%begin-auto-proof
%%name: for_zenon___C_1_2_2_1_3_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H22". *)
              Parameter H22 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H221". *)
              Parameter H221 : Is_true (((_p_V_consistency_rule vb vc))).
              (* For step <5>1. *)
              Parameter __C_1_2_2_1_1_LEMMA :
                (~Is_true (((_p_V_consistency_rule vb va)))).
              (* For method of Self used via "by property !vote_match_c2". *)
              Parameter abst_vote_match_c2 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v3))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_2 _p_E_range_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_1_3_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter vb va vc)) vc))).
%%end-auto-proof
0
0c6c9becc27eb158dd57811f571698e5
proof
1730
Theorem for_zenon___C_1_2_2_1_3_LEMMA:(Is_true (basics._equal_ _ (
abst_value (abst_voter vb va vc)) vc)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule v1 v2)))
/\((Is_true (_p_V_consistency_rule v1 v3))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v3))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_2
_p_E_range_match)))))))) vb (fun zenon_H11=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule vb v2)))
/\((Is_true (_p_V_consistency_rule vb v3))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter vb v2 v3)) v3))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter vb v2 v3)) (_p_P_constr _p_C_capt_2
_p_E_range_match))))))) va (fun zenon_H10=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((~(Is_true (_p_V_consistency_rule vb va)))/\((Is_true (
_p_V_consistency_rule vb v3))/\(~(Is_true (_p_V_consistency_rule va v3))
)))->((Is_true (basics._equal_ _ (abst_value (abst_voter vb va v3)) v3))
/\(Is_true (basics._equal_ _ (abst_diag (abst_voter vb va v3)) (
_p_P_constr _p_C_capt_2 _p_E_range_match)))))) vc (fun zenon_Hf=>(
zenon_imply _ _ (fun zenon_He=>(zenon_notand _ _ (fun zenon_Hd=>(
zenon_Hd (fun zenon_Hc=>(__C_1_2_2_1_1_LEMMA zenon_Hc)))) (fun
zenon_Hb=>(zenon_notand _ _ (fun zenon_Ha=>(zenon_Ha H221)) (fun
zenon_H9=>(zenon_H9 (fun zenon_H8=>(H22 zenon_H8)))) zenon_Hb))
zenon_He)) (fun zenon_H7=>(zenon_and _ _ (fun zenon_H5 zenon_H6=>(
zenon_G zenon_H5)) zenon_H7)) zenon_Hf)) zenon_H10)) zenon_H11))
abst_vote_match_c2)))).
Qed.

0
8fb6a9b7dcdab9d5ef9cd168ed465fe8
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
730

%%begin-auto-proof
%%name: for_zenon___C_1_2_2_1_4_1_LEMMA
                
                
                
                (* Methods to use for automated proof. *)
                (* For species parameter method used via "by property vote#V!consistency_rule_symmetric". *)
                Parameter _p_V_consistency_rule_symmetric :
                  forall a  b : _p_V_T,
                    Is_true ((_p_V_consistency_rule a b)) ->
                      Is_true ((_p_V_consistency_rule b a)).
                (* Theorem's body. *)
                Theorem for_zenon___C_1_2_2_1_4_1_LEMMA :
                Is_true ((_p_V_consistency_rule vc va)) ->
                  Is_true ((_p_V_consistency_rule va vc)).
%%end-auto-proof
0
fb8ccdab59eba5fb3cced98a5b14dd56
proof
654
Theorem for_zenon___C_1_2_2_1_4_1_LEMMA:((Is_true (
_p_V_consistency_rule vc va))->(Is_true (_p_V_consistency_rule va vc))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notimply _ _ (fun zenon_H4 zenon_H3=>(
zenon_all _p_V_T (fun a:_p_V_T=>(forall b:_p_V_T,((Is_true (
_p_V_consistency_rule a b))->(Is_true (_p_V_consistency_rule b a)))))
vc (fun zenon_H7=>(zenon_all _p_V_T (fun b:_p_V_T=>((Is_true (
_p_V_consistency_rule vc b))->(Is_true (_p_V_consistency_rule b vc))))
va (fun zenon_H6=>(zenon_imply _ _ (fun zenon_H5=>(zenon_H5 zenon_H4)) (
fun zenon_H2=>(zenon_H3 zenon_H2)) zenon_H6)) zenon_H7))
_p_V_consistency_rule_symmetric)) zenon_G)))).
Qed.

0
8746253b554bed04ef2cc05b8e5492eb
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
643

%%begin-auto-proof
%%name: for_zenon___C_1_2_2_1_4_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <6>1. *)
              Parameter __C_1_2_2_1_4_1_LEMMA :
                (Is_true ((_p_V_consistency_rule vc va)) ->
                   Is_true ((_p_V_consistency_rule va vc))).
              (* For hypothesis "H22". *)
              Parameter H22 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_1_4_LEMMA :
              ~Is_true (((_p_V_consistency_rule vc va))).
%%end-auto-proof
0
555366bd5833ed12b6c438359d615005
proof
260
Theorem for_zenon___C_1_2_2_1_4_LEMMA:(~(Is_true (_p_V_consistency_rule
vc va))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_G (fun zenon_H4=>(zenon_imply _ _ (fun
zenon_H5=>(zenon_H5 zenon_H4)) (fun zenon_H3=>(H22 zenon_H3))
__C_1_2_2_1_4_1_LEMMA)))))).
Qed.

0
2c6444d510d9221b943c5ade32e890c1
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1763

%%begin-auto-proof
%%name: for_zenon___C_1_2_2_1_5_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* For hypothesis "H221". *)
              Parameter H221 : Is_true (((_p_V_consistency_rule vb vc))).
              (* For step <5>4. *)
              Parameter __C_1_2_2_1_4_LEMMA :
                (~Is_true (((_p_V_consistency_rule vc va)))).
              (* For method of Self used via "by property !vote_match_c2". *)
              Parameter abst_vote_match_c2 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v3))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_2 _p_E_range_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_1_5_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter vc va vb)) vb))).
%%end-auto-proof
0
c8d1527e8c82ee8dcf300528d72131e4
proof
2160
Theorem for_zenon___C_1_2_2_1_5_LEMMA:(Is_true (basics._equal_ _ (
abst_value (abst_voter vc va vb)) vb)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule v1 v2)))
/\((Is_true (_p_V_consistency_rule v1 v3))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v3))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_2
_p_E_range_match)))))))) vc (fun zenon_H16=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule vc v2)))
/\((Is_true (_p_V_consistency_rule vc v3))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter vc v2 v3)) v3))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter vc v2 v3)) (_p_P_constr _p_C_capt_2
_p_E_range_match))))))) va (fun zenon_H15=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((~(Is_true (_p_V_consistency_rule vc va)))/\((Is_true (
_p_V_consistency_rule vc v3))/\(~(Is_true (_p_V_consistency_rule va v3))
)))->((Is_true (basics._equal_ _ (abst_value (abst_voter vc va v3)) v3))
/\(Is_true (basics._equal_ _ (abst_diag (abst_voter vc va v3)) (
_p_P_constr _p_C_capt_2 _p_E_range_match)))))) vb (fun zenon_H14=>(
zenon_imply _ _ (fun zenon_H13=>(zenon_notand _ _ (fun zenon_H12=>(
zenon_H12 (fun zenon_H11=>(__C_1_2_2_1_4_LEMMA zenon_H11)))) (fun
zenon_H10=>(zenon_notand _ _ (fun zenon_Hc=>(zenon_all _p_V_T (fun v1
:_p_V_T=>(forall v2:_p_V_T,((Is_true (_p_V_consistency_rule v1 v2))->(
Is_true (_p_V_consistency_rule v2 v1))))) vb (fun zenon_Hf=>(zenon_all
_p_V_T (fun v2:_p_V_T=>((Is_true (_p_V_consistency_rule vb v2))->(
Is_true (_p_V_consistency_rule v2 vb)))) vc (fun zenon_He=>(zenon_imply
_ _ (fun zenon_Hd=>(zenon_Hd H221)) (fun zenon_Hb=>(zenon_Hc zenon_Hb))
zenon_He)) zenon_Hf)) abst_consistency_rule_is_symmetric)) (fun
zenon_Ha=>(zenon_Ha (fun zenon_H9=>(H2 zenon_H9)))) zenon_H10))
zenon_H13)) (fun zenon_H8=>(zenon_and _ _ (fun zenon_H6 zenon_H7=>(
zenon_G zenon_H6)) zenon_H8)) zenon_H14)) zenon_H15)) zenon_H16))
abst_vote_match_c2)))).
Qed.

0
bf51b1585b34506330adc1b2ea0cde3f
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1458

%%begin-auto-proof
%%name: for_zenon___C_1_2_2_1_6_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* For hypothesis "H22". *)
              Parameter H22 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H221". *)
              Parameter H221 : Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_match_c1". *)
              Parameter abst_vote_match_c1 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v2))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1 _p_E_range_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_1_6_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter va vb vc))
                          (_p_P_constr _p_C_capt_1 _p_E_range_match)))).
%%end-auto-proof
0
846152f28bd2efa6b889128219e55303
proof
1752
Theorem for_zenon___C_1_2_2_1_6_LEMMA:(Is_true (basics._equal_ _ (
abst_diag (abst_voter va vb vc)) (_p_P_constr _p_C_capt_1
_p_E_range_match))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule v1 v2)))
/\((~(Is_true (_p_V_consistency_rule v1 v3)))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v2))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_range_match)))))))) va (fun zenon_H11=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule va v2)))
/\((~(Is_true (_p_V_consistency_rule va v3)))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter va v2 v3)) v2))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter va v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_range_match))))))) vb (fun zenon_H10=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((~(Is_true (_p_V_consistency_rule va vb)))/\((~(Is_true (
_p_V_consistency_rule va v3)))/\(Is_true (_p_V_consistency_rule vb v3)))
)->((Is_true (basics._equal_ _ (abst_value (abst_voter va vb v3)) vb))
/\(Is_true (basics._equal_ _ (abst_diag (abst_voter va vb v3)) (
_p_P_constr _p_C_capt_1 _p_E_range_match)))))) vc (fun zenon_Hf=>(
zenon_imply _ _ (fun zenon_He=>(zenon_notand _ _ (fun zenon_Hd=>(
zenon_Hd (fun zenon_Hc=>(H2 zenon_Hc)))) (fun zenon_Hb=>(zenon_notand _
_ (fun zenon_Ha=>(zenon_Ha (fun zenon_H9=>(H22 zenon_H9)))) (fun
zenon_H8=>(zenon_H8 H221)) zenon_Hb)) zenon_He)) (fun zenon_H7=>(
zenon_and _ _ (fun zenon_H6 zenon_H5=>(zenon_G zenon_H5)) zenon_H7))
zenon_Hf)) zenon_H10)) zenon_H11)) abst_vote_match_c1)))).
Qed.

0
0237132577a4803b6ffdfb4a40ed2765
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1224

%%begin-auto-proof
%%name: for_zenon___C_1_2_2_1_7_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>6. *)
              Parameter __C_1_2_2_1_6_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter va vb vc))
                             (_p_P_constr _p_C_capt_1 _p_E_range_match))))).
              (* For species parameter method used via "by property vote#P!range_match_is_valid". *)
              Parameter _p_P_range_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_range_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_1_7_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))).
%%end-auto-proof
0
bc4e0a58cc7bb90b8fc18df420b330fe
proof
1946
Theorem for_zenon___C_1_2_2_1_7_LEMMA:(Is_true (_p_P_valid (abst_diag (
abst_voter va vb vc)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(coq_builtins.zenon_syntactic_equal
zenon_focal_eqdec _ (abst_diag (abst_voter va vb vc)) (_p_P_constr
_p_C_capt_1 _p_E_range_match) (fun zenon_H9=>(zenon_all _p_P_T (fun x
:_p_P_T=>((Is_true (_p_E_equal (_p_P_prj_b x) _p_E_range_match))->(
Is_true (_p_P_valid x)))) (abst_diag (abst_voter va vb vc)) (fun
zenon_Hc=>(zenon_imply _ _ (fun zenon_H5=>(zenon_all _p_C_T (fun n1
:_p_C_T=>(forall n2:_p_E_T,(Is_true (_p_E_equal (_p_P_prj_b (
_p_P_constr n1 n2)) n2)))) _p_C_capt_1 (fun zenon_Hb=>(zenon_all _p_E_T
(fun n2:_p_E_T=>(Is_true (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_1 n2)) n2))) _p_E_range_match (fun zenon_H6=>(zenon_subst _ (
fun zenon_Vf=>(Is_true zenon_Vf)) (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_1 _p_E_range_match)) _p_E_range_match) (_p_E_equal (
_p_P_prj_b (abst_diag (abst_voter va vb vc))) _p_E_range_match) (fun
zenon_H7=>(zenon_subst _ (fun zenon_Vg=>(~((_p_E_equal zenon_Vg
_p_E_range_match) = (_p_E_equal (_p_P_prj_b (abst_diag (abst_voter va
vb vc))) _p_E_range_match)))) (_p_P_prj_b (_p_P_constr _p_C_capt_1
_p_E_range_match)) (_p_P_prj_b (abst_diag (abst_voter va vb vc))) (fun
zenon_H8=>(zenon_subst _ (fun zenon_Vh=>(~((_p_P_prj_b zenon_Vh) = (
_p_P_prj_b (abst_diag (abst_voter va vb vc)))))) (_p_P_constr
_p_C_capt_1 _p_E_range_match) (abst_diag (abst_voter va vb vc)) (fun
zenon_Ha=>(zenon_eqsym _ (abst_diag (abst_voter va vb vc)) (_p_P_constr
_p_C_capt_1 _p_E_range_match) zenon_H9 zenon_Ha)) (zenon_notnot _ (
refl_equal (_p_P_prj_b (abst_diag (abst_voter va vb vc))))) zenon_H8)) (
zenon_notnot _ (refl_equal (_p_E_equal (_p_P_prj_b (abst_diag (
abst_voter va vb vc))) _p_E_range_match))) zenon_H7)) zenon_H5 zenon_H6)
) zenon_Hb)) _p_P_prj_b_is_snd_of_pair)) (fun zenon_H4=>(zenon_G
zenon_H4)) zenon_Hc)) _p_P_range_match_is_valid)) __C_1_2_2_1_6_LEMMA)))
).
Qed.

0
cce970f5bd2f47d5da5163a2f939bff7
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1487

%%begin-auto-proof
%%name: for_zenon___C_1_2_2_1_8_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H22". *)
              Parameter H22 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H221". *)
              Parameter H221 : Is_true (((_p_V_consistency_rule vb vc))).
              (* For step <5>1. *)
              Parameter __C_1_2_2_1_1_LEMMA :
                (~Is_true (((_p_V_consistency_rule vb va)))).
              (* For method of Self used via "by property !vote_match_c2". *)
              Parameter abst_vote_match_c2 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v3))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_2 _p_E_range_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_1_8_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vb va vc))
                          (_p_P_constr _p_C_capt_2 _p_E_range_match)))).
%%end-auto-proof
0
ac4c04dc501e96e68291a5a7f45921cb
proof
1769
Theorem for_zenon___C_1_2_2_1_8_LEMMA:(Is_true (basics._equal_ _ (
abst_diag (abst_voter vb va vc)) (_p_P_constr _p_C_capt_2
_p_E_range_match))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule v1 v2)))
/\((Is_true (_p_V_consistency_rule v1 v3))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v3))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_2
_p_E_range_match)))))))) vb (fun zenon_H11=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule vb v2)))
/\((Is_true (_p_V_consistency_rule vb v3))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter vb v2 v3)) v3))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter vb v2 v3)) (_p_P_constr _p_C_capt_2
_p_E_range_match))))))) va (fun zenon_H10=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((~(Is_true (_p_V_consistency_rule vb va)))/\((Is_true (
_p_V_consistency_rule vb v3))/\(~(Is_true (_p_V_consistency_rule va v3))
)))->((Is_true (basics._equal_ _ (abst_value (abst_voter vb va v3)) v3))
/\(Is_true (basics._equal_ _ (abst_diag (abst_voter vb va v3)) (
_p_P_constr _p_C_capt_2 _p_E_range_match)))))) vc (fun zenon_Hf=>(
zenon_imply _ _ (fun zenon_He=>(zenon_notand _ _ (fun zenon_Hd=>(
zenon_Hd (fun zenon_Hc=>(__C_1_2_2_1_1_LEMMA zenon_Hc)))) (fun
zenon_Hb=>(zenon_notand _ _ (fun zenon_Ha=>(zenon_Ha H221)) (fun
zenon_H9=>(zenon_H9 (fun zenon_H8=>(H22 zenon_H8)))) zenon_Hb))
zenon_He)) (fun zenon_H7=>(zenon_and _ _ (fun zenon_H6 zenon_H5=>(
zenon_G zenon_H5)) zenon_H7)) zenon_Hf)) zenon_H10)) zenon_H11))
abst_vote_match_c2)))).
Qed.

0
40ab40a6a0b17b4faea0dd5b8edb6eaa
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1224

%%begin-auto-proof
%%name: for_zenon___C_1_2_2_1_9_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>8. *)
              Parameter __C_1_2_2_1_8_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vb va vc))
                             (_p_P_constr _p_C_capt_2 _p_E_range_match))))).
              (* For species parameter method used via "by property vote#P!range_match_is_valid". *)
              Parameter _p_P_range_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_range_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_1_9_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc))))).
%%end-auto-proof
0
9fea656e847f8a56ab5f2a0cb5bbdeb1
proof
1946
Theorem for_zenon___C_1_2_2_1_9_LEMMA:(Is_true (_p_P_valid (abst_diag (
abst_voter vb va vc)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(coq_builtins.zenon_syntactic_equal
zenon_focal_eqdec _ (abst_diag (abst_voter vb va vc)) (_p_P_constr
_p_C_capt_2 _p_E_range_match) (fun zenon_H9=>(zenon_all _p_P_T (fun x
:_p_P_T=>((Is_true (_p_E_equal (_p_P_prj_b x) _p_E_range_match))->(
Is_true (_p_P_valid x)))) (abst_diag (abst_voter vb va vc)) (fun
zenon_Hc=>(zenon_imply _ _ (fun zenon_H5=>(zenon_all _p_C_T (fun n1
:_p_C_T=>(forall n2:_p_E_T,(Is_true (_p_E_equal (_p_P_prj_b (
_p_P_constr n1 n2)) n2)))) _p_C_capt_2 (fun zenon_Hb=>(zenon_all _p_E_T
(fun n2:_p_E_T=>(Is_true (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_2 n2)) n2))) _p_E_range_match (fun zenon_H6=>(zenon_subst _ (
fun zenon_Vf=>(Is_true zenon_Vf)) (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_2 _p_E_range_match)) _p_E_range_match) (_p_E_equal (
_p_P_prj_b (abst_diag (abst_voter vb va vc))) _p_E_range_match) (fun
zenon_H7=>(zenon_subst _ (fun zenon_Vg=>(~((_p_E_equal zenon_Vg
_p_E_range_match) = (_p_E_equal (_p_P_prj_b (abst_diag (abst_voter vb
va vc))) _p_E_range_match)))) (_p_P_prj_b (_p_P_constr _p_C_capt_2
_p_E_range_match)) (_p_P_prj_b (abst_diag (abst_voter vb va vc))) (fun
zenon_H8=>(zenon_subst _ (fun zenon_Vh=>(~((_p_P_prj_b zenon_Vh) = (
_p_P_prj_b (abst_diag (abst_voter vb va vc)))))) (_p_P_constr
_p_C_capt_2 _p_E_range_match) (abst_diag (abst_voter vb va vc)) (fun
zenon_Ha=>(zenon_eqsym _ (abst_diag (abst_voter vb va vc)) (_p_P_constr
_p_C_capt_2 _p_E_range_match) zenon_H9 zenon_Ha)) (zenon_notnot _ (
refl_equal (_p_P_prj_b (abst_diag (abst_voter vb va vc))))) zenon_H8)) (
zenon_notnot _ (refl_equal (_p_E_equal (_p_P_prj_b (abst_diag (
abst_voter vb va vc))) _p_E_range_match))) zenon_H7)) zenon_H5 zenon_H6)
) zenon_Hb)) _p_P_prj_b_is_snd_of_pair)) (fun zenon_H4=>(zenon_G
zenon_H4)) zenon_Hc)) _p_P_range_match_is_valid)) __C_1_2_2_1_8_LEMMA)))
).
Qed.

0
d0ee9d90896c8d31e2dde6dc66b2bf2a
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1804

%%begin-auto-proof
%%name: for_zenon___C_1_2_2_1_10_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* For hypothesis "H221". *)
              Parameter H221 : Is_true (((_p_V_consistency_rule vb vc))).
              (* For step <5>4. *)
              Parameter __C_1_2_2_1_4_LEMMA :
                (~Is_true (((_p_V_consistency_rule vc va)))).
              (* For method of Self used via "by property !vote_match_c2". *)
              Parameter abst_vote_match_c2 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v3))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_2 _p_E_range_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_1_10_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vc va vb))
                          (_p_P_constr _p_C_capt_2 _p_E_range_match)))).
%%end-auto-proof
0
c8a2a91af095fe8fe5547531ee66ff99
proof
2200
Theorem for_zenon___C_1_2_2_1_10_LEMMA:(Is_true (basics._equal_ _ (
abst_diag (abst_voter vc va vb)) (_p_P_constr _p_C_capt_2
_p_E_range_match))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule v1 v2)))
/\((Is_true (_p_V_consistency_rule v1 v3))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v3))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_2
_p_E_range_match)))))))) vc (fun zenon_H16=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule vc v2)))
/\((Is_true (_p_V_consistency_rule vc v3))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter vc v2 v3)) v3))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter vc v2 v3)) (_p_P_constr _p_C_capt_2
_p_E_range_match))))))) va (fun zenon_H15=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((~(Is_true (_p_V_consistency_rule vc va)))/\((Is_true (
_p_V_consistency_rule vc v3))/\(~(Is_true (_p_V_consistency_rule va v3))
)))->((Is_true (basics._equal_ _ (abst_value (abst_voter vc va v3)) v3))
/\(Is_true (basics._equal_ _ (abst_diag (abst_voter vc va v3)) (
_p_P_constr _p_C_capt_2 _p_E_range_match)))))) vb (fun zenon_H14=>(
zenon_imply _ _ (fun zenon_H13=>(zenon_notand _ _ (fun zenon_H12=>(
zenon_H12 (fun zenon_H11=>(__C_1_2_2_1_4_LEMMA zenon_H11)))) (fun
zenon_H10=>(zenon_notand _ _ (fun zenon_Hc=>(zenon_all _p_V_T (fun v1
:_p_V_T=>(forall v2:_p_V_T,((Is_true (_p_V_consistency_rule v1 v2))->(
Is_true (_p_V_consistency_rule v2 v1))))) vb (fun zenon_Hf=>(zenon_all
_p_V_T (fun v2:_p_V_T=>((Is_true (_p_V_consistency_rule vb v2))->(
Is_true (_p_V_consistency_rule v2 vb)))) vc (fun zenon_He=>(zenon_imply
_ _ (fun zenon_Hd=>(zenon_Hd H221)) (fun zenon_Hb=>(zenon_Hc zenon_Hb))
zenon_He)) zenon_Hf)) abst_consistency_rule_is_symmetric)) (fun
zenon_Ha=>(zenon_Ha (fun zenon_H9=>(H2 zenon_H9)))) zenon_H10))
zenon_H13)) (fun zenon_H8=>(zenon_and _ _ (fun zenon_H7 zenon_H6=>(
zenon_G zenon_H6)) zenon_H8)) zenon_H14)) zenon_H15)) zenon_H16))
abst_vote_match_c2)))).
Qed.

0
4af98027bca58552aaa6ebe0eb81d475
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1228

%%begin-auto-proof
%%name: for_zenon___C_1_2_2_1_11_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>10. *)
              Parameter __C_1_2_2_1_10_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vc va vb))
                             (_p_P_constr _p_C_capt_2 _p_E_range_match))))).
              (* For species parameter method used via "by property vote#P!range_match_is_valid". *)
              Parameter _p_P_range_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_range_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_1_11_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb))))).
%%end-auto-proof
0
becdeb21b87511f4fb08b4bf56f8f6bb
proof
1948
Theorem for_zenon___C_1_2_2_1_11_LEMMA:(Is_true (_p_P_valid (abst_diag (
abst_voter vc va vb)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(coq_builtins.zenon_syntactic_equal
zenon_focal_eqdec _ (abst_diag (abst_voter vc va vb)) (_p_P_constr
_p_C_capt_2 _p_E_range_match) (fun zenon_H9=>(zenon_all _p_P_T (fun x
:_p_P_T=>((Is_true (_p_E_equal (_p_P_prj_b x) _p_E_range_match))->(
Is_true (_p_P_valid x)))) (abst_diag (abst_voter vc va vb)) (fun
zenon_Hc=>(zenon_imply _ _ (fun zenon_H5=>(zenon_all _p_C_T (fun n1
:_p_C_T=>(forall n2:_p_E_T,(Is_true (_p_E_equal (_p_P_prj_b (
_p_P_constr n1 n2)) n2)))) _p_C_capt_2 (fun zenon_Hb=>(zenon_all _p_E_T
(fun n2:_p_E_T=>(Is_true (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_2 n2)) n2))) _p_E_range_match (fun zenon_H6=>(zenon_subst _ (
fun zenon_Vf=>(Is_true zenon_Vf)) (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_2 _p_E_range_match)) _p_E_range_match) (_p_E_equal (
_p_P_prj_b (abst_diag (abst_voter vc va vb))) _p_E_range_match) (fun
zenon_H7=>(zenon_subst _ (fun zenon_Vg=>(~((_p_E_equal zenon_Vg
_p_E_range_match) = (_p_E_equal (_p_P_prj_b (abst_diag (abst_voter vc
va vb))) _p_E_range_match)))) (_p_P_prj_b (_p_P_constr _p_C_capt_2
_p_E_range_match)) (_p_P_prj_b (abst_diag (abst_voter vc va vb))) (fun
zenon_H8=>(zenon_subst _ (fun zenon_Vh=>(~((_p_P_prj_b zenon_Vh) = (
_p_P_prj_b (abst_diag (abst_voter vc va vb)))))) (_p_P_constr
_p_C_capt_2 _p_E_range_match) (abst_diag (abst_voter vc va vb)) (fun
zenon_Ha=>(zenon_eqsym _ (abst_diag (abst_voter vc va vb)) (_p_P_constr
_p_C_capt_2 _p_E_range_match) zenon_H9 zenon_Ha)) (zenon_notnot _ (
refl_equal (_p_P_prj_b (abst_diag (abst_voter vc va vb))))) zenon_H8)) (
zenon_notnot _ (refl_equal (_p_E_equal (_p_P_prj_b (abst_diag (
abst_voter vc va vb))) _p_E_range_match))) zenon_H7)) zenon_H5 zenon_H6)
) zenon_Hb)) _p_P_prj_b_is_snd_of_pair)) (fun zenon_H4=>(zenon_G
zenon_H4)) zenon_Hc)) _p_P_range_match_is_valid)) __C_1_2_2_1_10_LEMMA))
)).
Qed.

0
503aa1c0914edd5d336f08ecbf08a8d1
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
2378

%%begin-auto-proof
%%name: for_zenon___C_1_2_2_1_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For step <5>2. *)
            Parameter __C_1_2_2_1_2_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter va vb vc)) vb)))).
            (* For step <5>3. *)
            Parameter __C_1_2_2_1_3_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter vb va vc)) vc)))).
            (* For step <5>5. *)
            Parameter __C_1_2_2_1_5_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter vc va vb)) vb)))).
            (* For step <5>7. *)
            Parameter __C_1_2_2_1_7_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc)))))).
            (* For step <5>9. *)
            Parameter __C_1_2_2_1_9_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc)))))).
            (* For step <5>11. *)
            Parameter __C_1_2_2_1_11_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb)))))).
            (* For hypothesis "H221". *)
            Parameter H221 : Is_true (((_p_V_consistency_rule vb vc))).
            (* For species parameter method used via "by property vote#V!consistency_rule_reflexive". *)
            Parameter _p_V_consistency_rule_reflexive :
              forall a : _p_V_T, Is_true ((_p_V_consistency_rule a a)).
            (* For method of Self used via "by definition of !compatible". *)
            Definition abst_compatible (s1 : (Datatypes.prod _p_V_T _p_P_T))
              (s2 : (Datatypes.prod _p_V_T _p_P_T)) : coq_builtins.prop__t :=
              (Is_true ((_p_P_valid (abst_diag s1))) /\
                 Is_true ((_p_P_valid (abst_diag s2))) /\
                   Is_true ((_p_V_consistency_rule (abst_value s1)
                              (abst_value s2)))) \/
                (~Is_true (((_p_P_valid (abst_diag s1)))) /\
                   ~Is_true (((_p_P_valid (abst_diag s2))))).
            (* Theorem's body. *)
            Theorem for_zenon___C_1_2_2_1_LEMMA :
            ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
               (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
%%end-auto-proof
0
953513b072295f86427197c09cf5cdfa
proof
3418
Theorem for_zenon___C_1_2_2_1_LEMMA:((abst_compatible (abst_voter va vb
vc) (abst_voter vb va vc))/\(abst_compatible (abst_voter va vb vc) (
abst_voter vc va vb))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notand _ _ (fun zenon_H21=>(let zenon_H20
:=zenon_H21 in (zenon_notor _ _ (fun zenon_H1e zenon_H1f=>(zenon_notand
_ _ (fun zenon_H12=>(zenon_H12 __C_1_2_2_1_7_LEMMA)) (fun zenon_H1d=>(
zenon_notand _ _ (fun zenon_H1c=>(zenon_H1c __C_1_2_2_1_9_LEMMA)) (fun
zenon_H17=>(coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ (
abst_value (abst_voter va vb vc)) vb (fun zenon_Hd=>(
coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ (abst_value (
abst_voter vb va vc)) vc (fun zenon_H19=>(zenon_subst _ (fun zenon_Vi=>(
Is_true zenon_Vi)) (_p_V_consistency_rule vb vc) (_p_V_consistency_rule
(abst_value (abst_voter va vb vc)) (abst_value (abst_voter vb va vc))) (
fun zenon_H18=>(zenon_subst _ (fun zenon_Vk=>(~((_p_V_consistency_rule
zenon_Vk vc) = (_p_V_consistency_rule (abst_value (abst_voter va vb vc))
 (abst_value (abst_voter vb va vc)))))) vb (abst_value (abst_voter va
vb vc)) (fun zenon_H1b=>(zenon_eqsym _ (abst_value (abst_voter va vb vc)
) vb zenon_Hd zenon_H1b)) (zenon_subst _ (fun zenon_Vj=>(~((
_p_V_consistency_rule (abst_value (abst_voter va vb vc)) zenon_Vj) = (
_p_V_consistency_rule (abst_value (abst_voter va vb vc)) (abst_value (
abst_voter vb va vc)))))) vc (abst_value (abst_voter vb va vc)) (fun
zenon_H1a=>(zenon_eqsym _ (abst_value (abst_voter vb va vc)) vc
zenon_H19 zenon_H1a)) (zenon_notnot _ (refl_equal (
_p_V_consistency_rule (abst_value (abst_voter va vb vc)) (abst_value (
abst_voter vb va vc)))))) zenon_H18)) zenon_H17 H221))
__C_1_2_2_1_3_LEMMA)) __C_1_2_2_1_2_LEMMA)) zenon_H1d)) zenon_H1e))
zenon_H20))) (fun zenon_H16=>(let zenon_H15:=zenon_H16 in (zenon_notor
_ _ (fun zenon_H13 zenon_H14=>(zenon_notand _ _ (fun zenon_H12=>(
zenon_H12 __C_1_2_2_1_7_LEMMA)) (fun zenon_H11=>(zenon_notand _ _ (fun
zenon_H10=>(zenon_H10 __C_1_2_2_1_11_LEMMA)) (fun zenon_H9=>(zenon_all
_p_V_T (fun a:_p_V_T=>(Is_true (_p_V_consistency_rule a a))) (
abst_value (abst_voter va vb vc)) (fun zenon_Ha=>(zenon_subst _ (fun
zenon_Vf=>(Is_true zenon_Vf)) (_p_V_consistency_rule (abst_value (
abst_voter va vb vc)) (abst_value (abst_voter va vb vc))) (
_p_V_consistency_rule (abst_value (abst_voter va vb vc)) (abst_value (
abst_voter vc va vb))) (fun zenon_Hb=>(zenon_subst _ (fun zenon_Vg=>(~((
_p_V_consistency_rule (abst_value (abst_voter va vb vc)) zenon_Vg) = (
_p_V_consistency_rule (abst_value (abst_voter va vb vc)) (abst_value (
abst_voter vc va vb)))))) (abst_value (abst_voter va vb vc)) (
abst_value (abst_voter vc va vb)) (fun zenon_Hc=>(
coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ (abst_value (
abst_voter va vb vc)) vb (fun zenon_Hd=>(
coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ (abst_value (
abst_voter vc va vb)) vb (fun zenon_He=>(zenon_subst _ (fun zenon_Vh=>((
abst_value (abst_voter va vb vc)) = zenon_Vh)) vb (abst_value (
abst_voter vc va vb)) (fun zenon_Hf=>(zenon_eqsym _ (abst_value (
abst_voter vc va vb)) vb zenon_He zenon_Hf)) zenon_Hc zenon_Hd))
__C_1_2_2_1_5_LEMMA)) __C_1_2_2_1_2_LEMMA)) (zenon_notnot _ (refl_equal
(_p_V_consistency_rule (abst_value (abst_voter va vb vc)) (abst_value (
abst_voter vc va vb))))) zenon_Hb)) zenon_H9 zenon_Ha))
_p_V_consistency_rule_reflexive)) zenon_H11)) zenon_H13)) zenon_H15)))
zenon_G)))).
Qed.

0
7264b8a87e9abcbe7740400effaa65b7
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
730

%%begin-auto-proof
%%name: for_zenon___C_1_2_2_2_1_1_LEMMA
                
                
                
                (* Methods to use for automated proof. *)
                (* For species parameter method used via "by property vote#V!consistency_rule_symmetric". *)
                Parameter _p_V_consistency_rule_symmetric :
                  forall a  b : _p_V_T,
                    Is_true ((_p_V_consistency_rule a b)) ->
                      Is_true ((_p_V_consistency_rule b a)).
                (* Theorem's body. *)
                Theorem for_zenon___C_1_2_2_2_1_1_LEMMA :
                Is_true ((_p_V_consistency_rule vb va)) ->
                  Is_true ((_p_V_consistency_rule va vb)).
%%end-auto-proof
0
8ea51122d3871c0f0a7c3d8f9eaa1134
proof
654
Theorem for_zenon___C_1_2_2_2_1_1_LEMMA:((Is_true (
_p_V_consistency_rule vb va))->(Is_true (_p_V_consistency_rule va vb))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notimply _ _ (fun zenon_H4 zenon_H3=>(
zenon_all _p_V_T (fun a:_p_V_T=>(forall b:_p_V_T,((Is_true (
_p_V_consistency_rule a b))->(Is_true (_p_V_consistency_rule b a)))))
vb (fun zenon_H7=>(zenon_all _p_V_T (fun b:_p_V_T=>((Is_true (
_p_V_consistency_rule vb b))->(Is_true (_p_V_consistency_rule b vb))))
va (fun zenon_H6=>(zenon_imply _ _ (fun zenon_H5=>(zenon_H5 zenon_H4)) (
fun zenon_H2=>(zenon_H3 zenon_H2)) zenon_H6)) zenon_H7))
_p_V_consistency_rule_symmetric)) zenon_G)))).
Qed.

0
2f98b5726190a28cb95425c711b59e5c
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
641

%%begin-auto-proof
%%name: for_zenon___C_1_2_2_2_1_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <6>1. *)
              Parameter __C_1_2_2_2_1_1_LEMMA :
                (Is_true ((_p_V_consistency_rule vb va)) ->
                   Is_true ((_p_V_consistency_rule va vb))).
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_2_1_LEMMA :
              ~Is_true (((_p_V_consistency_rule vb va))).
%%end-auto-proof
0
5b36084255c5c992edc3d8dcb9ad2a3f
proof
259
Theorem for_zenon___C_1_2_2_2_1_LEMMA:(~(Is_true (_p_V_consistency_rule
vb va))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_G (fun zenon_H4=>(zenon_imply _ _ (fun
zenon_H5=>(zenon_H5 zenon_H4)) (fun zenon_H3=>(H2 zenon_H3))
__C_1_2_2_2_1_1_LEMMA)))))).
Qed.

0
afad11afd365f84b736909cc7ea5804d
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
730

%%begin-auto-proof
%%name: for_zenon___C_1_2_2_2_2_1_LEMMA
                
                
                
                (* Methods to use for automated proof. *)
                (* For species parameter method used via "by property vote#V!consistency_rule_symmetric". *)
                Parameter _p_V_consistency_rule_symmetric :
                  forall a  b : _p_V_T,
                    Is_true ((_p_V_consistency_rule a b)) ->
                      Is_true ((_p_V_consistency_rule b a)).
                (* Theorem's body. *)
                Theorem for_zenon___C_1_2_2_2_2_1_LEMMA :
                Is_true ((_p_V_consistency_rule vc va)) ->
                  Is_true ((_p_V_consistency_rule va vc)).
%%end-auto-proof
0
98f5c76db9f819c4e1ca2c0e1e1e2f75
proof
654
Theorem for_zenon___C_1_2_2_2_2_1_LEMMA:((Is_true (
_p_V_consistency_rule vc va))->(Is_true (_p_V_consistency_rule va vc))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notimply _ _ (fun zenon_H4 zenon_H3=>(
zenon_all _p_V_T (fun a:_p_V_T=>(forall b:_p_V_T,((Is_true (
_p_V_consistency_rule a b))->(Is_true (_p_V_consistency_rule b a)))))
vc (fun zenon_H7=>(zenon_all _p_V_T (fun b:_p_V_T=>((Is_true (
_p_V_consistency_rule vc b))->(Is_true (_p_V_consistency_rule b vc))))
va (fun zenon_H6=>(zenon_imply _ _ (fun zenon_H5=>(zenon_H5 zenon_H4)) (
fun zenon_H2=>(zenon_H3 zenon_H2)) zenon_H6)) zenon_H7))
_p_V_consistency_rule_symmetric)) zenon_G)))).
Qed.

0
975f4d31abd23e3e92c909682957a667
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
643

%%begin-auto-proof
%%name: for_zenon___C_1_2_2_2_2_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <6>1. *)
              Parameter __C_1_2_2_2_2_1_LEMMA :
                (Is_true ((_p_V_consistency_rule vc va)) ->
                   Is_true ((_p_V_consistency_rule va vc))).
              (* For hypothesis "H22". *)
              Parameter H22 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_2_2_LEMMA :
              ~Is_true (((_p_V_consistency_rule vc va))).
%%end-auto-proof
0
53446eb50145d2910f692b878b335c07
proof
260
Theorem for_zenon___C_1_2_2_2_2_LEMMA:(~(Is_true (_p_V_consistency_rule
vc va))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_G (fun zenon_H4=>(zenon_imply _ _ (fun
zenon_H5=>(zenon_H5 zenon_H4)) (fun zenon_H3=>(H22 zenon_H3))
__C_1_2_2_2_2_1_LEMMA)))))).
Qed.

0
bbee17d7e36718122bf7908ca1e53154
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
730

%%begin-auto-proof
%%name: for_zenon___C_1_2_2_2_3_1_LEMMA
                
                
                
                (* Methods to use for automated proof. *)
                (* For species parameter method used via "by property vote#V!consistency_rule_symmetric". *)
                Parameter _p_V_consistency_rule_symmetric :
                  forall a  b : _p_V_T,
                    Is_true ((_p_V_consistency_rule a b)) ->
                      Is_true ((_p_V_consistency_rule b a)).
                (* Theorem's body. *)
                Theorem for_zenon___C_1_2_2_2_3_1_LEMMA :
                Is_true ((_p_V_consistency_rule vc vb)) ->
                  Is_true ((_p_V_consistency_rule vb vc)).
%%end-auto-proof
0
a109365ab15845f8cdbd273950a2bd4d
proof
654
Theorem for_zenon___C_1_2_2_2_3_1_LEMMA:((Is_true (
_p_V_consistency_rule vc vb))->(Is_true (_p_V_consistency_rule vb vc))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notimply _ _ (fun zenon_H4 zenon_H3=>(
zenon_all _p_V_T (fun a:_p_V_T=>(forall b:_p_V_T,((Is_true (
_p_V_consistency_rule a b))->(Is_true (_p_V_consistency_rule b a)))))
vc (fun zenon_H7=>(zenon_all _p_V_T (fun b:_p_V_T=>((Is_true (
_p_V_consistency_rule vc b))->(Is_true (_p_V_consistency_rule b vc))))
vb (fun zenon_H6=>(zenon_imply _ _ (fun zenon_H5=>(zenon_H5 zenon_H4)) (
fun zenon_H2=>(zenon_H3 zenon_H2)) zenon_H6)) zenon_H7))
_p_V_consistency_rule_symmetric)) zenon_G)))).
Qed.

0
2df4c4d76b9a5cad2848d24542489085
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
645

%%begin-auto-proof
%%name: for_zenon___C_1_2_2_2_3_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <6>1. *)
              Parameter __C_1_2_2_2_3_1_LEMMA :
                (Is_true ((_p_V_consistency_rule vc vb)) ->
                   Is_true ((_p_V_consistency_rule vb vc))).
              (* For hypothesis "H222". *)
              Parameter H222 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_2_3_LEMMA :
              ~Is_true (((_p_V_consistency_rule vc vb))).
%%end-auto-proof
0
cb412e0d8de0e3e45470a7f7766bfa25
proof
261
Theorem for_zenon___C_1_2_2_2_3_LEMMA:(~(Is_true (_p_V_consistency_rule
vc vb))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_G (fun zenon_H4=>(zenon_imply _ _ (fun
zenon_H5=>(zenon_H5 zenon_H4)) (fun zenon_H3=>(H222 zenon_H3))
__C_1_2_2_2_3_1_LEMMA)))))).
Qed.

0
f415d7afece8a9451bc9c109563182cc
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1316

%%begin-auto-proof
%%name: for_zenon___C_1_2_2_2_4_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* For hypothesis "H22". *)
              Parameter H22 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H222". *)
              Parameter H222 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_no_match". *)
              Parameter abst_vote_no_match :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    Is_true ((((basics._equal_ _)
                                (abst_diag (abst_voter v1 v2 v3))
                                (_p_P_constr _p_C_capt_1 _p_E_no_match)))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_2_4_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter va vb vc))
                          (_p_P_constr _p_C_capt_1 _p_E_no_match)))).
%%end-auto-proof
0
ad456e7b725188faf8353041ef47f86d
proof
1510
Theorem for_zenon___C_1_2_2_2_4_LEMMA:(Is_true (basics._equal_ _ (
abst_diag (abst_voter va vb vc)) (_p_P_constr _p_C_capt_1 _p_E_no_match)
)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule v1 v2)))
/\((~(Is_true (_p_V_consistency_rule v1 v3)))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->(Is_true (basics._equal_ _ (abst_diag
(abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_1 _p_E_no_match))))))) va
(fun zenon_H10=>(zenon_all _p_V_T (fun v2:_p_V_T=>(forall v3:_p_V_T,(((~
(Is_true (_p_V_consistency_rule va v2)))/\((~(Is_true (
_p_V_consistency_rule va v3)))/\(~(Is_true (_p_V_consistency_rule v2 v3)
))))->(Is_true (basics._equal_ _ (abst_diag (abst_voter va v2 v3)) (
_p_P_constr _p_C_capt_1 _p_E_no_match)))))) vb (fun zenon_Hf=>(
zenon_all _p_V_T (fun v3:_p_V_T=>(((~(Is_true (_p_V_consistency_rule va
vb)))/\((~(Is_true (_p_V_consistency_rule va v3)))/\(~(Is_true (
_p_V_consistency_rule vb v3)))))->(Is_true (basics._equal_ _ (abst_diag
(abst_voter va vb v3)) (_p_P_constr _p_C_capt_1 _p_E_no_match))))) vc (
fun zenon_He=>(zenon_imply _ _ (fun zenon_Hd=>(zenon_notand _ _ (fun
zenon_Hc=>(zenon_Hc (fun zenon_Hb=>(H2 zenon_Hb)))) (fun zenon_Ha=>(
zenon_notand _ _ (fun zenon_H9=>(zenon_H9 (fun zenon_H8=>(H22 zenon_H8))
)) (fun zenon_H7=>(zenon_H7 (fun zenon_H6=>(H222 zenon_H6)))) zenon_Ha))
 zenon_Hd)) (fun zenon_H5=>(zenon_G zenon_H5)) zenon_He)) zenon_Hf))
zenon_H10)) abst_vote_no_match)))).
Qed.

0
c3e5fa5d292bd621d3c8f672f91712b8
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
990

%%begin-auto-proof
%%name: for_zenon___C_1_2_2_2_5_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>4. *)
              Parameter __C_1_2_2_2_4_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter va vb vc))
                             (_p_P_constr _p_C_capt_1 _p_E_no_match))))).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_2_5_LEMMA :
              Is_true (((_p_E_equal
                          (_p_P_prj_b (abst_diag (abst_voter va vb vc)))
                          _p_E_no_match))).
%%end-auto-proof
0
b269d313f7a1d39d515331addd9a57b1
proof
1667
Theorem for_zenon___C_1_2_2_2_5_LEMMA:(Is_true (_p_E_equal (_p_P_prj_b (
abst_diag (abst_voter va vb vc))) _p_E_no_match)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(coq_builtins.zenon_syntactic_equal
zenon_focal_eqdec _ (abst_diag (abst_voter va vb vc)) (_p_P_constr
_p_C_capt_1 _p_E_no_match) (fun zenon_H6=>(zenon_all _p_C_T (fun n1
:_p_C_T=>(forall n2:_p_E_T,(Is_true (_p_E_equal (_p_P_prj_b (
_p_P_constr n1 n2)) n2)))) _p_C_capt_1 (fun zenon_H8=>(zenon_all _p_E_T
(fun n2:_p_E_T=>(Is_true (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_1 n2)) n2))) _p_E_no_match (fun zenon_H3=>(zenon_subst _ (fun
zenon_Vf=>(Is_true zenon_Vf)) (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_1 _p_E_no_match)) _p_E_no_match) (_p_E_equal (_p_P_prj_b (
abst_diag (abst_voter va vb vc))) _p_E_no_match) (fun zenon_H4=>(
zenon_subst _ (fun zenon_Vg=>(~((_p_E_equal zenon_Vg _p_E_no_match) = (
_p_E_equal (_p_P_prj_b (abst_diag (abst_voter va vb vc))) _p_E_no_match)
))) (_p_P_prj_b (_p_P_constr _p_C_capt_1 _p_E_no_match)) (_p_P_prj_b (
abst_diag (abst_voter va vb vc))) (fun zenon_H5=>(zenon_subst _ (fun
zenon_Vh=>(~((_p_P_prj_b zenon_Vh) = (_p_P_prj_b (abst_diag (abst_voter
va vb vc)))))) (_p_P_constr _p_C_capt_1 _p_E_no_match) (abst_diag (
abst_voter va vb vc)) (fun zenon_H7=>(zenon_eqsym _ (abst_diag (
abst_voter va vb vc)) (_p_P_constr _p_C_capt_1 _p_E_no_match) zenon_H6
zenon_H7)) (zenon_notnot _ (refl_equal (_p_P_prj_b (abst_diag (
abst_voter va vb vc))))) zenon_H5)) (zenon_notnot _ (refl_equal (
_p_E_equal (_p_P_prj_b (abst_diag (abst_voter va vb vc))) _p_E_no_match)
)) zenon_H4)) zenon_G zenon_H3)) zenon_H8)) _p_P_prj_b_is_snd_of_pair))
__C_1_2_2_2_4_LEMMA)))).
Qed.

0
b8dbd63b7bfb794483edd454c6b87739
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
894

%%begin-auto-proof
%%name: for_zenon___C_1_2_2_2_51_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>5. *)
              Parameter __C_1_2_2_2_5_LEMMA :
                (Is_true (((_p_E_equal
                             (_p_P_prj_b (abst_diag (abst_voter va vb vc)))
                             _p_E_no_match)))).
              (* For species parameter method used via "by property vote#P!no_match_is_invalid". *)
              Parameter _p_P_no_match_is_invalid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_no_match)) ->
                    ~Is_true (((_p_P_valid x))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_2_51_LEMMA :
              ~Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))).
%%end-auto-proof
0
9626b56916d0180cc61759ce8013f6b3
proof
478
Theorem for_zenon___C_1_2_2_2_51_LEMMA:(~(Is_true (_p_P_valid (
abst_diag (abst_voter va vb vc))))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_G (fun zenon_H3=>(zenon_all _p_P_T (fun x
:_p_P_T=>((Is_true (_p_E_equal (_p_P_prj_b x) _p_E_no_match))->(~(
Is_true (_p_P_valid x))))) (abst_diag (abst_voter va vb vc)) (fun
zenon_H6=>(zenon_imply _ _ (fun zenon_H5=>(zenon_H5 __C_1_2_2_2_5_LEMMA)
) (fun zenon_H4=>(zenon_H4 zenon_H3)) zenon_H6))
_p_P_no_match_is_invalid)))))).
Qed.

0
cd84f9fd1a92877f95aa8b8908b7d3a4
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1345

%%begin-auto-proof
%%name: for_zenon___C_1_2_2_2_6_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H22". *)
              Parameter H22 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H222". *)
              Parameter H222 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For step <5>1. *)
              Parameter __C_1_2_2_2_1_LEMMA :
                (~Is_true (((_p_V_consistency_rule vb va)))).
              (* For method of Self used via "by property !vote_no_match". *)
              Parameter abst_vote_no_match :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    Is_true ((((basics._equal_ _)
                                (abst_diag (abst_voter v1 v2 v3))
                                (_p_P_constr _p_C_capt_1 _p_E_no_match)))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_2_6_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vb va vc))
                          (_p_P_constr _p_C_capt_1 _p_E_no_match)))).
%%end-auto-proof
0
854ff83952d74c860d09bd76b0ba5237
proof
1526
Theorem for_zenon___C_1_2_2_2_6_LEMMA:(Is_true (basics._equal_ _ (
abst_diag (abst_voter vb va vc)) (_p_P_constr _p_C_capt_1 _p_E_no_match)
)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule v1 v2)))
/\((~(Is_true (_p_V_consistency_rule v1 v3)))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->(Is_true (basics._equal_ _ (abst_diag
(abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_1 _p_E_no_match))))))) vb
(fun zenon_H10=>(zenon_all _p_V_T (fun v2:_p_V_T=>(forall v3:_p_V_T,(((~
(Is_true (_p_V_consistency_rule vb v2)))/\((~(Is_true (
_p_V_consistency_rule vb v3)))/\(~(Is_true (_p_V_consistency_rule v2 v3)
))))->(Is_true (basics._equal_ _ (abst_diag (abst_voter vb v2 v3)) (
_p_P_constr _p_C_capt_1 _p_E_no_match)))))) va (fun zenon_Hf=>(
zenon_all _p_V_T (fun v3:_p_V_T=>(((~(Is_true (_p_V_consistency_rule vb
va)))/\((~(Is_true (_p_V_consistency_rule vb v3)))/\(~(Is_true (
_p_V_consistency_rule va v3)))))->(Is_true (basics._equal_ _ (abst_diag
(abst_voter vb va v3)) (_p_P_constr _p_C_capt_1 _p_E_no_match))))) vc (
fun zenon_He=>(zenon_imply _ _ (fun zenon_Hd=>(zenon_notand _ _ (fun
zenon_Hc=>(zenon_Hc (fun zenon_Hb=>(__C_1_2_2_2_1_LEMMA zenon_Hb)))) (
fun zenon_Ha=>(zenon_notand _ _ (fun zenon_H9=>(zenon_H9 (fun zenon_H8=>
(H222 zenon_H8)))) (fun zenon_H7=>(zenon_H7 (fun zenon_H6=>(H22
zenon_H6)))) zenon_Ha)) zenon_Hd)) (fun zenon_H5=>(zenon_G zenon_H5))
zenon_He)) zenon_Hf)) zenon_H10)) abst_vote_no_match)))).
Qed.

0
8bb133509931477ef67351245bdb1e38
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
990

%%begin-auto-proof
%%name: for_zenon___C_1_2_2_2_7_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>6. *)
              Parameter __C_1_2_2_2_6_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vb va vc))
                             (_p_P_constr _p_C_capt_1 _p_E_no_match))))).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_2_7_LEMMA :
              Is_true (((_p_E_equal
                          (_p_P_prj_b (abst_diag (abst_voter vb va vc)))
                          _p_E_no_match))).
%%end-auto-proof
0
3f44fa0ac612ae74f7c538ea6047e8bc
proof
1667
Theorem for_zenon___C_1_2_2_2_7_LEMMA:(Is_true (_p_E_equal (_p_P_prj_b (
abst_diag (abst_voter vb va vc))) _p_E_no_match)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(coq_builtins.zenon_syntactic_equal
zenon_focal_eqdec _ (abst_diag (abst_voter vb va vc)) (_p_P_constr
_p_C_capt_1 _p_E_no_match) (fun zenon_H6=>(zenon_all _p_C_T (fun n1
:_p_C_T=>(forall n2:_p_E_T,(Is_true (_p_E_equal (_p_P_prj_b (
_p_P_constr n1 n2)) n2)))) _p_C_capt_1 (fun zenon_H8=>(zenon_all _p_E_T
(fun n2:_p_E_T=>(Is_true (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_1 n2)) n2))) _p_E_no_match (fun zenon_H3=>(zenon_subst _ (fun
zenon_Vf=>(Is_true zenon_Vf)) (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_1 _p_E_no_match)) _p_E_no_match) (_p_E_equal (_p_P_prj_b (
abst_diag (abst_voter vb va vc))) _p_E_no_match) (fun zenon_H4=>(
zenon_subst _ (fun zenon_Vg=>(~((_p_E_equal zenon_Vg _p_E_no_match) = (
_p_E_equal (_p_P_prj_b (abst_diag (abst_voter vb va vc))) _p_E_no_match)
))) (_p_P_prj_b (_p_P_constr _p_C_capt_1 _p_E_no_match)) (_p_P_prj_b (
abst_diag (abst_voter vb va vc))) (fun zenon_H5=>(zenon_subst _ (fun
zenon_Vh=>(~((_p_P_prj_b zenon_Vh) = (_p_P_prj_b (abst_diag (abst_voter
vb va vc)))))) (_p_P_constr _p_C_capt_1 _p_E_no_match) (abst_diag (
abst_voter vb va vc)) (fun zenon_H7=>(zenon_eqsym _ (abst_diag (
abst_voter vb va vc)) (_p_P_constr _p_C_capt_1 _p_E_no_match) zenon_H6
zenon_H7)) (zenon_notnot _ (refl_equal (_p_P_prj_b (abst_diag (
abst_voter vb va vc))))) zenon_H5)) (zenon_notnot _ (refl_equal (
_p_E_equal (_p_P_prj_b (abst_diag (abst_voter vb va vc))) _p_E_no_match)
)) zenon_H4)) zenon_G zenon_H3)) zenon_H8)) _p_P_prj_b_is_snd_of_pair))
__C_1_2_2_2_6_LEMMA)))).
Qed.

0
5f9cd2c858821d15205f78f1461a0d8b
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
894

%%begin-auto-proof
%%name: for_zenon___C_1_2_2_2_71_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>7. *)
              Parameter __C_1_2_2_2_7_LEMMA :
                (Is_true (((_p_E_equal
                             (_p_P_prj_b (abst_diag (abst_voter vb va vc)))
                             _p_E_no_match)))).
              (* For species parameter method used via "by property vote#P!no_match_is_invalid". *)
              Parameter _p_P_no_match_is_invalid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_no_match)) ->
                    ~Is_true (((_p_P_valid x))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_2_71_LEMMA :
              ~Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc))))).
%%end-auto-proof
0
ae48b008ef5fd23f06af9c4c8a65fb77
proof
478
Theorem for_zenon___C_1_2_2_2_71_LEMMA:(~(Is_true (_p_P_valid (
abst_diag (abst_voter vb va vc))))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_G (fun zenon_H3=>(zenon_all _p_P_T (fun x
:_p_P_T=>((Is_true (_p_E_equal (_p_P_prj_b x) _p_E_no_match))->(~(
Is_true (_p_P_valid x))))) (abst_diag (abst_voter vb va vc)) (fun
zenon_H6=>(zenon_imply _ _ (fun zenon_H5=>(zenon_H5 __C_1_2_2_2_7_LEMMA)
) (fun zenon_H4=>(zenon_H4 zenon_H3)) zenon_H6))
_p_P_no_match_is_invalid)))))).
Qed.

0
f414bf112f9dafa6ef99b13c5b60f8e8
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1368

%%begin-auto-proof
%%name: for_zenon___C_1_2_2_2_8_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* For step <5>2. *)
              Parameter __C_1_2_2_2_2_LEMMA :
                (~Is_true (((_p_V_consistency_rule vc va)))).
              (* For step <5>3. *)
              Parameter __C_1_2_2_2_3_LEMMA :
                (~Is_true (((_p_V_consistency_rule vc vb)))).
              (* For method of Self used via "by property !vote_no_match". *)
              Parameter abst_vote_no_match :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    Is_true ((((basics._equal_ _)
                                (abst_diag (abst_voter v1 v2 v3))
                                (_p_P_constr _p_C_capt_1 _p_E_no_match)))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_2_8_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vc va vb))
                          (_p_P_constr _p_C_capt_1 _p_E_no_match)))).
%%end-auto-proof
0
5d35283771903c6d436d746eb4d55d33
proof
1542
Theorem for_zenon___C_1_2_2_2_8_LEMMA:(Is_true (basics._equal_ _ (
abst_diag (abst_voter vc va vb)) (_p_P_constr _p_C_capt_1 _p_E_no_match)
)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule v1 v2)))
/\((~(Is_true (_p_V_consistency_rule v1 v3)))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->(Is_true (basics._equal_ _ (abst_diag
(abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_1 _p_E_no_match))))))) vc
(fun zenon_H10=>(zenon_all _p_V_T (fun v2:_p_V_T=>(forall v3:_p_V_T,(((~
(Is_true (_p_V_consistency_rule vc v2)))/\((~(Is_true (
_p_V_consistency_rule vc v3)))/\(~(Is_true (_p_V_consistency_rule v2 v3)
))))->(Is_true (basics._equal_ _ (abst_diag (abst_voter vc v2 v3)) (
_p_P_constr _p_C_capt_1 _p_E_no_match)))))) va (fun zenon_Hf=>(
zenon_all _p_V_T (fun v3:_p_V_T=>(((~(Is_true (_p_V_consistency_rule vc
va)))/\((~(Is_true (_p_V_consistency_rule vc v3)))/\(~(Is_true (
_p_V_consistency_rule va v3)))))->(Is_true (basics._equal_ _ (abst_diag
(abst_voter vc va v3)) (_p_P_constr _p_C_capt_1 _p_E_no_match))))) vb (
fun zenon_He=>(zenon_imply _ _ (fun zenon_Hd=>(zenon_notand _ _ (fun
zenon_Hc=>(zenon_Hc (fun zenon_Hb=>(__C_1_2_2_2_2_LEMMA zenon_Hb)))) (
fun zenon_Ha=>(zenon_notand _ _ (fun zenon_H9=>(zenon_H9 (fun zenon_H8=>
(__C_1_2_2_2_3_LEMMA zenon_H8)))) (fun zenon_H7=>(zenon_H7 (fun
zenon_H6=>(H2 zenon_H6)))) zenon_Ha)) zenon_Hd)) (fun zenon_H5=>(
zenon_G zenon_H5)) zenon_He)) zenon_Hf)) zenon_H10)) abst_vote_no_match)
))).
Qed.

0
d900446d4667c155c9de9f7b072a5e48
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
990

%%begin-auto-proof
%%name: for_zenon___C_1_2_2_2_9_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>8. *)
              Parameter __C_1_2_2_2_8_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vc va vb))
                             (_p_P_constr _p_C_capt_1 _p_E_no_match))))).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_2_9_LEMMA :
              Is_true (((_p_E_equal
                          (_p_P_prj_b (abst_diag (abst_voter vc va vb)))
                          _p_E_no_match))).
%%end-auto-proof
0
db7c51cda941b8552b9ff8ec02b7d5d9
proof
1667
Theorem for_zenon___C_1_2_2_2_9_LEMMA:(Is_true (_p_E_equal (_p_P_prj_b (
abst_diag (abst_voter vc va vb))) _p_E_no_match)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(coq_builtins.zenon_syntactic_equal
zenon_focal_eqdec _ (abst_diag (abst_voter vc va vb)) (_p_P_constr
_p_C_capt_1 _p_E_no_match) (fun zenon_H6=>(zenon_all _p_C_T (fun n1
:_p_C_T=>(forall n2:_p_E_T,(Is_true (_p_E_equal (_p_P_prj_b (
_p_P_constr n1 n2)) n2)))) _p_C_capt_1 (fun zenon_H8=>(zenon_all _p_E_T
(fun n2:_p_E_T=>(Is_true (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_1 n2)) n2))) _p_E_no_match (fun zenon_H3=>(zenon_subst _ (fun
zenon_Vf=>(Is_true zenon_Vf)) (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_1 _p_E_no_match)) _p_E_no_match) (_p_E_equal (_p_P_prj_b (
abst_diag (abst_voter vc va vb))) _p_E_no_match) (fun zenon_H4=>(
zenon_subst _ (fun zenon_Vg=>(~((_p_E_equal zenon_Vg _p_E_no_match) = (
_p_E_equal (_p_P_prj_b (abst_diag (abst_voter vc va vb))) _p_E_no_match)
))) (_p_P_prj_b (_p_P_constr _p_C_capt_1 _p_E_no_match)) (_p_P_prj_b (
abst_diag (abst_voter vc va vb))) (fun zenon_H5=>(zenon_subst _ (fun
zenon_Vh=>(~((_p_P_prj_b zenon_Vh) = (_p_P_prj_b (abst_diag (abst_voter
vc va vb)))))) (_p_P_constr _p_C_capt_1 _p_E_no_match) (abst_diag (
abst_voter vc va vb)) (fun zenon_H7=>(zenon_eqsym _ (abst_diag (
abst_voter vc va vb)) (_p_P_constr _p_C_capt_1 _p_E_no_match) zenon_H6
zenon_H7)) (zenon_notnot _ (refl_equal (_p_P_prj_b (abst_diag (
abst_voter vc va vb))))) zenon_H5)) (zenon_notnot _ (refl_equal (
_p_E_equal (_p_P_prj_b (abst_diag (abst_voter vc va vb))) _p_E_no_match)
)) zenon_H4)) zenon_G zenon_H3)) zenon_H8)) _p_P_prj_b_is_snd_of_pair))
__C_1_2_2_2_8_LEMMA)))).
Qed.

0
814909cbfa67a79baa932cbef16142ff
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
894

%%begin-auto-proof
%%name: for_zenon___C_1_2_2_2_91_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>9. *)
              Parameter __C_1_2_2_2_9_LEMMA :
                (Is_true (((_p_E_equal
                             (_p_P_prj_b (abst_diag (abst_voter vc va vb)))
                             _p_E_no_match)))).
              (* For species parameter method used via "by property vote#P!no_match_is_invalid". *)
              Parameter _p_P_no_match_is_invalid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_no_match)) ->
                    ~Is_true (((_p_P_valid x))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_2_91_LEMMA :
              ~Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb))))).
%%end-auto-proof
0
1e35f3acf71681957b827842d4f636cc
proof
478
Theorem for_zenon___C_1_2_2_2_91_LEMMA:(~(Is_true (_p_P_valid (
abst_diag (abst_voter vc va vb))))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_G (fun zenon_H3=>(zenon_all _p_P_T (fun x
:_p_P_T=>((Is_true (_p_E_equal (_p_P_prj_b x) _p_E_no_match))->(~(
Is_true (_p_P_valid x))))) (abst_diag (abst_voter vc va vb)) (fun
zenon_H6=>(zenon_imply _ _ (fun zenon_H5=>(zenon_H5 __C_1_2_2_2_9_LEMMA)
) (fun zenon_H4=>(zenon_H4 zenon_H3)) zenon_H6))
_p_P_no_match_is_invalid)))))).
Qed.

0
22ee96563a76197470ccd4fad4d4e66c
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1463

%%begin-auto-proof
%%name: for_zenon___C_1_2_2_2_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For step <5>51. *)
            Parameter __C_1_2_2_2_51_LEMMA :
              (~Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc)))))).
            (* For step <5>71. *)
            Parameter __C_1_2_2_2_71_LEMMA :
              (~Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc)))))).
            (* For step <5>91. *)
            Parameter __C_1_2_2_2_91_LEMMA :
              (~Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb)))))).
            (* For method of Self used via "by definition of !compatible". *)
            Definition abst_compatible (s1 : (Datatypes.prod _p_V_T _p_P_T))
              (s2 : (Datatypes.prod _p_V_T _p_P_T)) : coq_builtins.prop__t :=
              (Is_true ((_p_P_valid (abst_diag s1))) /\
                 Is_true ((_p_P_valid (abst_diag s2))) /\
                   Is_true ((_p_V_consistency_rule (abst_value s1)
                              (abst_value s2)))) \/
                (~Is_true (((_p_P_valid (abst_diag s1)))) /\
                   ~Is_true (((_p_P_valid (abst_diag s2))))).
            (* Theorem's body. *)
            Theorem for_zenon___C_1_2_2_2_LEMMA :
            ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
               (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
%%end-auto-proof
0
1ad9736ab1d555210ac7fd5a96a85f6b
proof
681
Theorem for_zenon___C_1_2_2_2_LEMMA:((abst_compatible (abst_voter va vb
vc) (abst_voter vb va vc))/\(abst_compatible (abst_voter va vb vc) (
abst_voter vc va vb))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notand _ _ (fun zenon_He=>(let zenon_Hd
:=zenon_He in (zenon_notor _ _ (fun zenon_Hc zenon_Hb=>(zenon_notand _
_ (fun zenon_H5=>(zenon_H5 __C_1_2_2_2_51_LEMMA)) (fun zenon_Ha=>(
zenon_Ha __C_1_2_2_2_71_LEMMA)) zenon_Hb)) zenon_Hd))) (fun zenon_H9=>(
let zenon_H8:=zenon_H9 in (zenon_notor _ _ (fun zenon_H7 zenon_H6=>(
zenon_notand _ _ (fun zenon_H5=>(zenon_H5 __C_1_2_2_2_51_LEMMA)) (fun
zenon_H4=>(zenon_H4 __C_1_2_2_2_91_LEMMA)) zenon_H6)) zenon_H8)))
zenon_G)))).
Qed.

0
14581a10004a4479532e81c417768ed9
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
2311

%%begin-auto-proof
%%name: for_zenon___C_1_2_2_LEMMA
          
          
          
          (* Methods to use for automated proof. *)
          (* For step <4>1. *)
          Parameter __C_1_2_2_1_LEMMA :
            (Is_true (((_p_V_consistency_rule vb vc)))) -> (((abst_compatible
                                                               (abst_voter va
                                                                 vb vc)
                                                               (abst_voter vb
                                                                 va vc)) /\
                                                               (abst_compatible
                                                                 (abst_voter
                                                                   va vb vc)
                                                                 (abst_voter
                                                                   vc va vb)))).
          (* For step <4>2. *)
          Parameter __C_1_2_2_2_LEMMA :
            (~Is_true (((_p_V_consistency_rule vb vc)))) -> (((abst_compatible
                                                                (abst_voter
                                                                  va vb vc)
                                                                (abst_voter
                                                                  vb va vc)) /\
                                                                (abst_compatible
                                                                  (abst_voter
                                                                    va vb vc)
                                                                  (abst_voter
                                                                    vc va vb)))).
          (* For method of Self used via "by property !compatible". *)
          Parameter abst_compatible :
            (Datatypes.prod _p_V_T _p_P_T) ->
              (Datatypes.prod _p_V_T _p_P_T) -> coq_builtins.prop__t.
          (* Theorem's body. *)
          Theorem for_zenon___C_1_2_2_LEMMA :
          ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
             (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
%%end-auto-proof
0
0d78f670e6d0487c2d2ecd70540800d3
proof
403
Theorem for_zenon___C_1_2_2_LEMMA:((abst_compatible (abst_voter va vb
vc) (abst_voter vb va vc))/\(abst_compatible (abst_voter va vb vc) (
abst_voter vc va vb))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_imply _ _ (fun zenon_H5=>(zenon_imply _ _ (
fun zenon_H6=>(zenon_H6 zenon_H5)) (fun zenon_H4=>(zenon_G zenon_H4))
__C_1_2_2_2_LEMMA)) (fun zenon_H4=>(zenon_G zenon_H4))
__C_1_2_2_1_LEMMA)))).
Qed.

0
6306635311bfe057fe6f19d24986519a
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
2231

%%begin-auto-proof
%%name: for_zenon___C_1_2_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For step <3>1. *)
        Parameter __C_1_2_1_LEMMA :
          (Is_true (((_p_V_consistency_rule va vc)))) -> (((abst_compatible
                                                             (abst_voter va
                                                               vb vc)
                                                             (abst_voter vb
                                                               va vc)) /\
                                                             (abst_compatible
                                                               (abst_voter va
                                                                 vb vc)
                                                               (abst_voter vc
                                                                 va vb)))).
        (* For step <3>2. *)
        Parameter __C_1_2_2_LEMMA :
          (~Is_true (((_p_V_consistency_rule va vc)))) -> (((abst_compatible
                                                              (abst_voter va
                                                                vb vc)
                                                              (abst_voter vb
                                                                va vc)) /\
                                                              (abst_compatible
                                                                (abst_voter
                                                                  va vb vc)
                                                                (abst_voter
                                                                  vc va vb)))).
        (* For method of Self used via "by property !compatible". *)
        Parameter abst_compatible :
          (Datatypes.prod _p_V_T _p_P_T) ->
            (Datatypes.prod _p_V_T _p_P_T) -> coq_builtins.prop__t.
        (* Theorem's body. *)
        Theorem for_zenon___C_1_2_LEMMA :
        ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
           (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
%%end-auto-proof
0
277b3faee9297e483ae5aca51adf122d
proof
397
Theorem for_zenon___C_1_2_LEMMA:((abst_compatible (abst_voter va vb vc)
(abst_voter vb va vc))/\(abst_compatible (abst_voter va vb vc) (
abst_voter vc va vb))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_imply _ _ (fun zenon_H5=>(zenon_imply _ _ (
fun zenon_H6=>(zenon_H6 zenon_H5)) (fun zenon_H4=>(zenon_G zenon_H4))
__C_1_2_2_LEMMA)) (fun zenon_H4=>(zenon_G zenon_H4)) __C_1_2_1_LEMMA)))).
Qed.

0
329efc86e50cdae0b0b8d7e84f11408e
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
2131

%%begin-auto-proof
%%name: for_zenon___C_1_LEMMA
      
      
      
      (* Methods to use for automated proof. *)
      (* For step <2>1. *)
      Parameter __C_1_1_LEMMA :
        (Is_true ((_p_V_consistency_rule va vb))) -> (((abst_compatible
                                                         (abst_voter va vb
                                                           vc)
                                                         (abst_voter vb va
                                                           vc)) /\
                                                         (abst_compatible
                                                           (abst_voter va vb
                                                             vc)
                                                           (abst_voter vc va
                                                             vb)))).
      (* For step <2>2. *)
      Parameter __C_1_2_LEMMA :
        (~Is_true (((_p_V_consistency_rule va vb)))) -> (((abst_compatible
                                                            (abst_voter va vb
                                                              vc)
                                                            (abst_voter vb va
                                                              vc)) /\
                                                            (abst_compatible
                                                              (abst_voter va
                                                                vb vc)
                                                              (abst_voter vc
                                                                va vb)))).
      (* For method of Self used via "by property !compatible". *)
      Parameter abst_compatible :
        (Datatypes.prod _p_V_T _p_P_T) ->
          (Datatypes.prod _p_V_T _p_P_T) -> coq_builtins.prop__t.
      (* Theorem's body. *)
      Theorem for_zenon___C_1_LEMMA :
      ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
         (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
%%end-auto-proof
0
a29941edf82c3ba9f9a9030345204327
proof
392
Theorem for_zenon___C_1_LEMMA:((abst_compatible (abst_voter va vb vc) (
abst_voter vb va vc))/\(abst_compatible (abst_voter va vb vc) (
abst_voter vc va vb))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_imply _ _ (fun zenon_H5=>(zenon_imply _ _ (
fun zenon_H6=>(zenon_H6 zenon_H5)) (fun zenon_H4=>(zenon_G zenon_H4))
__C_1_2_LEMMA)) (fun zenon_H4=>(zenon_G zenon_H4)) __C_1_1_LEMMA)))).
Qed.

0
3e1ab6c74f05618bfdb74311cb6e8492
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
877

%%begin-auto-proof
%%name: for_zenon_voter_independant_from_order_v1_v2
    
    
    
    (* Methods to use for automated proof. *)
    (* For step <1>1. *)
    Parameter __C_1_LEMMA : forall va : _p_V_T, forall vb : _p_V_T,
      forall vc : _p_V_T,
      (((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
          (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb)))).
    (* For method of Self used via "by property !compatible". *)
    Parameter abst_compatible :
      (Datatypes.prod _p_V_T _p_P_T) ->
        (Datatypes.prod _p_V_T _p_P_T) -> coq_builtins.prop__t.
    (* Theorem's body. *)
    Theorem for_zenon_voter_independant_from_order_v1_v2 :
    forall v1  v2  v3 : _p_V_T,
      (abst_compatible (abst_voter v1 v2 v3) (abst_voter v2 v1 v3)) /\
        (abst_compatible (abst_voter v1 v2 v3) (abst_voter v3 v1 v2)).
%%end-auto-proof
0
12083aab16c5ee6b2068f8486ce27f42
proof
307
Theorem for_zenon_voter_independant_from_order_v1_v2:(forall va:_p_V_T,(
forall vb:_p_V_T,(forall vc:_p_V_T,((abst_compatible (abst_voter va vb
vc) (abst_voter vb va vc))/\(abst_compatible (abst_voter va vb vc) (
abst_voter vc va vb)))))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_G __C_1_LEMMA)))).
Qed.

0
281603c2a3b123c0309a8b7febefece3
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1355

%%begin-auto-proof
%%name: for_zenon___D_1_1_1_1_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For hypothesis "H1". *)
            Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
            (* For hypothesis "H11". *)
            Parameter H11 : Is_true ((_p_V_consistency_rule vb vc)).
            (* For hypothesis "H111". *)
            Parameter H111 : Is_true ((_p_V_consistency_rule va vc)).
            (* For method of Self used via "by property !vote_perfect". *)
            Parameter abst_vote_perfect :
              forall v1  v2  v3 : _p_V_T,
                (Is_true ((_p_V_consistency_rule v1 v2)) /\
                   Is_true ((_p_V_consistency_rule v2 v3)) /\
                     Is_true ((_p_V_consistency_rule v1 v3))) ->
                  (Is_true ((((basics._equal_ _)
                               (abst_value (abst_voter v1 v2 v3)) v1))) /\
                     Is_true ((((basics._equal_ _)
                                 (abst_diag (abst_voter v1 v2 v3))
                                 (_p_P_constr _p_C_capt_1 _p_E_perfect_match))))).
            (* Theorem's body. *)
            Theorem for_zenon___D_1_1_1_1_LEMMA :
            Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                        va))).
%%end-auto-proof
0
8809712dd3f479c0ba86d2e9d5684379
proof
1637
Theorem for_zenon___D_1_1_1_1_LEMMA:(Is_true (basics._equal_ _ (
abst_value (abst_voter va vb vc)) va)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule v1 v2))/\((
Is_true (_p_V_consistency_rule v2 v3))/\(Is_true (_p_V_consistency_rule
v1 v3))))->((Is_true (basics._equal_ _ (abst_value (abst_voter v1 v2 v3)
) v1))/\(Is_true (basics._equal_ _ (abst_diag (abst_voter v1 v2 v3)) (
_p_P_constr _p_C_capt_1 _p_E_perfect_match)))))))) va (fun zenon_Hf=>(
zenon_all _p_V_T (fun v2:_p_V_T=>(forall v3:_p_V_T,(((Is_true (
_p_V_consistency_rule va v2))/\((Is_true (_p_V_consistency_rule v2 v3))
/\(Is_true (_p_V_consistency_rule va v3))))->((Is_true (basics._equal_
_ (abst_value (abst_voter va v2 v3)) va))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter va v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_perfect_match))))))) vb (fun zenon_He=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((Is_true (_p_V_consistency_rule va vb))/\((Is_true (
_p_V_consistency_rule vb v3))/\(Is_true (_p_V_consistency_rule va v3))))
->((Is_true (basics._equal_ _ (abst_value (abst_voter va vb v3)) va))/\(
Is_true (basics._equal_ _ (abst_diag (abst_voter va vb v3)) (
_p_P_constr _p_C_capt_1 _p_E_perfect_match)))))) vc (fun zenon_Hd=>(
zenon_imply _ _ (fun zenon_Hc=>(zenon_notand _ _ (fun zenon_Hb=>(
zenon_Hb H1)) (fun zenon_Ha=>(zenon_notand _ _ (fun zenon_H9=>(zenon_H9
H11)) (fun zenon_H8=>(zenon_H8 H111)) zenon_Ha)) zenon_Hc)) (fun
zenon_H7=>(zenon_and _ _ (fun zenon_H5 zenon_H6=>(zenon_G zenon_H5))
zenon_H7)) zenon_Hd)) zenon_He)) zenon_Hf)) abst_vote_perfect)))).
Qed.

0
b36284642fbf6224b233f3d0726ff118
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1365

%%begin-auto-proof
%%name: for_zenon___D_1_1_1_2_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For hypothesis "H1". *)
            Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
            (* For hypothesis "H11". *)
            Parameter H11 : Is_true ((_p_V_consistency_rule vb vc)).
            (* For hypothesis "H112". *)
            Parameter H112 : ~Is_true (((_p_V_consistency_rule va vc))).
            (* For method of Self used via "by property !vote_partial_c2". *)
            Parameter abst_vote_partial_c2 :
              forall v1  v2  v3 : _p_V_T,
                (Is_true ((_p_V_consistency_rule v1 v2)) /\
                   ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                     Is_true ((_p_V_consistency_rule v2 v3))) ->
                  (Is_true ((((basics._equal_ _)
                               (abst_value (abst_voter v1 v2 v3)) v2))) /\
                     Is_true ((((basics._equal_ _)
                                 (abst_diag (abst_voter v1 v2 v3))
                                 (_p_P_constr _p_C_capt_2 _p_E_partial_match))))).
            (* Theorem's body. *)
            Theorem for_zenon___D_1_1_1_2_LEMMA :
            Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                        vb))).
%%end-auto-proof
0
6a7d2c0f268a1a7c248170bed6747973
proof
1680
Theorem for_zenon___D_1_1_1_2_LEMMA:(Is_true (basics._equal_ _ (
abst_value (abst_voter va vb vc)) vb)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule v1 v2))/\((~
(Is_true (_p_V_consistency_rule v1 v3)))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v2))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_2
_p_E_partial_match)))))))) va (fun zenon_H10=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule va v2))/\((
~(Is_true (_p_V_consistency_rule va v3)))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter va v2 v3)) v2))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter va v2 v3)) (_p_P_constr _p_C_capt_2
_p_E_partial_match))))))) vb (fun zenon_Hf=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((Is_true (_p_V_consistency_rule va vb))/\((~(Is_true (
_p_V_consistency_rule va v3)))/\(Is_true (_p_V_consistency_rule vb v3)))
)->((Is_true (basics._equal_ _ (abst_value (abst_voter va vb v3)) vb))
/\(Is_true (basics._equal_ _ (abst_diag (abst_voter va vb v3)) (
_p_P_constr _p_C_capt_2 _p_E_partial_match)))))) vc (fun zenon_He=>(
zenon_imply _ _ (fun zenon_Hd=>(zenon_notand _ _ (fun zenon_Hc=>(
zenon_Hc H1)) (fun zenon_Hb=>(zenon_notand _ _ (fun zenon_Ha=>(zenon_Ha
(fun zenon_H9=>(H112 zenon_H9)))) (fun zenon_H8=>(zenon_H8 H11))
zenon_Hb)) zenon_Hd)) (fun zenon_H7=>(zenon_and _ _ (fun zenon_H5
zenon_H6=>(zenon_G zenon_H5)) zenon_H7)) zenon_He)) zenon_Hf))
zenon_H10)) abst_vote_partial_c2)))).
Qed.

0
915f69ae05c1c43e962fc5a4e9a5936a
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1714

%%begin-auto-proof
%%name: for_zenon___D_1_1_1_LEMMA
          
          
          
          (* Methods to use for automated proof. *)
          (* For step <4>1. *)
          Parameter __D_1_1_1_1_LEMMA :
            (Is_true ((_p_V_consistency_rule va vc))) -> (Is_true ((((basics._equal_
                                                                    _)
                                                                    (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                    va)))).
          (* For step <4>2. *)
          Parameter __D_1_1_1_2_LEMMA :
            (~Is_true (((_p_V_consistency_rule va vc)))) -> (Is_true (
                                                               (((basics._equal_
                                                                   _)
                                                                  (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                  vb)))).
          (* Theorem's body. *)
          Theorem for_zenon___D_1_1_1_LEMMA :
          (Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                       va))) \/
             Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                         vb))) \/
               Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter va vb vc)) vc)))).
%%end-auto-proof
0
acc507523e245cb1fb9ada74832c7e16
proof
592
Theorem for_zenon___D_1_1_1_LEMMA:((Is_true (basics._equal_ _ (
abst_value (abst_voter va vb vc)) va))\/((Is_true (basics._equal_ _ (
abst_value (abst_voter va vb vc)) vb))\/(Is_true (basics._equal_ _ (
abst_value (abst_voter va vb vc)) vc)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notor _ _ (fun zenon_H4 zenon_Ha=>(
zenon_notor _ _ (fun zenon_H6 zenon_H9=>(zenon_imply _ _ (fun zenon_H7=>
(zenon_imply _ _ (fun zenon_H8=>(zenon_H8 zenon_H7)) (fun zenon_H5=>(
zenon_H6 zenon_H5)) __D_1_1_1_2_LEMMA)) (fun zenon_H3=>(zenon_H4
zenon_H3)) __D_1_1_1_1_LEMMA)) zenon_Ha)) zenon_G)))).
Qed.

0
92e2d1e223ff5d1202208506ac6df5b5
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1365

%%begin-auto-proof
%%name: for_zenon___D_1_1_2_1_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For hypothesis "H1". *)
            Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
            (* For hypothesis "H12". *)
            Parameter H12 : ~Is_true (((_p_V_consistency_rule vb vc))).
            (* For hypothesis "H121". *)
            Parameter H121 : Is_true ((_p_V_consistency_rule va vc)).
            (* For method of Self used via "by property !vote_partial_c1". *)
            Parameter abst_vote_partial_c1 :
              forall v1  v2  v3 : _p_V_T,
                (Is_true ((_p_V_consistency_rule v1 v2)) /\
                   Is_true ((_p_V_consistency_rule v1 v3)) /\
                     ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                  (Is_true ((((basics._equal_ _)
                               (abst_value (abst_voter v1 v2 v3)) v1))) /\
                     Is_true ((((basics._equal_ _)
                                 (abst_diag (abst_voter v1 v2 v3))
                                 (_p_P_constr _p_C_capt_1 _p_E_partial_match))))).
            (* Theorem's body. *)
            Theorem for_zenon___D_1_1_2_1_LEMMA :
            Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                        va))).
%%end-auto-proof
0
9ae906f966d7ad177df4a79632501045
proof
1680
Theorem for_zenon___D_1_1_2_1_LEMMA:(Is_true (basics._equal_ _ (
abst_value (abst_voter va vb vc)) va)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule v1 v2))/\((
Is_true (_p_V_consistency_rule v1 v3))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v1))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_partial_match)))))))) va (fun zenon_H10=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule va v2))/\((
Is_true (_p_V_consistency_rule va v3))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter va v2 v3)) va))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter va v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_partial_match))))))) vb (fun zenon_Hf=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((Is_true (_p_V_consistency_rule va vb))/\((Is_true (
_p_V_consistency_rule va v3))/\(~(Is_true (_p_V_consistency_rule vb v3))
)))->((Is_true (basics._equal_ _ (abst_value (abst_voter va vb v3)) va))
/\(Is_true (basics._equal_ _ (abst_diag (abst_voter va vb v3)) (
_p_P_constr _p_C_capt_1 _p_E_partial_match)))))) vc (fun zenon_He=>(
zenon_imply _ _ (fun zenon_Hd=>(zenon_notand _ _ (fun zenon_Hc=>(
zenon_Hc H1)) (fun zenon_Hb=>(zenon_notand _ _ (fun zenon_Ha=>(zenon_Ha
H121)) (fun zenon_H9=>(zenon_H9 (fun zenon_H8=>(H12 zenon_H8))))
zenon_Hb)) zenon_Hd)) (fun zenon_H7=>(zenon_and _ _ (fun zenon_H5
zenon_H6=>(zenon_G zenon_H5)) zenon_H7)) zenon_He)) zenon_Hf))
zenon_H10)) abst_vote_partial_c1)))).
Qed.

0
4b72f5753d044349ac43fe9e095557df
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1363

%%begin-auto-proof
%%name: for_zenon___D_1_1_2_2_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For hypothesis "H1". *)
            Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
            (* For hypothesis "H12". *)
            Parameter H12 : ~Is_true (((_p_V_consistency_rule vb vc))).
            (* For hypothesis "H122". *)
            Parameter H122 : ~Is_true (((_p_V_consistency_rule va vc))).
            (* For method of Self used via "by property !vote_match_c3". *)
            Parameter abst_vote_match_c3 :
              forall v1  v2  v3 : _p_V_T,
                (Is_true ((_p_V_consistency_rule v1 v2)) /\
                   ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                     ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                  (Is_true ((((basics._equal_ _)
                               (abst_value (abst_voter v1 v2 v3)) v1))) /\
                     Is_true ((((basics._equal_ _)
                                 (abst_diag (abst_voter v1 v2 v3))
                                 (_p_P_constr _p_C_capt_3 _p_E_range_match))))).
            (* Theorem's body. *)
            Theorem for_zenon___D_1_1_2_2_LEMMA :
            Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                        va))).
%%end-auto-proof
0
96d2315e88274dba35ea1fb56ebd0707
proof
1711
Theorem for_zenon___D_1_1_2_2_LEMMA:(Is_true (basics._equal_ _ (
abst_value (abst_voter va vb vc)) va)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule v1 v2))/\((~
(Is_true (_p_V_consistency_rule v1 v3)))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v1))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_3
_p_E_range_match)))))))) va (fun zenon_H11=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((Is_true (_p_V_consistency_rule va v2))/\((
~(Is_true (_p_V_consistency_rule va v3)))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter va v2 v3)) va))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter va v2 v3)) (_p_P_constr _p_C_capt_3
_p_E_range_match))))))) vb (fun zenon_H10=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((Is_true (_p_V_consistency_rule va vb))/\((~(Is_true (
_p_V_consistency_rule va v3)))/\(~(Is_true (_p_V_consistency_rule vb v3)
))))->((Is_true (basics._equal_ _ (abst_value (abst_voter va vb v3)) va)
)/\(Is_true (basics._equal_ _ (abst_diag (abst_voter va vb v3)) (
_p_P_constr _p_C_capt_3 _p_E_range_match)))))) vc (fun zenon_Hf=>(
zenon_imply _ _ (fun zenon_He=>(zenon_notand _ _ (fun zenon_Hd=>(
zenon_Hd H1)) (fun zenon_Hc=>(zenon_notand _ _ (fun zenon_Hb=>(zenon_Hb
(fun zenon_Ha=>(H122 zenon_Ha)))) (fun zenon_H9=>(zenon_H9 (fun
zenon_H8=>(H12 zenon_H8)))) zenon_Hc)) zenon_He)) (fun zenon_H7=>(
zenon_and _ _ (fun zenon_H5 zenon_H6=>(zenon_G zenon_H5)) zenon_H7))
zenon_Hf)) zenon_H10)) zenon_H11)) abst_vote_match_c3)))).
Qed.

0
b55e48e9c87a7b553130976e6555ad35
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1714

%%begin-auto-proof
%%name: for_zenon___D_1_1_2_LEMMA
          
          
          
          (* Methods to use for automated proof. *)
          (* For step <4>1. *)
          Parameter __D_1_1_2_1_LEMMA :
            (Is_true ((_p_V_consistency_rule va vc))) -> (Is_true ((((basics._equal_
                                                                    _)
                                                                    (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                    va)))).
          (* For step <4>2. *)
          Parameter __D_1_1_2_2_LEMMA :
            (~Is_true (((_p_V_consistency_rule va vc)))) -> (Is_true (
                                                               (((basics._equal_
                                                                   _)
                                                                  (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                  va)))).
          (* Theorem's body. *)
          Theorem for_zenon___D_1_1_2_LEMMA :
          (Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                       va))) \/
             Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                         vb))) \/
               Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter va vb vc)) vc)))).
%%end-auto-proof
0
2e2ee59807a1db03afead3ba8fba4c2b
proof
539
Theorem for_zenon___D_1_1_2_LEMMA:((Is_true (basics._equal_ _ (
abst_value (abst_voter va vb vc)) va))\/((Is_true (basics._equal_ _ (
abst_value (abst_voter va vb vc)) vb))\/(Is_true (basics._equal_ _ (
abst_value (abst_voter va vb vc)) vc)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notor _ _ (fun zenon_H4 zenon_H7=>(
zenon_imply _ _ (fun zenon_H5=>(zenon_imply _ _ (fun zenon_H6=>(
zenon_H6 zenon_H5)) (fun zenon_H3=>(zenon_H4 zenon_H3))
__D_1_1_2_2_LEMMA)) (fun zenon_H3=>(zenon_H4 zenon_H3))
__D_1_1_2_1_LEMMA)) zenon_G)))).
Qed.

0
ab70b4f17b4226b494e78b276c8a019f
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
3819

%%begin-auto-proof
%%name: for_zenon___D_1_1_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For step <3>1. *)
        Parameter __D_1_1_1_LEMMA :
          (Is_true ((_p_V_consistency_rule vb vc))) -> ((Is_true ((((basics._equal_
                                                                    _)
                                                                    (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                    va))) \/
                                                           Is_true ((((basics._equal_
                                                                    _)
                                                                    (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                    vb))) \/
                                                             Is_true (
                                                               (((basics._equal_
                                                                   _)
                                                                  (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                  vc))))).
        (* For step <3>2. *)
        Parameter __D_1_1_2_LEMMA :
          (~Is_true (((_p_V_consistency_rule vb vc)))) -> ((Is_true (
                                                              (((basics._equal_
                                                                  _)
                                                                 (abst_value
                                                                   (abst_voter
                                                                    va vb vc))
                                                                 va))) \/
                                                              Is_true (
                                                                (((basics._equal_
                                                                    _)
                                                                   (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                   vb))) \/
                                                                Is_true (
                                                                  (((basics._equal_
                                                                    _)
                                                                    (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                    vc))))).
        (* Theorem's body. *)
        Theorem for_zenon___D_1_1_LEMMA :
        (Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc)) va))) \/
           Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                       vb))) \/
             Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                         vc))) \/
               (~Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))))).
%%end-auto-proof
0
fb6e8c3467d58a75171ffb7547096a2c
proof
1033
Theorem for_zenon___D_1_1_LEMMA:((Is_true (basics._equal_ _ (abst_value
(abst_voter va vb vc)) va))\/((Is_true (basics._equal_ _ (abst_value (
abst_voter va vb vc)) vb))\/((Is_true (basics._equal_ _ (abst_value (
abst_voter va vb vc)) vc))\/(~(Is_true (_p_P_valid (abst_diag (
abst_voter va vb vc)))))))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notor _ _ (fun zenon_H9 zenon_H10=>(
zenon_notor _ _ (fun zenon_H6 zenon_Hf=>(zenon_notor _ _ (fun zenon_H4
zenon_He=>(zenon_imply _ _ (fun zenon_Hc=>(zenon_imply _ _ (fun
zenon_Hd=>(zenon_Hd (fun zenon_Hb=>(zenon_Hc zenon_Hb)))) (fun
zenon_Ha=>(zenon_or _ _ (fun zenon_H8=>(zenon_H9 zenon_H8)) (fun
zenon_H7=>(zenon_or _ _ (fun zenon_H5=>(zenon_H6 zenon_H5)) (fun
zenon_H3=>(zenon_H4 zenon_H3)) zenon_H7)) zenon_Ha)) __D_1_1_2_LEMMA)) (
fun zenon_Ha=>(zenon_or _ _ (fun zenon_H8=>(zenon_H9 zenon_H8)) (fun
zenon_H7=>(zenon_or _ _ (fun zenon_H5=>(zenon_H6 zenon_H5)) (fun
zenon_H3=>(zenon_H4 zenon_H3)) zenon_H7)) zenon_Ha)) __D_1_1_1_LEMMA))
zenon_Hf)) zenon_H10)) zenon_G)))).
Qed.

0
bc661aab310fed1a98bac1423ae3cc6a
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1365

%%begin-auto-proof
%%name: for_zenon___D_1_2_1_1_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For hypothesis "H2". *)
            Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
            (* For hypothesis "H21". *)
            Parameter H21 : Is_true ((_p_V_consistency_rule vb vc)).
            (* For hypothesis "H211". *)
            Parameter H211 : Is_true ((_p_V_consistency_rule va vc)).
            (* For method of Self used via "by property !vote_partial_c3". *)
            Parameter abst_vote_partial_c3 :
              forall v1  v2  v3 : _p_V_T,
                (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                   Is_true ((_p_V_consistency_rule v1 v3)) /\
                     Is_true ((_p_V_consistency_rule v2 v3))) ->
                  (Is_true ((((basics._equal_ _)
                               (abst_value (abst_voter v1 v2 v3)) v3))) /\
                     Is_true ((((basics._equal_ _)
                                 (abst_diag (abst_voter v1 v2 v3))
                                 (_p_P_constr _p_C_capt_3 _p_E_partial_match))))).
            (* Theorem's body. *)
            Theorem for_zenon___D_1_2_1_1_LEMMA :
            Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                        vc))).
%%end-auto-proof
0
c7571708aa45d54b29c8c4f947354f9f
proof
1680
Theorem for_zenon___D_1_2_1_1_LEMMA:(Is_true (basics._equal_ _ (
abst_value (abst_voter va vb vc)) vc)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule v1 v2)))
/\((Is_true (_p_V_consistency_rule v1 v3))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v3))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_3
_p_E_partial_match)))))))) va (fun zenon_H10=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule va v2)))
/\((Is_true (_p_V_consistency_rule va v3))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter va v2 v3)) v3))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter va v2 v3)) (_p_P_constr _p_C_capt_3
_p_E_partial_match))))))) vb (fun zenon_Hf=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((~(Is_true (_p_V_consistency_rule va vb)))/\((Is_true (
_p_V_consistency_rule va v3))/\(Is_true (_p_V_consistency_rule vb v3))))
->((Is_true (basics._equal_ _ (abst_value (abst_voter va vb v3)) v3))/\(
Is_true (basics._equal_ _ (abst_diag (abst_voter va vb v3)) (
_p_P_constr _p_C_capt_3 _p_E_partial_match)))))) vc (fun zenon_He=>(
zenon_imply _ _ (fun zenon_Hd=>(zenon_notand _ _ (fun zenon_Hc=>(
zenon_Hc (fun zenon_Hb=>(H2 zenon_Hb)))) (fun zenon_Ha=>(zenon_notand _
_ (fun zenon_H9=>(zenon_H9 H211)) (fun zenon_H8=>(zenon_H8 H21))
zenon_Ha)) zenon_Hd)) (fun zenon_H7=>(zenon_and _ _ (fun zenon_H5
zenon_H6=>(zenon_G zenon_H5)) zenon_H7)) zenon_He)) zenon_Hf))
zenon_H10)) abst_vote_partial_c3)))).
Qed.

0
031d82c55294fe24c727ff48b4c871a2
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1363

%%begin-auto-proof
%%name: for_zenon___D_1_2_1_2_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For hypothesis "H2". *)
            Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
            (* For hypothesis "H21". *)
            Parameter H21 : Is_true ((_p_V_consistency_rule vb vc)).
            (* For hypothesis "H212". *)
            Parameter H212 : ~Is_true (((_p_V_consistency_rule va vc))).
            (* For method of Self used via "by property !vote_match_c1". *)
            Parameter abst_vote_match_c1 :
              forall v1  v2  v3 : _p_V_T,
                (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                   ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                     Is_true ((_p_V_consistency_rule v2 v3))) ->
                  (Is_true ((((basics._equal_ _)
                               (abst_value (abst_voter v1 v2 v3)) v2))) /\
                     Is_true ((((basics._equal_ _)
                                 (abst_diag (abst_voter v1 v2 v3))
                                 (_p_P_constr _p_C_capt_1 _p_E_range_match))))).
            (* Theorem's body. *)
            Theorem for_zenon___D_1_2_1_2_LEMMA :
            Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                        vb))).
%%end-auto-proof
0
d73b4998dbbe9a5fce6478ed6cfcd907
proof
1711
Theorem for_zenon___D_1_2_1_2_LEMMA:(Is_true (basics._equal_ _ (
abst_value (abst_voter va vb vc)) vb)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule v1 v2)))
/\((~(Is_true (_p_V_consistency_rule v1 v3)))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v2))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_range_match)))))))) va (fun zenon_H11=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule va v2)))
/\((~(Is_true (_p_V_consistency_rule va v3)))/\(Is_true (
_p_V_consistency_rule v2 v3))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter va v2 v3)) v2))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter va v2 v3)) (_p_P_constr _p_C_capt_1
_p_E_range_match))))))) vb (fun zenon_H10=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((~(Is_true (_p_V_consistency_rule va vb)))/\((~(Is_true (
_p_V_consistency_rule va v3)))/\(Is_true (_p_V_consistency_rule vb v3)))
)->((Is_true (basics._equal_ _ (abst_value (abst_voter va vb v3)) vb))
/\(Is_true (basics._equal_ _ (abst_diag (abst_voter va vb v3)) (
_p_P_constr _p_C_capt_1 _p_E_range_match)))))) vc (fun zenon_Hf=>(
zenon_imply _ _ (fun zenon_He=>(zenon_notand _ _ (fun zenon_Hd=>(
zenon_Hd (fun zenon_Hc=>(H2 zenon_Hc)))) (fun zenon_Hb=>(zenon_notand _
_ (fun zenon_Ha=>(zenon_Ha (fun zenon_H9=>(H212 zenon_H9)))) (fun
zenon_H8=>(zenon_H8 H21)) zenon_Hb)) zenon_He)) (fun zenon_H7=>(
zenon_and _ _ (fun zenon_H5 zenon_H6=>(zenon_G zenon_H5)) zenon_H7))
zenon_Hf)) zenon_H10)) zenon_H11)) abst_vote_match_c1)))).
Qed.

0
fbd6f5a1ccba9efe47eea0af2b927ec9
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1714

%%begin-auto-proof
%%name: for_zenon___D_1_2_1_LEMMA
          
          
          
          (* Methods to use for automated proof. *)
          (* For step <4>1. *)
          Parameter __D_1_2_1_1_LEMMA :
            (Is_true ((_p_V_consistency_rule va vc))) -> (Is_true ((((basics._equal_
                                                                    _)
                                                                    (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                    vc)))).
          (* For step <4>2. *)
          Parameter __D_1_2_1_2_LEMMA :
            (~Is_true (((_p_V_consistency_rule va vc)))) -> (Is_true (
                                                               (((basics._equal_
                                                                   _)
                                                                  (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                  vb)))).
          (* Theorem's body. *)
          Theorem for_zenon___D_1_2_1_LEMMA :
          (Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                       va))) \/
             Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                         vb))) \/
               Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter va vb vc)) vc)))).
%%end-auto-proof
0
1f05a52e222ee413219fe46a2aa8d935
proof
592
Theorem for_zenon___D_1_2_1_LEMMA:((Is_true (basics._equal_ _ (
abst_value (abst_voter va vb vc)) va))\/((Is_true (basics._equal_ _ (
abst_value (abst_voter va vb vc)) vb))\/(Is_true (basics._equal_ _ (
abst_value (abst_voter va vb vc)) vc)))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notor _ _ (fun zenon_Ha zenon_H9=>(
zenon_notor _ _ (fun zenon_H6 zenon_H4=>(zenon_imply _ _ (fun zenon_H7=>
(zenon_imply _ _ (fun zenon_H8=>(zenon_H8 zenon_H7)) (fun zenon_H5=>(
zenon_H6 zenon_H5)) __D_1_2_1_2_LEMMA)) (fun zenon_H3=>(zenon_H4
zenon_H3)) __D_1_2_1_1_LEMMA)) zenon_H9)) zenon_G)))).
Qed.

0
d2e9b45f037125b5cc55c4c1ba653cbd
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1363

%%begin-auto-proof
%%name: for_zenon___D_1_2_2_1_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For hypothesis "H2". *)
            Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
            (* For hypothesis "H22". *)
            Parameter H22 : ~Is_true (((_p_V_consistency_rule vb vc))).
            (* For hypothesis "H221". *)
            Parameter H221 : Is_true ((_p_V_consistency_rule va vc)).
            (* For method of Self used via "by property !vote_match_c2". *)
            Parameter abst_vote_match_c2 :
              forall v1  v2  v3 : _p_V_T,
                (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                   Is_true ((_p_V_consistency_rule v1 v3)) /\
                     ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                  (Is_true ((((basics._equal_ _)
                               (abst_value (abst_voter v1 v2 v3)) v3))) /\
                     Is_true ((((basics._equal_ _)
                                 (abst_diag (abst_voter v1 v2 v3))
                                 (_p_P_constr _p_C_capt_2 _p_E_range_match))))).
            (* Theorem's body. *)
            Theorem for_zenon___D_1_2_2_1_LEMMA :
            Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                        vc))).
%%end-auto-proof
0
43b831515e9cf92a984677e751417a7c
proof
1711
Theorem for_zenon___D_1_2_2_1_LEMMA:(Is_true (basics._equal_ _ (
abst_value (abst_voter va vb vc)) vc)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule v1 v2)))
/\((Is_true (_p_V_consistency_rule v1 v3))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter v1 v2 v3)) v3))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_2
_p_E_range_match)))))))) va (fun zenon_H11=>(zenon_all _p_V_T (fun v2
:_p_V_T=>(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule va v2)))
/\((Is_true (_p_V_consistency_rule va v3))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->((Is_true (basics._equal_ _ (
abst_value (abst_voter va v2 v3)) v3))/\(Is_true (basics._equal_ _ (
abst_diag (abst_voter va v2 v3)) (_p_P_constr _p_C_capt_2
_p_E_range_match))))))) vb (fun zenon_H10=>(zenon_all _p_V_T (fun v3
:_p_V_T=>(((~(Is_true (_p_V_consistency_rule va vb)))/\((Is_true (
_p_V_consistency_rule va v3))/\(~(Is_true (_p_V_consistency_rule vb v3))
)))->((Is_true (basics._equal_ _ (abst_value (abst_voter va vb v3)) v3))
/\(Is_true (basics._equal_ _ (abst_diag (abst_voter va vb v3)) (
_p_P_constr _p_C_capt_2 _p_E_range_match)))))) vc (fun zenon_Hf=>(
zenon_imply _ _ (fun zenon_He=>(zenon_notand _ _ (fun zenon_Hd=>(
zenon_Hd (fun zenon_Hc=>(H2 zenon_Hc)))) (fun zenon_Hb=>(zenon_notand _
_ (fun zenon_Ha=>(zenon_Ha H221)) (fun zenon_H9=>(zenon_H9 (fun
zenon_H8=>(H22 zenon_H8)))) zenon_Hb)) zenon_He)) (fun zenon_H7=>(
zenon_and _ _ (fun zenon_H5 zenon_H6=>(zenon_G zenon_H5)) zenon_H7))
zenon_Hf)) zenon_H10)) zenon_H11)) abst_vote_match_c2)))).
Qed.

0
2813110d654df5a4a79901add81984bf
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1316

%%begin-auto-proof
%%name: for_zenon___D_1_2_2_2_1_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* For hypothesis "H22". *)
              Parameter H22 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For hypothesis "H222". *)
              Parameter H222 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For method of Self used via "by property !vote_no_match". *)
              Parameter abst_vote_no_match :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    Is_true ((((basics._equal_ _)
                                (abst_diag (abst_voter v1 v2 v3))
                                (_p_P_constr _p_C_capt_1 _p_E_no_match)))).
              (* Theorem's body. *)
              Theorem for_zenon___D_1_2_2_2_1_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter va vb vc))
                          (_p_P_constr _p_C_capt_1 _p_E_no_match)))).
%%end-auto-proof
0
56d0a4e6f3b1f1a37797e1871b417a1d
proof
1510
Theorem for_zenon___D_1_2_2_2_1_LEMMA:(Is_true (basics._equal_ _ (
abst_diag (abst_voter va vb vc)) (_p_P_constr _p_C_capt_1 _p_E_no_match)
)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_all _p_V_T (fun v1:_p_V_T=>(forall v2
:_p_V_T,(forall v3:_p_V_T,(((~(Is_true (_p_V_consistency_rule v1 v2)))
/\((~(Is_true (_p_V_consistency_rule v1 v3)))/\(~(Is_true (
_p_V_consistency_rule v2 v3)))))->(Is_true (basics._equal_ _ (abst_diag
(abst_voter v1 v2 v3)) (_p_P_constr _p_C_capt_1 _p_E_no_match))))))) va
(fun zenon_H10=>(zenon_all _p_V_T (fun v2:_p_V_T=>(forall v3:_p_V_T,(((~
(Is_true (_p_V_consistency_rule va v2)))/\((~(Is_true (
_p_V_consistency_rule va v3)))/\(~(Is_true (_p_V_consistency_rule v2 v3)
))))->(Is_true (basics._equal_ _ (abst_diag (abst_voter va v2 v3)) (
_p_P_constr _p_C_capt_1 _p_E_no_match)))))) vb (fun zenon_Hf=>(
zenon_all _p_V_T (fun v3:_p_V_T=>(((~(Is_true (_p_V_consistency_rule va
vb)))/\((~(Is_true (_p_V_consistency_rule va v3)))/\(~(Is_true (
_p_V_consistency_rule vb v3)))))->(Is_true (basics._equal_ _ (abst_diag
(abst_voter va vb v3)) (_p_P_constr _p_C_capt_1 _p_E_no_match))))) vc (
fun zenon_He=>(zenon_imply _ _ (fun zenon_Hd=>(zenon_notand _ _ (fun
zenon_Hc=>(zenon_Hc (fun zenon_Hb=>(H2 zenon_Hb)))) (fun zenon_Ha=>(
zenon_notand _ _ (fun zenon_H9=>(zenon_H9 (fun zenon_H8=>(H222 zenon_H8)
))) (fun zenon_H7=>(zenon_H7 (fun zenon_H6=>(H22 zenon_H6)))) zenon_Ha))
 zenon_Hd)) (fun zenon_H5=>(zenon_G zenon_H5)) zenon_He)) zenon_Hf))
zenon_H10)) abst_vote_no_match)))).
Qed.

0
a61c587b590398eef9633b92e0dcdb91
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1164

%%begin-auto-proof
%%name: for_zenon___D_1_2_2_2_2_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>1. *)
              Parameter __D_1_2_2_2_1_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter va vb vc))
                             (_p_P_constr _p_C_capt_1 _p_E_no_match))))).
              (* For method of Self used via "by definition of !state". *)
              Definition abst_state (diag : _p_P_T) : _p_E_T :=
                (_p_P_prj_b diag).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___D_1_2_2_2_2_LEMMA :
              Is_true (((_p_E_equal
                          (abst_state (abst_diag (abst_voter va vb vc)))
                          _p_E_no_match))).
%%end-auto-proof
0
63e6183a8c4306a493a56a51a7b53f00
proof
1694
Theorem for_zenon___D_1_2_2_2_2_LEMMA:(Is_true (_p_E_equal (abst_state (
abst_diag (abst_voter va vb vc))) _p_E_no_match)).
Proof.
exact(
(NNPP _ (fun zenon_G=>(coq_builtins.zenon_syntactic_equal
zenon_focal_eqdec _ (abst_diag (abst_voter va vb vc)) (_p_P_constr
_p_C_capt_1 _p_E_no_match) (fun zenon_H6=>(zenon_all _p_C_T (fun n1
:_p_C_T=>(forall n2:_p_E_T,(Is_true (_p_E_equal (_p_P_prj_b (
_p_P_constr n1 n2)) n2)))) _p_C_capt_1 (fun zenon_H9=>(zenon_all _p_E_T
(fun n2:_p_E_T=>(Is_true (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_1 n2)) n2))) _p_E_no_match (fun zenon_H3=>(zenon_subst _ (fun
zenon_Vf=>(Is_true zenon_Vf)) (_p_E_equal (_p_P_prj_b (_p_P_constr
_p_C_capt_1 _p_E_no_match)) _p_E_no_match) (_p_E_equal (abst_state (
abst_diag (abst_voter va vb vc))) _p_E_no_match) (fun zenon_H4=>(
zenon_subst _ (fun zenon_Vg=>(~((_p_E_equal zenon_Vg _p_E_no_match) = (
_p_E_equal (abst_state (abst_diag (abst_voter va vb vc))) _p_E_no_match)
))) (_p_P_prj_b (_p_P_constr _p_C_capt_1 _p_E_no_match)) (abst_state (
abst_diag (abst_voter va vb vc))) (fun zenon_H8=>(let zenon_H5
:=zenon_H8 in (zenon_subst _ (fun zenon_Vh=>(~((_p_P_prj_b zenon_Vh) = (
_p_P_prj_b (abst_diag (abst_voter va vb vc)))))) (_p_P_constr
_p_C_capt_1 _p_E_no_match) (abst_diag (abst_voter va vb vc)) (fun
zenon_H7=>(zenon_eqsym _ (abst_diag (abst_voter va vb vc)) (_p_P_constr
_p_C_capt_1 _p_E_no_match) zenon_H6 zenon_H7)) (zenon_notnot _ (
refl_equal (_p_P_prj_b (abst_diag (abst_voter va vb vc))))) zenon_H5)))
(zenon_notnot _ (refl_equal (_p_E_equal (abst_state (abst_diag (
abst_voter va vb vc))) _p_E_no_match))) zenon_H4)) zenon_G zenon_H3))
zenon_H9)) _p_P_prj_b_is_snd_of_pair)) __D_1_2_2_2_1_LEMMA)))).
Qed.

0
4c2f2171babe1176859606f8e6416e0e
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1024

%%begin-auto-proof
%%name: for_zenon___D_1_2_2_2_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For step <5>2. *)
            Parameter __D_1_2_2_2_2_LEMMA :
              (Is_true (((_p_E_equal
                           (abst_state (abst_diag (abst_voter va vb vc)))
                           _p_E_no_match)))).
            (* For method of Self used via "by definition of !state". *)
            Definition abst_state (diag : _p_P_T) : _p_E_T :=
              (_p_P_prj_b diag).
            (* For species parameter method used via "by property vote#P!no_match_is_invalid". *)
            Parameter _p_P_no_match_is_invalid :
              forall x : _p_P_T,
                Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_no_match)) ->
                  ~Is_true (((_p_P_valid x))).
            (* Theorem's body. *)
            Theorem for_zenon___D_1_2_2_2_LEMMA :
            (~Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc)))))).
%%end-auto-proof
0
0e1801a1bb7961add81335cb5612b87a
proof
1165
Theorem for_zenon___D_1_2_2_2_LEMMA:(~(Is_true (_p_P_valid (abst_diag (
abst_voter va vb vc))))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_G (fun zenon_H3=>(zenon_all _p_P_T (fun x
:_p_P_T=>((Is_true (_p_E_equal (_p_P_prj_b x) _p_E_no_match))->(~(
Is_true (_p_P_valid x))))) (abst_diag (abst_voter va vb vc)) (fun
zenon_H9=>(zenon_imply _ _ (fun zenon_H5=>(zenon_subst _ (fun zenon_Vf=>
(Is_true zenon_Vf)) (_p_E_equal (abst_state (abst_diag (abst_voter va
vb vc))) _p_E_no_match) (_p_E_equal (_p_P_prj_b (abst_diag (abst_voter
va vb vc))) _p_E_no_match) (fun zenon_H6=>(zenon_subst _ (fun zenon_Vg=>
(~((_p_E_equal zenon_Vg _p_E_no_match) = (_p_E_equal (_p_P_prj_b (
abst_diag (abst_voter va vb vc))) _p_E_no_match)))) (abst_state (
abst_diag (abst_voter va vb vc))) (_p_P_prj_b (abst_diag (abst_voter va
vb vc))) (fun zenon_H8=>(let zenon_H7:=zenon_H8 in (zenon_noteq _ (
_p_P_prj_b (abst_diag (abst_voter va vb vc))) zenon_H7))) (zenon_notnot
_ (refl_equal (_p_E_equal (_p_P_prj_b (abst_diag (abst_voter va vb vc)))
 _p_E_no_match))) zenon_H6)) zenon_H5 __D_1_2_2_2_2_LEMMA)) (fun
zenon_H4=>(zenon_H4 zenon_H3)) zenon_H9)) _p_P_no_match_is_invalid)))))).
Qed.

0
8507f4f185147505191d787a9d328078
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1658

%%begin-auto-proof
%%name: for_zenon___D_1_2_2_LEMMA
          
          
          
          (* Methods to use for automated proof. *)
          (* For step <4>1. *)
          Parameter __D_1_2_2_1_LEMMA :
            (Is_true ((_p_V_consistency_rule va vc))) -> (Is_true ((((basics._equal_
                                                                    _)
                                                                    (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                    vc)))).
          (* For step <4>2. *)
          Parameter __D_1_2_2_2_LEMMA :
            (~Is_true (((_p_V_consistency_rule va vc)))) -> ((~Is_true (
                                                                 ((_p_P_valid
                                                                    (abst_diag
                                                                    (abst_voter
                                                                    va vb vc))))))).
          (* Theorem's body. *)
          Theorem for_zenon___D_1_2_2_LEMMA :
          (Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                       va))) \/
             Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                         vb))) \/
               Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter va vb vc)) vc))) \/
                 (~Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))))).
%%end-auto-proof
0
fee01c058db737b0d62b776d32239ae4
proof
735
Theorem for_zenon___D_1_2_2_LEMMA:((Is_true (basics._equal_ _ (
abst_value (abst_voter va vb vc)) va))\/((Is_true (basics._equal_ _ (
abst_value (abst_voter va vb vc)) vb))\/((Is_true (basics._equal_ _ (
abst_value (abst_voter va vb vc)) vc))\/(~(Is_true (_p_P_valid (
abst_diag (abst_voter va vb vc)))))))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notor _ _ (fun zenon_Hd zenon_Hc=>(
zenon_notor _ _ (fun zenon_Hb zenon_Ha=>(zenon_notor _ _ (fun zenon_H4
zenon_H9=>(zenon_H9 (fun zenon_H5=>(zenon_imply _ _ (fun zenon_H7=>(
zenon_imply _ _ (fun zenon_H8=>(zenon_H8 zenon_H7)) (fun zenon_H6=>(
zenon_H6 zenon_H5)) __D_1_2_2_2_LEMMA)) (fun zenon_H3=>(zenon_H4
zenon_H3)) __D_1_2_2_1_LEMMA)))) zenon_Ha)) zenon_Hc)) zenon_G)))).
Qed.

0
21d05b9776b749db26f32b622a76134f
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
4223

%%begin-auto-proof
%%name: for_zenon___D_1_2_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For step <3>1. *)
        Parameter __D_1_2_1_LEMMA :
          (Is_true ((_p_V_consistency_rule vb vc))) -> ((Is_true ((((basics._equal_
                                                                    _)
                                                                    (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                    va))) \/
                                                           Is_true ((((basics._equal_
                                                                    _)
                                                                    (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                    vb))) \/
                                                             Is_true (
                                                               (((basics._equal_
                                                                   _)
                                                                  (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                  vc))))).
        (* For step <3>2. *)
        Parameter __D_1_2_2_LEMMA :
          (~Is_true (((_p_V_consistency_rule vb vc)))) -> ((Is_true (
                                                              (((basics._equal_
                                                                  _)
                                                                 (abst_value
                                                                   (abst_voter
                                                                    va vb vc))
                                                                 va))) \/
                                                              Is_true (
                                                                (((basics._equal_
                                                                    _)
                                                                   (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                   vb))) \/
                                                                Is_true (
                                                                  (((basics._equal_
                                                                    _)
                                                                    (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                    vc))) \/
                                                                  (~Is_true (
                                                                    ((_p_P_valid
                                                                    (abst_diag
                                                                    (abst_voter
                                                                    va vb vc)))))))).
        (* Theorem's body. *)
        Theorem for_zenon___D_1_2_LEMMA :
        (Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc)) va))) \/
           Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                       vb))) \/
             Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                         vc))) \/
               (~Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))))).
%%end-auto-proof
0
db0d30cadab5da5ceed3655230110bdc
proof
1146
Theorem for_zenon___D_1_2_LEMMA:((Is_true (basics._equal_ _ (abst_value
(abst_voter va vb vc)) va))\/((Is_true (basics._equal_ _ (abst_value (
abst_voter va vb vc)) vb))\/((Is_true (basics._equal_ _ (abst_value (
abst_voter va vb vc)) vc))\/(~(Is_true (_p_P_valid (abst_diag (
abst_voter va vb vc)))))))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notor _ _ (fun zenon_H9 zenon_H15=>(
zenon_notor _ _ (fun zenon_H6 zenon_H14=>(zenon_notor _ _ (fun zenon_H4
zenon_H13=>(zenon_H13 (fun zenon_Hb=>(zenon_imply _ _ (fun zenon_H11=>(
zenon_imply _ _ (fun zenon_H12=>(zenon_H12 (fun zenon_H10=>(zenon_H11
zenon_H10)))) (fun zenon_Hf=>(zenon_or _ _ (fun zenon_H8=>(zenon_H9
zenon_H8)) (fun zenon_He=>(zenon_or _ _ (fun zenon_H5=>(zenon_H6
zenon_H5)) (fun zenon_Hd=>(zenon_or _ _ (fun zenon_H3=>(zenon_H4
zenon_H3)) (fun zenon_Hc=>(zenon_Hc zenon_Hb)) zenon_Hd)) zenon_He))
zenon_Hf)) __D_1_2_2_LEMMA)) (fun zenon_Ha=>(zenon_or _ _ (fun
zenon_H8=>(zenon_H9 zenon_H8)) (fun zenon_H7=>(zenon_or _ _ (fun
zenon_H5=>(zenon_H6 zenon_H5)) (fun zenon_H3=>(zenon_H4 zenon_H3))
zenon_H7)) zenon_Ha)) __D_1_2_1_LEMMA)))) zenon_H14)) zenon_H15))
zenon_G)))).
Qed.

0
e9b9bc28d85ac949ec0bc0ca14df25f2
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
4416

%%begin-auto-proof
%%name: for_zenon___D_1_LEMMA
      
      
      
      (* Methods to use for automated proof. *)
      (* For step <2>1. *)
      Parameter __D_1_1_LEMMA :
        (Is_true ((_p_V_consistency_rule va vb))) -> ((Is_true ((((basics._equal_
                                                                    _)
                                                                   (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                   va))) \/
                                                         Is_true ((((basics._equal_
                                                                    _)
                                                                    (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                    vb))) \/
                                                           Is_true ((((basics._equal_
                                                                    _)
                                                                    (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                    vc))) \/
                                                             (~Is_true (
                                                                 ((_p_P_valid
                                                                    (abst_diag
                                                                    (abst_voter
                                                                    va vb vc)))))))).
      (* For step <2>2. *)
      Parameter __D_1_2_LEMMA :
        (~Is_true (((_p_V_consistency_rule va vb)))) -> ((Is_true ((((basics._equal_
                                                                    _)
                                                                    (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                    va))) \/
                                                            Is_true (
                                                              (((basics._equal_
                                                                  _)
                                                                 (abst_value
                                                                   (abst_voter
                                                                    va vb vc))
                                                                 vb))) \/
                                                              Is_true (
                                                                (((basics._equal_
                                                                    _)
                                                                   (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                   vc))) \/
                                                                (~Is_true (
                                                                    ((_p_P_valid
                                                                    (abst_diag
                                                                    (abst_voter
                                                                    va vb vc)))))))).
      (* Theorem's body. *)
      Theorem for_zenon___D_1_LEMMA :
      (Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc)) va))) \/
         Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc)) vb))) \/
           Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                       vc))) \/
             (~Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))))).
%%end-auto-proof
0
51fb7fa157438f4ec594a9d5972c7f90
proof
1217
Theorem for_zenon___D_1_LEMMA:((Is_true (basics._equal_ _ (abst_value (
abst_voter va vb vc)) va))\/((Is_true (basics._equal_ _ (abst_value (
abst_voter va vb vc)) vb))\/((Is_true (basics._equal_ _ (abst_value (
abst_voter va vb vc)) vc))\/(~(Is_true (_p_P_valid (abst_diag (
abst_voter va vb vc)))))))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notor _ _ (fun zenon_Hc zenon_H13=>(
zenon_notor _ _ (fun zenon_H9 zenon_H12=>(zenon_notor _ _ (fun zenon_H6
zenon_H11=>(zenon_H11 (fun zenon_H3=>(zenon_imply _ _ (fun zenon_Hf=>(
zenon_imply _ _ (fun zenon_H10=>(zenon_H10 (fun zenon_He=>(zenon_Hf
zenon_He)))) (fun zenon_Hd=>(zenon_or _ _ (fun zenon_Hb=>(zenon_Hc
zenon_Hb)) (fun zenon_Ha=>(zenon_or _ _ (fun zenon_H8=>(zenon_H9
zenon_H8)) (fun zenon_H7=>(zenon_or _ _ (fun zenon_H5=>(zenon_H6
zenon_H5)) (fun zenon_H4=>(zenon_H4 zenon_H3)) zenon_H7)) zenon_Ha))
zenon_Hd)) __D_1_2_LEMMA)) (fun zenon_Hd=>(zenon_or _ _ (fun zenon_Hb=>(
zenon_Hc zenon_Hb)) (fun zenon_Ha=>(zenon_or _ _ (fun zenon_H8=>(
zenon_H9 zenon_H8)) (fun zenon_H7=>(zenon_or _ _ (fun zenon_H5=>(
zenon_H6 zenon_H5)) (fun zenon_H4=>(zenon_H4 zenon_H3)) zenon_H7))
zenon_Ha)) zenon_Hd)) __D_1_1_LEMMA)))) zenon_H12)) zenon_H13)) zenon_G)
))).
Qed.

0
1369079f619b59192022365cbcb56b26
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1094

%%begin-auto-proof
%%name: for_zenon_voter_returns_an_input_value
    
    
    
    (* Methods to use for automated proof. *)
    (* For step <1>1. *)
    Parameter __D_1_LEMMA : forall va : _p_V_T, forall vb : _p_V_T,
      forall vc : _p_V_T,
      ((Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc)) va))) \/
          Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                      vb))) \/
            Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                        vc))) \/
              (~Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc)))))))).
    (* Theorem's body. *)
    Theorem for_zenon_voter_returns_an_input_value :
    forall v1  v2  v3 : _p_V_T,
      Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3)) v1))) \/
        Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3)) v2))) \/
          Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3))
                      v3))) \/
            (~Is_true (((_p_P_valid (abst_diag (abst_voter v1 v2 v3)))))).
%%end-auto-proof
0
f9341de251b02e0b66c458148c785251
proof
447
Theorem for_zenon_voter_returns_an_input_value:(forall va:_p_V_T,(
forall vb:_p_V_T,(forall vc:_p_V_T,((Is_true (basics._equal_ _ (
abst_value (abst_voter va vb vc)) va))\/((Is_true (basics._equal_ _ (
abst_value (abst_voter va vb vc)) vb))\/((Is_true (basics._equal_ _ (
abst_value (abst_voter va vb vc)) vc))\/(~(Is_true (_p_P_valid (
abst_diag (abst_voter va vb vc))))))))))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_G __D_1_LEMMA)))).
Qed.

0
81315e644dba73dc80594bb98587491a
err
0
d41d8cd98f00b204e9800998ecf8427e
end
