46
This is a proof cache file generated by zvtov.
35
zvtov version 0.6.0 [32] 2009-12-03
2097
zenon -x focal -q -short -max-time 5m -x induct
zenon version 0.8.0 [a263] 2014-10-21
$Id: 8d3e74063353abcfefb6c4de625febcd0a10705c $
$Id: 0bb7ad8565ca1ee59ff5edffa7ed2b2d882c4f93 $
$Id: 8e2e984e1f30ddc3be6823ddc9ccf8f6877e7be1 $
$Id: e9a1445bc3b916bc344e12b5e1465a20b7569e8a $
$Id: 3543f411fd78f652dbf8224d7fe56e5a2c83df42 $
$Id: c483db8583b833b9d90ee5c1b90af4da4befefcf $
$Id: e962f33dc5753e15a88c3aef2170d1c552a80be7 $
$Id: 239c76ade6485f65b50499d4af616ed6394f9892 $
$Id: 960020f638c3d1f11c58184ba83acf7a567f497e $
$Id: 0d2f93a609978187340ccdc540d8b4709e3e3626 $
$Id: 0bba51e302cc27e4dcf7dd8783da6e6517e1ca2e $
$Id: 123bd672b267fe3d464ae13f9c8b98e7475c12b6 $
$Id: c891513dc0a7214f92f52e8c6f59be0c3a6bdc75 $
$Id: d674fd7fb29144c5978cd8f2421c4147c86781c8 $
$Id: 75e59fa998ba43be0fae0fc16452e5c75f01a317 $
$Id: lexcoq.mll,v 1.16 2012-04-11 18:27:26 doligez Exp $
$Id: parsecoq.mly,v 1.34 2012-04-11 18:27:26 doligez Exp $
$Id: lextptp.mll,v 1.7 2012-04-24 17:32:04 doligez Exp $
$Id: parsetptp.mly,v 1.9 2012-04-24 17:32:04 doligez Exp $
$Id: lexzen.mll,v 1.13 2012-04-11 18:27:26 doligez Exp $
$Id: parsezen.mly,v 1.16 2012-04-11 18:27:26 doligez Exp $
$Id: feacf069839a8c95e03ad2e3dbb03601a3a6607d $
$Id: 200c027cd2683053eb227e68a492c4961e2a5784 $
$Id: 9f00cd3d0af0bdd28d17b64ab051f9594255e67e $
$Id: 52308a30d82a014cf1f8efa2799df8b300a0c678 $
$Id: caed5ca44e929aef76195d58649e867d28c61885 $
$Id: 8bef787c38724f2923554c6d72f7b8d9c6f4ab2b $
$Id: 799ea945a49520c4ac8520bb6c232fbe8b53bed8 $
$Id: 8cdb504db763cd885675be46e2a542d5ec676e25 $
$Id: f21acd58472bbe06f2040f6b4df14b9bcece4be1 $
$Id: 71c3ed8bb8ff5d2866be86682d871a07f130b74f $
$Id: 4da3a63d30c663a2457badcc920df654f154b47b $
$Id: d0534a6a0c9a349b8289a70cb8f84297d3678ef6 $
$Id: f64f126ba41a6797d6643ecfd2290bdc3bcd7c08 $
$Id: 03e455e19c9d3e35e5edbd6eee048f53fb55908f $
$Id: af6004ec6e3900adb00b13aa1e67da873f9dd706 $
$Id: 81e748142c40d6382b9ceac00a08d35207607f19 $
$Id: cd90a6b20441b688fbac060141ef245237cb7320 $
$Id: 7449d985db563f705bdded478f605f03b7111602 $
$Id: 34c58a3afac083cc607b116f4d95546502fbd4b7 $
source checksum: 20927 1

term

begin
626

%%begin-auto-proof
%%name: for_zenon_equal_reflexive
    
    
    
    (* Methods to use for automated proof. *)
    (* For toplevel definition used via "by property of basics#beq_refl". *)
    Parameter basics.beq_refl :
      forall __var_a : Set, forall x : __var_a,
        Is_true (((basics._equal_ _) x x)).
    (* For method of Self used via "by definition of !equal". *)
    Definition abst_equal (x : abst_T) (y : abst_T) : basics.bool__t :=
      ((basics.syntactic_equal _) x y).
    (* Theorem's body. *)
    Theorem for_zenon_equal_reflexive :
    forall x : abst_T, Is_true ((abst_equal x x)).
%%end-auto-proof
0
5b44513c9f3fc59b28afc3c8a8167ee2
proof
474
Theorem for_zenon_equal_reflexive:(forall x:abst_T,(Is_true (abst_equal
x x))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notallex (fun x:abst_T=>(Is_true (
abst_equal x x))) (fun zenon_H6=>(zenon_ex abst_T (fun x:abst_T=>(~(
Is_true (abst_equal x x)))) (fun(zenon_Tx_c:abst_T) zenon_H5=>(let
zenon_H4:=zenon_H5 in (coq_builtins.zenon_not_syntactic_equal _
zenon_Tx_c zenon_Tx_c (fun zenon_H3=>(zenon_noteq _ zenon_Tx_c zenon_H3)
) zenon_H4))) zenon_H6)) zenon_G)))).
Qed.

0
9025f08a3fbffe6096eeb74972acf560
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
716

%%begin-auto-proof
%%name: for_zenon_equal_symmetric
    
    
    
    (* Methods to use for automated proof. *)
    (* For toplevel definition used via "by property of basics#beq_symm". *)
    Parameter basics.beq_symm :
      forall __var_b : Set, forall x  y : __var_b,
        Is_true (((basics._equal_ _) x y)) ->
          Is_true (((basics._equal_ _) y x)).
    (* For method of Self used via "by definition of !equal". *)
    Definition abst_equal (x : abst_T) (y : abst_T) : basics.bool__t :=
      ((basics.syntactic_equal _) x y).
    (* Theorem's body. *)
    Theorem for_zenon_equal_symmetric :
    forall x  y : abst_T,
      Is_true ((abst_equal x y)) -> Is_true ((abst_equal y x)).
%%end-auto-proof
0
4b1b4b01ca39a1d24bbeb0c0a8c7c269
proof
1121
Theorem for_zenon_equal_symmetric:(forall x:abst_T,(forall y:abst_T,((
Is_true (abst_equal x y))->(Is_true (abst_equal y x))))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notallex (fun x:abst_T=>(forall y:abst_T,((
Is_true (abst_equal x y))->(Is_true (abst_equal y x))))) (fun zenon_Hd=>
(zenon_ex abst_T (fun x:abst_T=>(~(forall y:abst_T,((Is_true (
abst_equal x y))->(Is_true (abst_equal y x)))))) (fun(zenon_Tx_c:abst_T)
 zenon_Hc=>(zenon_notallex (fun y:abst_T=>((Is_true (abst_equal
zenon_Tx_c y))->(Is_true (abst_equal y zenon_Tx_c)))) (fun zenon_Hb=>(
zenon_ex abst_T (fun y:abst_T=>(~((Is_true (abst_equal zenon_Tx_c y))->(
Is_true (abst_equal y zenon_Tx_c))))) (fun(zenon_Ty_d:abst_T) zenon_Ha=>
(zenon_notimply _ _ (fun zenon_H9 zenon_H7=>(let zenon_H8:=zenon_H9 in (
coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ zenon_Tx_c
zenon_Ty_d (fun zenon_H4=>(let zenon_H6:=zenon_H7 in (
coq_builtins.zenon_not_syntactic_equal _ zenon_Ty_d zenon_Tx_c (fun
zenon_H5=>(zenon_eqsym _ zenon_Tx_c zenon_Ty_d zenon_H4 zenon_H5))
zenon_H6))) zenon_H8))) zenon_Ha)) zenon_Hb)) zenon_Hc)) zenon_Hd))
zenon_G)))).
Qed.

0
43c8c402e7686cd8e4048f5dffd5018d
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
814

%%begin-auto-proof
%%name: for_zenon_equal_transitive
    
    
    
    (* Methods to use for automated proof. *)
    (* For toplevel definition used via "by property of basics#beq_trans". *)
    Parameter basics.beq_trans :
      forall __var_c : Set, forall x  y  z : __var_c,
        Is_true (((basics._equal_ _) x y)) ->
          Is_true (((basics._equal_ _) y z)) ->
            Is_true (((basics._equal_ _) x z)).
    (* For method of Self used via "by definition of !equal". *)
    Definition abst_equal (x : abst_T) (y : abst_T) : basics.bool__t :=
      ((basics.syntactic_equal _) x y).
    (* Theorem's body. *)
    Theorem for_zenon_equal_transitive :
    forall x  y  z : abst_T,
      Is_true ((abst_equal x y)) ->
        Is_true ((abst_equal y z)) -> Is_true ((abst_equal x z)).
%%end-auto-proof
0
d3f40157bafb9dbe54b2bab30c1fc0ea
proof
2026
Theorem for_zenon_equal_transitive:(forall x:abst_T,(forall y:abst_T,(
forall z:abst_T,((Is_true (abst_equal x y))->((Is_true (abst_equal y z))
->(Is_true (abst_equal x z))))))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notallex (fun x:abst_T=>(forall y:abst_T,(
forall z:abst_T,((Is_true (abst_equal x y))->((Is_true (abst_equal y z))
->(Is_true (abst_equal x z))))))) (fun zenon_H15=>(zenon_ex abst_T (fun
x:abst_T=>(~(forall y:abst_T,(forall z:abst_T,((Is_true (abst_equal x y)
)->((Is_true (abst_equal y z))->(Is_true (abst_equal x z)))))))) (fun(
zenon_Tx_c:abst_T) zenon_H14=>(zenon_notallex (fun y:abst_T=>(forall z
:abst_T,((Is_true (abst_equal zenon_Tx_c y))->((Is_true (abst_equal y z)
)->(Is_true (abst_equal zenon_Tx_c z)))))) (fun zenon_H13=>(zenon_ex
abst_T (fun y:abst_T=>(~(forall z:abst_T,((Is_true (abst_equal
zenon_Tx_c y))->((Is_true (abst_equal y z))->(Is_true (abst_equal
zenon_Tx_c z))))))) (fun(zenon_Ty_d:abst_T) zenon_H12=>(zenon_notallex (
fun z:abst_T=>((Is_true (abst_equal zenon_Tx_c zenon_Ty_d))->((Is_true (
abst_equal zenon_Ty_d z))->(Is_true (abst_equal zenon_Tx_c z))))) (fun
zenon_H11=>(zenon_ex abst_T (fun z:abst_T=>(~((Is_true (abst_equal
zenon_Tx_c zenon_Ty_d))->((Is_true (abst_equal zenon_Ty_d z))->(Is_true
(abst_equal zenon_Tx_c z)))))) (fun(zenon_Tz_e:abst_T) zenon_H10=>(
zenon_notimply _ _ (fun zenon_He zenon_Hf=>(zenon_notimply _ _ (fun
zenon_Hc zenon_Ha=>(let zenon_Hd:=zenon_He in (
coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ zenon_Tx_c
zenon_Ty_d (fun zenon_H6=>(let zenon_Hb:=zenon_Hc in (
coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ zenon_Ty_d
zenon_Tz_e (fun zenon_H7=>(let zenon_H9:=zenon_Ha in (
coq_builtins.zenon_not_syntactic_equal _ zenon_Tx_c zenon_Tz_e (fun
zenon_H5=>(zenon_subst _ (fun zenon_Vf=>(zenon_Tx_c = zenon_Vf))
zenon_Ty_d zenon_Tz_e (fun zenon_H8=>(zenon_H8 zenon_H7)) zenon_H5
zenon_H6)) zenon_H9))) zenon_Hb))) zenon_Hd))) zenon_Hf)) zenon_H10))
zenon_H11)) zenon_H12)) zenon_H13)) zenon_H14)) zenon_H15)) zenon_G)))).
Qed.

0
8dff99d3702d5ab5798856d131038d3d
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
626

%%begin-auto-proof
%%name: for_zenon_equal_reflexive
    
    
    
    (* Methods to use for automated proof. *)
    (* For toplevel definition used via "by property of basics#beq_refl". *)
    Parameter basics.beq_refl :
      forall __var_a : Set, forall x : __var_a,
        Is_true (((basics._equal_ _) x x)).
    (* For method of Self used via "by definition of !equal". *)
    Definition abst_equal (x : abst_T) (y : abst_T) : basics.bool__t :=
      ((basics.syntactic_equal _) x y).
    (* Theorem's body. *)
    Theorem for_zenon_equal_reflexive :
    forall x : abst_T, Is_true ((abst_equal x x)).
%%end-auto-proof
0
5b44513c9f3fc59b28afc3c8a8167ee2
proof
474
Theorem for_zenon_equal_reflexive:(forall x:abst_T,(Is_true (abst_equal
x x))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notallex (fun x:abst_T=>(Is_true (
abst_equal x x))) (fun zenon_H6=>(zenon_ex abst_T (fun x:abst_T=>(~(
Is_true (abst_equal x x)))) (fun(zenon_Tx_c:abst_T) zenon_H5=>(let
zenon_H4:=zenon_H5 in (coq_builtins.zenon_not_syntactic_equal _
zenon_Tx_c zenon_Tx_c (fun zenon_H3=>(zenon_noteq _ zenon_Tx_c zenon_H3)
) zenon_H4))) zenon_H6)) zenon_G)))).
Qed.

0
9025f08a3fbffe6096eeb74972acf560
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
716

%%begin-auto-proof
%%name: for_zenon_equal_symmetric
    
    
    
    (* Methods to use for automated proof. *)
    (* For toplevel definition used via "by property of basics#beq_symm". *)
    Parameter basics.beq_symm :
      forall __var_b : Set, forall x  y : __var_b,
        Is_true (((basics._equal_ _) x y)) ->
          Is_true (((basics._equal_ _) y x)).
    (* For method of Self used via "by definition of !equal". *)
    Definition abst_equal (x : abst_T) (y : abst_T) : basics.bool__t :=
      ((basics.syntactic_equal _) x y).
    (* Theorem's body. *)
    Theorem for_zenon_equal_symmetric :
    forall x  y : abst_T,
      Is_true ((abst_equal x y)) -> Is_true ((abst_equal y x)).
%%end-auto-proof
0
4b1b4b01ca39a1d24bbeb0c0a8c7c269
proof
1121
Theorem for_zenon_equal_symmetric:(forall x:abst_T,(forall y:abst_T,((
Is_true (abst_equal x y))->(Is_true (abst_equal y x))))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notallex (fun x:abst_T=>(forall y:abst_T,((
Is_true (abst_equal x y))->(Is_true (abst_equal y x))))) (fun zenon_Hd=>
(zenon_ex abst_T (fun x:abst_T=>(~(forall y:abst_T,((Is_true (
abst_equal x y))->(Is_true (abst_equal y x)))))) (fun(zenon_Tx_c:abst_T)
 zenon_Hc=>(zenon_notallex (fun y:abst_T=>((Is_true (abst_equal
zenon_Tx_c y))->(Is_true (abst_equal y zenon_Tx_c)))) (fun zenon_Hb=>(
zenon_ex abst_T (fun y:abst_T=>(~((Is_true (abst_equal zenon_Tx_c y))->(
Is_true (abst_equal y zenon_Tx_c))))) (fun(zenon_Ty_d:abst_T) zenon_Ha=>
(zenon_notimply _ _ (fun zenon_H9 zenon_H7=>(let zenon_H8:=zenon_H9 in (
coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ zenon_Tx_c
zenon_Ty_d (fun zenon_H4=>(let zenon_H6:=zenon_H7 in (
coq_builtins.zenon_not_syntactic_equal _ zenon_Ty_d zenon_Tx_c (fun
zenon_H5=>(zenon_eqsym _ zenon_Tx_c zenon_Ty_d zenon_H4 zenon_H5))
zenon_H6))) zenon_H8))) zenon_Ha)) zenon_Hb)) zenon_Hc)) zenon_Hd))
zenon_G)))).
Qed.

0
43c8c402e7686cd8e4048f5dffd5018d
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
814

%%begin-auto-proof
%%name: for_zenon_equal_transitive
    
    
    
    (* Methods to use for automated proof. *)
    (* For toplevel definition used via "by property of basics#beq_trans". *)
    Parameter basics.beq_trans :
      forall __var_c : Set, forall x  y  z : __var_c,
        Is_true (((basics._equal_ _) x y)) ->
          Is_true (((basics._equal_ _) y z)) ->
            Is_true (((basics._equal_ _) x z)).
    (* For method of Self used via "by definition of !equal". *)
    Definition abst_equal (x : abst_T) (y : abst_T) : basics.bool__t :=
      ((basics.syntactic_equal _) x y).
    (* Theorem's body. *)
    Theorem for_zenon_equal_transitive :
    forall x  y  z : abst_T,
      Is_true ((abst_equal x y)) ->
        Is_true ((abst_equal y z)) -> Is_true ((abst_equal x z)).
%%end-auto-proof
0
d3f40157bafb9dbe54b2bab30c1fc0ea
proof
2026
Theorem for_zenon_equal_transitive:(forall x:abst_T,(forall y:abst_T,(
forall z:abst_T,((Is_true (abst_equal x y))->((Is_true (abst_equal y z))
->(Is_true (abst_equal x z))))))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notallex (fun x:abst_T=>(forall y:abst_T,(
forall z:abst_T,((Is_true (abst_equal x y))->((Is_true (abst_equal y z))
->(Is_true (abst_equal x z))))))) (fun zenon_H15=>(zenon_ex abst_T (fun
x:abst_T=>(~(forall y:abst_T,(forall z:abst_T,((Is_true (abst_equal x y)
)->((Is_true (abst_equal y z))->(Is_true (abst_equal x z)))))))) (fun(
zenon_Tx_c:abst_T) zenon_H14=>(zenon_notallex (fun y:abst_T=>(forall z
:abst_T,((Is_true (abst_equal zenon_Tx_c y))->((Is_true (abst_equal y z)
)->(Is_true (abst_equal zenon_Tx_c z)))))) (fun zenon_H13=>(zenon_ex
abst_T (fun y:abst_T=>(~(forall z:abst_T,((Is_true (abst_equal
zenon_Tx_c y))->((Is_true (abst_equal y z))->(Is_true (abst_equal
zenon_Tx_c z))))))) (fun(zenon_Ty_d:abst_T) zenon_H12=>(zenon_notallex (
fun z:abst_T=>((Is_true (abst_equal zenon_Tx_c zenon_Ty_d))->((Is_true (
abst_equal zenon_Ty_d z))->(Is_true (abst_equal zenon_Tx_c z))))) (fun
zenon_H11=>(zenon_ex abst_T (fun z:abst_T=>(~((Is_true (abst_equal
zenon_Tx_c zenon_Ty_d))->((Is_true (abst_equal zenon_Ty_d z))->(Is_true
(abst_equal zenon_Tx_c z)))))) (fun(zenon_Tz_e:abst_T) zenon_H10=>(
zenon_notimply _ _ (fun zenon_He zenon_Hf=>(zenon_notimply _ _ (fun
zenon_Hc zenon_Ha=>(let zenon_Hd:=zenon_He in (
coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ zenon_Tx_c
zenon_Ty_d (fun zenon_H6=>(let zenon_Hb:=zenon_Hc in (
coq_builtins.zenon_syntactic_equal zenon_focal_eqdec _ zenon_Ty_d
zenon_Tz_e (fun zenon_H7=>(let zenon_H9:=zenon_Ha in (
coq_builtins.zenon_not_syntactic_equal _ zenon_Tx_c zenon_Tz_e (fun
zenon_H5=>(zenon_subst _ (fun zenon_Vf=>(zenon_Tx_c = zenon_Vf))
zenon_Ty_d zenon_Tz_e (fun zenon_H8=>(zenon_H8 zenon_H7)) zenon_H5
zenon_H6)) zenon_H9))) zenon_Hb))) zenon_Hd))) zenon_Hf)) zenon_H10))
zenon_H11)) zenon_H12)) zenon_H13)) zenon_H14)) zenon_H15)) zenon_G)))).
Qed.

0
8dff99d3702d5ab5798856d131038d3d
err
0
d41d8cd98f00b204e9800998ecf8427e
end
