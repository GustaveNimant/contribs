(* Coq >= 8.3pl2: disable automatic introduction of hypotheses. *)
Global Unset Automatic Introduction.
(* Coq >= 8.5: allow sum constructors without explicit types in patterns. *)
Global Set Asymmetric Patterns.
Require Export Bool.
Require Export ZArith.
Open Scope Z_scope.
Require Export Reals.
Require Export Ascii.
Require Export String.
Require Export List.
Require Import Wellfounded.
Require Export Recdef.
Require Export coq_builtins.
Require Import Relations.
Require Import Zwf.

(* Below: to prevent Function to apply heuristics that would
the expected aim in recursive functions termination proofs. *)

Set Function_raw_tcc.

Require basics.
Require sets.
Require orders.
Require gen_value.
Require etat_vote.
Require num_capteur.
Require diag.
Require pair.
Require gen_vote.
Module Voteur.
  Definition sensor (_p_C_T : Set) (_p_P_T : Set) (_p_P_prj_a :
    _p_P_T -> _p_C_T) (diag : _p_P_T) : _p_C_T := (_p_P_prj_a diag).
  Definition state (_p_E_T : Set) (_p_P_T : Set) (_p_P_prj_b :
    _p_P_T -> _p_E_T) (diag : _p_P_T) : _p_E_T := (_p_P_prj_b diag).
  
  (* From species vote#Voteur. *)
  (* Section for proof of theorem 't1'. *)
  Section Proof_of_t1.
    Variable _p_E_T : Set.
    Variable _p_V_T : Set.
    Variable _p_P_T : Set.
    Variable _p_E_equal : _p_E_T -> _p_E_T -> basics.bool__t.
    Variable _p_E_no_match : _p_E_T.
    Variable _p_E_partial_match : _p_E_T.
    Variable _p_E_perfect_match : _p_E_T.
    Variable _p_E_range_match : _p_E_T.
    Variable _p_E_all_value :
      forall e : _p_E_T,
        (Is_true ((_p_E_equal e _p_E_no_match)) \/
           Is_true ((_p_E_equal e _p_E_range_match)) \/
             Is_true ((_p_E_equal e _p_E_partial_match)) \/
               Is_true ((_p_E_equal e _p_E_perfect_match))).
    Variable abst_diag : (Datatypes.prod _p_V_T _p_P_T) -> _p_P_T.
    Variable abst_state : _p_P_T -> _p_E_T.
    Variable abst_voter : _p_V_T ->
                            _p_V_T ->
                              _p_V_T -> (Datatypes.prod _p_V_T _p_P_T).
    %%begin-auto-proof
    %%location: [File "vote.fcl", line 139, characters 10-34]
    %%name: for_zenon_t1
    
    
    
    (* Methods to use for automated proof. *)
    (* For species parameter method used via "by property vote#E!all_value". *)
    Parameter _p_E_all_value :
      forall e : _p_E_T,
        (Is_true ((_p_E_equal e _p_E_no_match)) \/
           Is_true ((_p_E_equal e _p_E_range_match)) \/
             Is_true ((_p_E_equal e _p_E_partial_match)) \/
               Is_true ((_p_E_equal e _p_E_perfect_match))).
    (* Theorem's body. *)
    Theorem for_zenon_t1 :
    forall v1  v2  v3 : _p_V_T,
      Is_true ((_p_E_equal (abst_state (abst_diag (abst_voter v1 v2 v3)))
                 _p_E_no_match)) \/
        Is_true ((_p_E_equal (abst_state (abst_diag (abst_voter v1 v2 v3)))
                   _p_E_range_match)) \/
          Is_true ((_p_E_equal (abst_state (abst_diag (abst_voter v1 v2 v3)))
                     _p_E_partial_match)) \/
            Is_true ((_p_E_equal
                       (abst_state (abst_diag (abst_voter v1 v2 v3)))
                       _p_E_perfect_match)).
    %%end-auto-proof
    (* Dummy theorem to enforce Coq abstractions. *)
    Theorem for_zenon_abstracted_t1 :
      forall v1  v2  v3 : _p_V_T,
        Is_true ((_p_E_equal (abst_state (abst_diag (abst_voter v1 v2 v3)))
                   _p_E_no_match)) \/
          Is_true ((_p_E_equal (abst_state (abst_diag (abst_voter v1 v2 v3)))
                     _p_E_range_match)) \/
            Is_true ((_p_E_equal
                       (abst_state (abst_diag (abst_voter v1 v2 v3)))
                       _p_E_partial_match)) \/
              Is_true ((_p_E_equal
                         (abst_state (abst_diag (abst_voter v1 v2 v3)))
                         _p_E_perfect_match)).
    assert (__force_use_p_E_T := _p_E_T).
    assert (__force_use_p_V_T := _p_V_T).
    assert (__force_use_p_P_T := _p_P_T).
    assert (__force_use__p_E_equal := _p_E_equal).
    assert (__force_use__p_E_no_match := _p_E_no_match).
    assert (__force_use__p_E_partial_match := _p_E_partial_match).
    assert (__force_use__p_E_perfect_match := _p_E_perfect_match).
    assert (__force_use__p_E_range_match := _p_E_range_match).
    assert (__force_use__p_E_all_value := _p_E_all_value).
    assert (__force_use_abst_diag := abst_diag).
    assert (__force_use_abst_state := abst_state).
    assert (__force_use_abst_voter := abst_voter).
    apply for_zenon_t1;
    auto.
    Qed.
    End Proof_of_t1.
  
  Theorem t1  (_p_E_T : Set) (_p_V_T : Set) (_p_P_T : Set) (_p_E_equal :
    _p_E_T -> _p_E_T -> basics.bool__t) (_p_E_no_match : _p_E_T)
    (_p_E_partial_match : _p_E_T) (_p_E_perfect_match : _p_E_T)
    (_p_E_range_match : _p_E_T) (_p_E_all_value :
    forall e : _p_E_T,
      (Is_true ((_p_E_equal e _p_E_no_match)) \/
         Is_true ((_p_E_equal e _p_E_range_match)) \/
           Is_true ((_p_E_equal e _p_E_partial_match)) \/
             Is_true ((_p_E_equal e _p_E_perfect_match))))
    (abst_diag : (Datatypes.prod _p_V_T _p_P_T) -> _p_P_T)
    (abst_state : _p_P_T -> _p_E_T)
    (abst_voter : _p_V_T ->
                    _p_V_T -> _p_V_T -> (Datatypes.prod _p_V_T _p_P_T)):
    forall v1  v2  v3 : _p_V_T,
      Is_true ((_p_E_equal (abst_state (abst_diag (abst_voter v1 v2 v3)))
                 _p_E_no_match)) \/
        Is_true ((_p_E_equal (abst_state (abst_diag (abst_voter v1 v2 v3)))
                   _p_E_range_match)) \/
          Is_true ((_p_E_equal (abst_state (abst_diag (abst_voter v1 v2 v3)))
                     _p_E_partial_match)) \/
            Is_true ((_p_E_equal
                       (abst_state (abst_diag (abst_voter v1 v2 v3)))
                       _p_E_perfect_match)).
  apply for_zenon_abstracted_t1;
  auto.
  Qed.
  
  (* From species vote#Voteur. *)
  (* Section for proof of theorem 't2'. *)
  Section Proof_of_t2.
    Variable _p_C_T : Set.
    Variable _p_V_T : Set.
    Variable _p_P_T : Set.
    Variable _p_C_capt_1 : _p_C_T.
    Variable _p_C_capt_2 : _p_C_T.
    Variable _p_C_capt_3 : _p_C_T.
    Variable _p_C_equal : _p_C_T -> _p_C_T -> basics.bool__t.
    Variable _p_C_all_value :
      forall e : _p_C_T,
        Is_true ((_p_C_equal e _p_C_capt_1)) \/
          Is_true ((_p_C_equal e _p_C_capt_2)) \/
            Is_true ((_p_C_equal e _p_C_capt_3)).
    Variable abst_diag : (Datatypes.prod _p_V_T _p_P_T) -> _p_P_T.
    Variable abst_sensor : _p_P_T -> _p_C_T.
    Variable abst_voter : _p_V_T ->
                            _p_V_T ->
                              _p_V_T -> (Datatypes.prod _p_V_T _p_P_T).
    %%begin-auto-proof
    %%location: [File "vote.fcl", line 146, characters 10-33]
    %%name: for_zenon_t2
    
    
    
    (* Methods to use for automated proof. *)
    (* For species parameter method used via "by property vote#C!all_value". *)
    Parameter _p_C_all_value :
      forall e : _p_C_T,
        Is_true ((_p_C_equal e _p_C_capt_1)) \/
          Is_true ((_p_C_equal e _p_C_capt_2)) \/
            Is_true ((_p_C_equal e _p_C_capt_3)).
    (* Theorem's body. *)
    Theorem for_zenon_t2 :
    forall v1  v2  v3 : _p_V_T,
      Is_true ((_p_C_equal (abst_sensor (abst_diag (abst_voter v1 v2 v3)))
                 _p_C_capt_1)) \/
        Is_true ((_p_C_equal (abst_sensor (abst_diag (abst_voter v1 v2 v3)))
                   _p_C_capt_2)) \/
          Is_true ((_p_C_equal
                     (abst_sensor (abst_diag (abst_voter v1 v2 v3)))
                     _p_C_capt_3)).
    %%end-auto-proof
    (* Dummy theorem to enforce Coq abstractions. *)
    Theorem for_zenon_abstracted_t2 :
      forall v1  v2  v3 : _p_V_T,
        Is_true ((_p_C_equal (abst_sensor (abst_diag (abst_voter v1 v2 v3)))
                   _p_C_capt_1)) \/
          Is_true ((_p_C_equal
                     (abst_sensor (abst_diag (abst_voter v1 v2 v3)))
                     _p_C_capt_2)) \/
            Is_true ((_p_C_equal
                       (abst_sensor (abst_diag (abst_voter v1 v2 v3)))
                       _p_C_capt_3)).
    assert (__force_use_p_C_T := _p_C_T).
    assert (__force_use_p_V_T := _p_V_T).
    assert (__force_use_p_P_T := _p_P_T).
    assert (__force_use__p_C_capt_1 := _p_C_capt_1).
    assert (__force_use__p_C_capt_2 := _p_C_capt_2).
    assert (__force_use__p_C_capt_3 := _p_C_capt_3).
    assert (__force_use__p_C_equal := _p_C_equal).
    assert (__force_use__p_C_all_value := _p_C_all_value).
    assert (__force_use_abst_diag := abst_diag).
    assert (__force_use_abst_sensor := abst_sensor).
    assert (__force_use_abst_voter := abst_voter).
    apply for_zenon_t2;
    auto.
    Qed.
    End Proof_of_t2.
  
  Theorem t2  (_p_C_T : Set) (_p_V_T : Set) (_p_P_T : Set) (_p_C_capt_1 :
    _p_C_T) (_p_C_capt_2 : _p_C_T) (_p_C_capt_3 : _p_C_T) (_p_C_equal :
    _p_C_T -> _p_C_T -> basics.bool__t) (_p_C_all_value :
    forall e : _p_C_T,
      Is_true ((_p_C_equal e _p_C_capt_1)) \/
        Is_true ((_p_C_equal e _p_C_capt_2)) \/
          Is_true ((_p_C_equal e _p_C_capt_3)))
    (abst_diag : (Datatypes.prod _p_V_T _p_P_T) -> _p_P_T)
    (abst_sensor : _p_P_T -> _p_C_T)
    (abst_voter : _p_V_T ->
                    _p_V_T -> _p_V_T -> (Datatypes.prod _p_V_T _p_P_T)):
    forall v1  v2  v3 : _p_V_T,
      Is_true ((_p_C_equal (abst_sensor (abst_diag (abst_voter v1 v2 v3)))
                 _p_C_capt_1)) \/
        Is_true ((_p_C_equal (abst_sensor (abst_diag (abst_voter v1 v2 v3)))
                   _p_C_capt_2)) \/
          Is_true ((_p_C_equal
                     (abst_sensor (abst_diag (abst_voter v1 v2 v3)))
                     _p_C_capt_3)).
  apply for_zenon_abstracted_t2;
  auto.
  Qed.
  
  (* From species vote#Voteur. *)
  (* Section for proof of theorem 'voter_independant_from_order_v1_v2'. *)
  Section Proof_of_voter_independant_from_order_v1_v2.
    Variable _p_E_T : Set.
    Variable _p_C_T : Set.
    Variable _p_V_T : Set.
    Variable _p_P_T : Set.
    Variable _p_E_equal : _p_E_T -> _p_E_T -> basics.bool__t.
    Variable _p_E_no_match : _p_E_T.
    Variable _p_E_partial_match : _p_E_T.
    Variable _p_E_perfect_match : _p_E_T.
    Variable _p_E_range_match : _p_E_T.
    Variable _p_C_capt_1 : _p_C_T.
    Variable _p_C_capt_2 : _p_C_T.
    Variable _p_C_capt_3 : _p_C_T.
    Variable _p_V_consistency_rule : _p_V_T -> _p_V_T -> basics.bool__t.
    Variable _p_V_consistency_rule_reflexive :
      forall a : _p_V_T, Is_true ((_p_V_consistency_rule a a)).
    Variable _p_V_consistency_rule_symmetric :
      forall a  b : _p_V_T,
        Is_true ((_p_V_consistency_rule a b)) ->
          Is_true ((_p_V_consistency_rule b a)).
    Variable _p_P_constr : _p_C_T -> _p_E_T -> _p_P_T.
    Variable _p_P_prj_b : _p_P_T -> _p_E_T.
    Variable _p_P_valid : _p_P_T -> basics.bool__t.
    Variable _p_P_prj_b_is_snd_of_pair :
      forall n1 : _p_C_T,
        forall n2 : _p_E_T,
          Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
    Variable _p_P_no_match_is_invalid :
      forall x : _p_P_T,
        Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_no_match)) ->
          ~Is_true (((_p_P_valid x))).
    Variable _p_P_partial_match_is_valid :
      forall x : _p_P_T,
        Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_partial_match)) ->
          Is_true ((_p_P_valid x)).
    Variable _p_P_perfect_match_is_valid :
      forall x : _p_P_T,
        Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_perfect_match)) ->
          Is_true ((_p_P_valid x)).
    Variable _p_P_range_match_is_valid :
      forall x : _p_P_T,
        Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_range_match)) ->
          Is_true ((_p_P_valid x)).
    Hypothesis abst_consistency_rule_is_symmetric :
      forall v1  v2 : _p_V_T,
        Is_true ((_p_V_consistency_rule v1 v2)) ->
          Is_true ((_p_V_consistency_rule v2 v1)).
    Variable abst_diag : (Datatypes.prod _p_V_T _p_P_T) -> _p_P_T.
    Variable abst_value : (Datatypes.prod _p_V_T _p_P_T) -> _p_V_T.
    Variable abst_voter : _p_V_T ->
                            _p_V_T ->
                              _p_V_T -> (Datatypes.prod _p_V_T _p_P_T).
    Let abst_compatible := gen_vote.Gen_voter.compatible _p_V_T _p_P_T
    _p_V_consistency_rule _p_P_valid abst_diag
    abst_value.
    Hypothesis abst_vote_match_c1 :
      forall v1  v2  v3 : _p_V_T,
        (~Is_true ((_p_V_consistency_rule v1 v2)) /\
           ~Is_true ((_p_V_consistency_rule v1 v3)) /\
             Is_true ((_p_V_consistency_rule v2 v3))) ->
          (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3))
                       v2))) /\
             Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                         (_p_P_constr _p_C_capt_1 _p_E_range_match))))).
    Hypothesis abst_vote_match_c2 :
      forall v1  v2  v3 : _p_V_T,
        (~Is_true ((_p_V_consistency_rule v1 v2)) /\
           Is_true ((_p_V_consistency_rule v1 v3)) /\
             ~Is_true ((_p_V_consistency_rule v2 v3))) ->
          (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3))
                       v3))) /\
             Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                         (_p_P_constr _p_C_capt_2 _p_E_range_match))))).
    Hypothesis abst_vote_match_c3 :
      forall v1  v2  v3 : _p_V_T,
        (Is_true ((_p_V_consistency_rule v1 v2)) /\
           ~Is_true ((_p_V_consistency_rule v1 v3)) /\
             ~Is_true ((_p_V_consistency_rule v2 v3))) ->
          (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3))
                       v1))) /\
             Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                         (_p_P_constr _p_C_capt_3 _p_E_range_match))))).
    Hypothesis abst_vote_no_match :
      forall v1  v2  v3 : _p_V_T,
        (~Is_true ((_p_V_consistency_rule v1 v2)) /\
           ~Is_true ((_p_V_consistency_rule v1 v3)) /\
             ~Is_true ((_p_V_consistency_rule v2 v3))) ->
          Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                      (_p_P_constr _p_C_capt_1 _p_E_no_match)))).
    Hypothesis abst_vote_partial_c1 :
      forall v1  v2  v3 : _p_V_T,
        (Is_true ((_p_V_consistency_rule v1 v2)) /\
           Is_true ((_p_V_consistency_rule v1 v3)) /\
             ~Is_true ((_p_V_consistency_rule v2 v3))) ->
          (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3))
                       v1))) /\
             Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                         (_p_P_constr _p_C_capt_1 _p_E_partial_match))))).
    Hypothesis abst_vote_partial_c2 :
      forall v1  v2  v3 : _p_V_T,
        (Is_true ((_p_V_consistency_rule v1 v2)) /\
           ~Is_true ((_p_V_consistency_rule v1 v3)) /\
             Is_true ((_p_V_consistency_rule v2 v3))) ->
          (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3))
                       v2))) /\
             Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                         (_p_P_constr _p_C_capt_2 _p_E_partial_match))))).
    Hypothesis abst_vote_partial_c3 :
      forall v1  v2  v3 : _p_V_T,
        (~Is_true ((_p_V_consistency_rule v1 v2)) /\
           Is_true ((_p_V_consistency_rule v1 v3)) /\
             Is_true ((_p_V_consistency_rule v2 v3))) ->
          (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3))
                       v3))) /\
             Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                         (_p_P_constr _p_C_capt_3 _p_E_partial_match))))).
    Hypothesis abst_vote_perfect :
      forall v1  v2  v3 : _p_V_T,
        (Is_true ((_p_V_consistency_rule v1 v2)) /\
           Is_true ((_p_V_consistency_rule v2 v3)) /\
             Is_true ((_p_V_consistency_rule v1 v3))) ->
          (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3))
                       v1))) /\
             Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                         (_p_P_constr _p_C_capt_1 _p_E_perfect_match))))).
    Section __C_1.
      Variable va : _p_V_T.
      Variable vb : _p_V_T.
      Variable vc : _p_V_T.
      Section __C_1_1.
        Variable H1 : Is_true ((_p_V_consistency_rule va vb)).
        Section __C_1_1_1.
          Variable H11 : Is_true ((_p_V_consistency_rule va vc)).
          Section __C_1_1_1_1.
            Variable H111 : Is_true ((_p_V_consistency_rule vb vc)).
            Section __C_1_1_1_1_1.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 299, character 10, line 300, character 34]
              %%name: for_zenon___C_1_1_1_1_1_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H11". *)
              Parameter H11 : Is_true ((_p_V_consistency_rule va vc)).
              (* For hypothesis "H111". *)
              Parameter H111 : Is_true ((_p_V_consistency_rule vb vc)).
              (* For method of Self used via "by property !vote_perfect". *)
              Parameter abst_vote_perfect :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v2 v3)) /\
                       Is_true ((_p_V_consistency_rule v1 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1
                                     _p_E_perfect_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_1_1_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter va vb vc)) va))).
              %%end-auto-proof
              Theorem __C_1_1_1_1_1_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_value (abst_voter va vb vc)) va))).
              assert (__force_use_H111 := H111).
              assert (__force_use_H11 := H11).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_1_1_1_LEMMA;
              auto.
              Qed.
              End __C_1_1_1_1_1.
            Section __C_1_1_1_1_2.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 302, character 10, line 303, character 65]
              %%name: for_zenon___C_1_1_1_1_2_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H11". *)
              Parameter H11 : Is_true ((_p_V_consistency_rule va vc)).
              (* For hypothesis "H111". *)
              Parameter H111 : Is_true ((_p_V_consistency_rule vb vc)).
              (* For method of Self used via "by property !vote_perfect". *)
              Parameter abst_vote_perfect :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v2 v3)) /\
                       Is_true ((_p_V_consistency_rule v1 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1
                                     _p_E_perfect_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_1_2_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter vb va vc)) vb))).
              %%end-auto-proof
              Theorem __C_1_1_1_1_2_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_value (abst_voter vb va vc)) vb))).
              assert (__force_use_H111 := H111).
              assert (__force_use_H11 := H11).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_1_1_2_LEMMA;
              auto.
              Qed.
              End __C_1_1_1_1_2.
            Section __C_1_1_1_1_3.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 305, character 10, line 306, character 65]
              %%name: for_zenon___C_1_1_1_1_3_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H11". *)
              Parameter H11 : Is_true ((_p_V_consistency_rule va vc)).
              (* For hypothesis "H111". *)
              Parameter H111 : Is_true ((_p_V_consistency_rule vb vc)).
              (* For method of Self used via "by property !vote_perfect". *)
              Parameter abst_vote_perfect :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v2 v3)) /\
                       Is_true ((_p_V_consistency_rule v1 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1
                                     _p_E_perfect_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_1_3_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter vc va vb)) vc))).
              %%end-auto-proof
              Theorem __C_1_1_1_1_3_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_value (abst_voter vc va vb)) vc))).
              assert (__force_use_H111 := H111).
              assert (__force_use_H11 := H11).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_1_1_3_LEMMA;
              auto.
              Qed.
              End __C_1_1_1_1_3.
            Section __C_1_1_1_1_4.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 310, characters 10-59]
              %%name: for_zenon___C_1_1_1_1_4_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H11". *)
              Parameter H11 : Is_true ((_p_V_consistency_rule va vc)).
              (* For hypothesis "H111". *)
              Parameter H111 : Is_true ((_p_V_consistency_rule vb vc)).
              (* For method of Self used via "by property !vote_perfect". *)
              Parameter abst_vote_perfect :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v2 v3)) /\
                       Is_true ((_p_V_consistency_rule v1 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1
                                     _p_E_perfect_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_1_4_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter va vb vc))
                          (_p_P_constr _p_C_capt_1 _p_E_perfect_match)))).
              %%end-auto-proof
              Theorem __C_1_1_1_1_4_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_diag (abst_voter va vb vc))
                            (_p_P_constr _p_C_capt_1 _p_E_perfect_match)))).
              assert (__force_use_H111 := H111).
              assert (__force_use_H11 := H11).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_1_1_4_LEMMA;
              auto.
              Qed.
              End __C_1_1_1_1_4.
            Section __C_1_1_1_1_5.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 312, characters 10-80]
              %%name: for_zenon___C_1_1_1_1_5_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>4. *)
              Parameter __C_1_1_1_1_4_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter va vb vc))
                             (_p_P_constr _p_C_capt_1 _p_E_perfect_match))))).
              (* For species parameter method used via "by property vote#P!perfect_match_is_valid". *)
              Parameter _p_P_perfect_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_perfect_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_1_5_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))).
              %%end-auto-proof
              Theorem __C_1_1_1_1_5_LEMMA :
                Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))).
              assert (__force_use_H111 := H111).
              assert (__force_use_H11 := H11).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_1_1_5_LEMMA;
              auto.
              Qed.
              End __C_1_1_1_1_5.
            Section __C_1_1_1_1_6.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 316, character 10, line 317, character 62]
              %%name: for_zenon___C_1_1_1_1_6_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H11". *)
              Parameter H11 : Is_true ((_p_V_consistency_rule va vc)).
              (* For hypothesis "H111". *)
              Parameter H111 : Is_true ((_p_V_consistency_rule vb vc)).
              (* For method of Self used via "by property !vote_perfect". *)
              Parameter abst_vote_perfect :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v2 v3)) /\
                       Is_true ((_p_V_consistency_rule v1 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1
                                     _p_E_perfect_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_1_6_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vb va vc))
                          (_p_P_constr _p_C_capt_1 _p_E_perfect_match)))).
              %%end-auto-proof
              Theorem __C_1_1_1_1_6_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_diag (abst_voter vb va vc))
                            (_p_P_constr _p_C_capt_1 _p_E_perfect_match)))).
              assert (__force_use_H111 := H111).
              assert (__force_use_H11 := H11).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_1_1_6_LEMMA;
              auto.
              Qed.
              End __C_1_1_1_1_6.
            Section __C_1_1_1_1_7.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 319, characters 10-80]
              %%name: for_zenon___C_1_1_1_1_7_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>6. *)
              Parameter __C_1_1_1_1_6_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vb va vc))
                             (_p_P_constr _p_C_capt_1 _p_E_perfect_match))))).
              (* For species parameter method used via "by property vote#P!perfect_match_is_valid". *)
              Parameter _p_P_perfect_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_perfect_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_1_7_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc))))).
              %%end-auto-proof
              Theorem __C_1_1_1_1_7_LEMMA :
                Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc))))).
              assert (__force_use_H111 := H111).
              assert (__force_use_H11 := H11).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_1_1_7_LEMMA;
              auto.
              Qed.
              End __C_1_1_1_1_7.
            Section __C_1_1_1_1_8.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 323, character 10, line 324, character 62]
              %%name: for_zenon___C_1_1_1_1_8_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H11". *)
              Parameter H11 : Is_true ((_p_V_consistency_rule va vc)).
              (* For hypothesis "H111". *)
              Parameter H111 : Is_true ((_p_V_consistency_rule vb vc)).
              (* For method of Self used via "by property !vote_perfect". *)
              Parameter abst_vote_perfect :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v2 v3)) /\
                       Is_true ((_p_V_consistency_rule v1 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1
                                     _p_E_perfect_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_1_8_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vc va vb))
                          (_p_P_constr _p_C_capt_1 _p_E_perfect_match)))).
              %%end-auto-proof
              Theorem __C_1_1_1_1_8_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_diag (abst_voter vc va vb))
                            (_p_P_constr _p_C_capt_1 _p_E_perfect_match)))).
              assert (__force_use_H111 := H111).
              assert (__force_use_H11 := H11).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_1_1_8_LEMMA;
              auto.
              Qed.
              End __C_1_1_1_1_8.
            Section __C_1_1_1_1_9.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 326, characters 10-80]
              %%name: for_zenon___C_1_1_1_1_9_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>8. *)
              Parameter __C_1_1_1_1_8_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vc va vb))
                             (_p_P_constr _p_C_capt_1 _p_E_perfect_match))))).
              (* For species parameter method used via "by property vote#P!perfect_match_is_valid". *)
              Parameter _p_P_perfect_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_perfect_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_1_9_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb))))).
              %%end-auto-proof
              Theorem __C_1_1_1_1_9_LEMMA :
                Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb))))).
              assert (__force_use_H111 := H111).
              assert (__force_use_H11 := H11).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_1_1_9_LEMMA;
              auto.
              Qed.
              End __C_1_1_1_1_9.
            %%begin-auto-proof
            %%location: [File "vote.fcl", line 329, character 14, line 331, character 35]
            %%name: for_zenon___C_1_1_1_1_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For step <5>1. *)
            Parameter __C_1_1_1_1_1_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter va vb vc)) va)))).
            (* For step <5>2. *)
            Parameter __C_1_1_1_1_2_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter vb va vc)) vb)))).
            (* For step <5>3. *)
            Parameter __C_1_1_1_1_3_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter vc va vb)) vc)))).
            (* For step <5>5. *)
            Parameter __C_1_1_1_1_5_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc)))))).
            (* For step <5>7. *)
            Parameter __C_1_1_1_1_7_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc)))))).
            (* For step <5>9. *)
            Parameter __C_1_1_1_1_9_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb)))))).
            (* For method of Self used via "by definition of !compatible". *)
            Definition abst_compatible (s1 : (Datatypes.prod _p_V_T _p_P_T))
              (s2 : (Datatypes.prod _p_V_T _p_P_T)) : coq_builtins.prop__t :=
              (Is_true ((_p_P_valid (abst_diag s1))) /\
                 Is_true ((_p_P_valid (abst_diag s2))) /\
                   Is_true ((_p_V_consistency_rule (abst_value s1)
                              (abst_value s2)))) \/
                (~Is_true (((_p_P_valid (abst_diag s1)))) /\
                   ~Is_true (((_p_P_valid (abst_diag s2))))).
            (* For hypothesis "H1". *)
            Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
            (* For hypothesis "H11". *)
            Parameter H11 : Is_true ((_p_V_consistency_rule va vc)).
            (* Theorem's body. *)
            Theorem for_zenon___C_1_1_1_1_LEMMA :
            ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
               (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
            %%end-auto-proof
            Theorem __C_1_1_1_1_LEMMA :
              ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
                 (abst_compatible (abst_voter va vb vc)
                   (abst_voter vc va vb))).
            assert (__force_use_H111 := H111).
            assert (__force_use_H11 := H11).
            assert (__force_use_H1 := H1).
            apply for_zenon___C_1_1_1_1_LEMMA;
            auto.
            Qed.
            End __C_1_1_1_1.
          Section __C_1_1_1_2.
            Variable H112 : ~Is_true (((_p_V_consistency_rule vb vc))).
            Section __C_1_1_1_2_1.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 341, characters 12-65]
              %%name: for_zenon___C_1_1_1_2_1_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H11". *)
              Parameter H11 : Is_true ((_p_V_consistency_rule va vc)).
              (* For hypothesis "H112". *)
              Parameter H112 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_partial_c1". *)
              Parameter abst_vote_partial_c1 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1
                                     _p_E_partial_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_2_1_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter va vb vc)) va))).
              %%end-auto-proof
              Theorem __C_1_1_1_2_1_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_value (abst_voter va vb vc)) va))).
              assert (__force_use_H112 := H112).
              assert (__force_use_H11 := H11).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_1_2_1_LEMMA;
              auto.
              Qed.
              End __C_1_1_1_2_1.
            Section __C_1_1_1_2_2.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 343, character 12, line 344, character 70]
              %%name: for_zenon___C_1_1_1_2_2_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H11". *)
              Parameter H11 : Is_true ((_p_V_consistency_rule va vc)).
              (* For hypothesis "H112". *)
              Parameter H112 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_partial_c2". *)
              Parameter abst_vote_partial_c2 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v2))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_2
                                     _p_E_partial_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_2_2_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter vb va vc)) va))).
              %%end-auto-proof
              Theorem __C_1_1_1_2_2_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_value (abst_voter vb va vc)) va))).
              assert (__force_use_H112 := H112).
              assert (__force_use_H11 := H11).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_1_2_2_LEMMA;
              auto.
              Qed.
              End __C_1_1_1_2_2.
            Section __C_1_1_1_2_3.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 346, character 12, line 347, character 70]
              %%name: for_zenon___C_1_1_1_2_3_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H11". *)
              Parameter H11 : Is_true ((_p_V_consistency_rule va vc)).
              (* For hypothesis "H112". *)
              Parameter H112 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_partial_c2". *)
              Parameter abst_vote_partial_c2 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v2))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_2
                                     _p_E_partial_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_2_3_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter vc va vb)) va))).
              %%end-auto-proof
              Theorem __C_1_1_1_2_3_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_value (abst_voter vc va vb)) va))).
              assert (__force_use_H112 := H112).
              assert (__force_use_H11 := H11).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_1_2_3_LEMMA;
              auto.
              Qed.
              End __C_1_1_1_2_3.
            Section __C_1_1_1_2_4.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 351, characters 12-64]
              %%name: for_zenon___C_1_1_1_2_4_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H11". *)
              Parameter H11 : Is_true ((_p_V_consistency_rule va vc)).
              (* For hypothesis "H112". *)
              Parameter H112 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_partial_c1". *)
              Parameter abst_vote_partial_c1 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1
                                     _p_E_partial_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_2_4_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter va vb vc))
                          (_p_P_constr _p_C_capt_1 _p_E_partial_match)))).
              %%end-auto-proof
              Theorem __C_1_1_1_2_4_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_diag (abst_voter va vb vc))
                            (_p_P_constr _p_C_capt_1 _p_E_partial_match)))).
              assert (__force_use_H112 := H112).
              assert (__force_use_H11 := H11).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_1_2_4_LEMMA;
              auto.
              Qed.
              End __C_1_1_1_2_4.
            Section __C_1_1_1_2_5.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 353, characters 12-82]
              %%name: for_zenon___C_1_1_1_2_5_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>4. *)
              Parameter __C_1_1_1_2_4_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter va vb vc))
                             (_p_P_constr _p_C_capt_1 _p_E_partial_match))))).
              (* For species parameter method used via "by property vote#P!partial_match_is_valid". *)
              Parameter _p_P_partial_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_partial_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_2_5_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))).
              %%end-auto-proof
              Theorem __C_1_1_1_2_5_LEMMA :
                Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))).
              assert (__force_use_H112 := H112).
              assert (__force_use_H11 := H11).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_1_2_5_LEMMA;
              auto.
              Qed.
              End __C_1_1_1_2_5.
            Section __C_1_1_1_2_6.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 357, character 12, line 358, character 67]
              %%name: for_zenon___C_1_1_1_2_6_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H11". *)
              Parameter H11 : Is_true ((_p_V_consistency_rule va vc)).
              (* For hypothesis "H112". *)
              Parameter H112 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_partial_c2". *)
              Parameter abst_vote_partial_c2 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v2))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_2
                                     _p_E_partial_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_2_6_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vb va vc))
                          (_p_P_constr _p_C_capt_2 _p_E_partial_match)))).
              %%end-auto-proof
              Theorem __C_1_1_1_2_6_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_diag (abst_voter vb va vc))
                            (_p_P_constr _p_C_capt_2 _p_E_partial_match)))).
              assert (__force_use_H112 := H112).
              assert (__force_use_H11 := H11).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_1_2_6_LEMMA;
              auto.
              Qed.
              End __C_1_1_1_2_6.
            Section __C_1_1_1_2_7.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 360, characters 12-82]
              %%name: for_zenon___C_1_1_1_2_7_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>6. *)
              Parameter __C_1_1_1_2_6_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vb va vc))
                             (_p_P_constr _p_C_capt_2 _p_E_partial_match))))).
              (* For species parameter method used via "by property vote#P!partial_match_is_valid". *)
              Parameter _p_P_partial_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_partial_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_2_7_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc))))).
              %%end-auto-proof
              Theorem __C_1_1_1_2_7_LEMMA :
                Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc))))).
              assert (__force_use_H112 := H112).
              assert (__force_use_H11 := H11).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_1_2_7_LEMMA;
              auto.
              Qed.
              End __C_1_1_1_2_7.
            Section __C_1_1_1_2_8.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 364, character 12, line 365, character 67]
              %%name: for_zenon___C_1_1_1_2_8_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H11". *)
              Parameter H11 : Is_true ((_p_V_consistency_rule va vc)).
              (* For hypothesis "H112". *)
              Parameter H112 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_partial_c2". *)
              Parameter abst_vote_partial_c2 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v2))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_2
                                     _p_E_partial_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_2_8_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vc va vb))
                          (_p_P_constr _p_C_capt_2 _p_E_partial_match)))).
              %%end-auto-proof
              Theorem __C_1_1_1_2_8_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_diag (abst_voter vc va vb))
                            (_p_P_constr _p_C_capt_2 _p_E_partial_match)))).
              assert (__force_use_H112 := H112).
              assert (__force_use_H11 := H11).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_1_2_8_LEMMA;
              auto.
              Qed.
              End __C_1_1_1_2_8.
            Section __C_1_1_1_2_9.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 367, characters 12-82]
              %%name: for_zenon___C_1_1_1_2_9_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>8. *)
              Parameter __C_1_1_1_2_8_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vc va vb))
                             (_p_P_constr _p_C_capt_2 _p_E_partial_match))))).
              (* For species parameter method used via "by property vote#P!partial_match_is_valid". *)
              Parameter _p_P_partial_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_partial_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_1_2_9_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb))))).
              %%end-auto-proof
              Theorem __C_1_1_1_2_9_LEMMA :
                Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb))))).
              assert (__force_use_H112 := H112).
              assert (__force_use_H11 := H11).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_1_2_9_LEMMA;
              auto.
              Qed.
              End __C_1_1_1_2_9.
            %%begin-auto-proof
            %%location: [File "vote.fcl", line 369, character 20, line 371, character 39]
            %%name: for_zenon___C_1_1_1_2_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For step <5>1. *)
            Parameter __C_1_1_1_2_1_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter va vb vc)) va)))).
            (* For step <5>2. *)
            Parameter __C_1_1_1_2_2_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter vb va vc)) va)))).
            (* For step <5>3. *)
            Parameter __C_1_1_1_2_3_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter vc va vb)) va)))).
            (* For step <5>5. *)
            Parameter __C_1_1_1_2_5_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc)))))).
            (* For step <5>7. *)
            Parameter __C_1_1_1_2_7_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc)))))).
            (* For step <5>9. *)
            Parameter __C_1_1_1_2_9_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb)))))).
            (* For species parameter method used via "by property vote#V!consistency_rule_reflexive". *)
            Parameter _p_V_consistency_rule_reflexive :
              forall a : _p_V_T, Is_true ((_p_V_consistency_rule a a)).
            (* For method of Self used via "by definition of !compatible". *)
            Definition abst_compatible (s1 : (Datatypes.prod _p_V_T _p_P_T))
              (s2 : (Datatypes.prod _p_V_T _p_P_T)) : coq_builtins.prop__t :=
              (Is_true ((_p_P_valid (abst_diag s1))) /\
                 Is_true ((_p_P_valid (abst_diag s2))) /\
                   Is_true ((_p_V_consistency_rule (abst_value s1)
                              (abst_value s2)))) \/
                (~Is_true (((_p_P_valid (abst_diag s1)))) /\
                   ~Is_true (((_p_P_valid (abst_diag s2))))).
            (* Theorem's body. *)
            Theorem for_zenon___C_1_1_1_2_LEMMA :
            ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
               (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
            %%end-auto-proof
            Theorem __C_1_1_1_2_LEMMA :
              ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
                 (abst_compatible (abst_voter va vb vc)
                   (abst_voter vc va vb))).
            assert (__force_use_H112 := H112).
            assert (__force_use_H11 := H11).
            assert (__force_use_H1 := H1).
            apply for_zenon___C_1_1_1_2_LEMMA;
            auto.
            Qed.
            End __C_1_1_1_2.
          %%begin-auto-proof
          %%location: [File "vote.fcl", line 373, characters 17-55]
          %%name: for_zenon___C_1_1_1_LEMMA
          
          
          
          (* Methods to use for automated proof. *)
          (* For step <4>1. *)
          Parameter __C_1_1_1_1_LEMMA :
            (Is_true ((_p_V_consistency_rule vb vc))) -> (((abst_compatible
                                                             (abst_voter va
                                                               vb vc)
                                                             (abst_voter vb
                                                               va vc)) /\
                                                             (abst_compatible
                                                               (abst_voter va
                                                                 vb vc)
                                                               (abst_voter vc
                                                                 va vb)))).
          (* For step <4>2. *)
          Parameter __C_1_1_1_2_LEMMA :
            (~Is_true (((_p_V_consistency_rule vb vc)))) -> (((abst_compatible
                                                                (abst_voter
                                                                  va vb vc)
                                                                (abst_voter
                                                                  vb va vc)) /\
                                                                (abst_compatible
                                                                  (abst_voter
                                                                    va vb vc)
                                                                  (abst_voter
                                                                    vc va vb)))).
          (* For method of Self used via "by property !compatible". *)
          Parameter abst_compatible :
            (Datatypes.prod _p_V_T _p_P_T) ->
              (Datatypes.prod _p_V_T _p_P_T) -> coq_builtins.prop__t.
          (* Theorem's body. *)
          Theorem for_zenon___C_1_1_1_LEMMA :
          ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
             (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
          %%end-auto-proof
          Theorem __C_1_1_1_LEMMA :
            ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
               (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
          assert (__force_use_H11 := H11).
          assert (__force_use_H1 := H1).
          apply for_zenon___C_1_1_1_LEMMA;
          auto.
          Qed.
          End __C_1_1_1.
        Section __C_1_1_2.
          Variable H12 : ~Is_true (((_p_V_consistency_rule va vc))).
          Section __C_1_1_2_1.
            Variable H121 : Is_true ((_p_V_consistency_rule vb vc)).
            Section __C_1_1_2_1_1.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 389, characters 10-63]
              %%name: for_zenon___C_1_1_2_1_1_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H12". *)
              Parameter H12 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H121". *)
              Parameter H121 : Is_true ((_p_V_consistency_rule vb vc)).
              (* For method of Self used via "by property !vote_partial_c2". *)
              Parameter abst_vote_partial_c2 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v2))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_2
                                     _p_E_partial_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_1_1_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter va vb vc)) vb))).
              %%end-auto-proof
              Theorem __C_1_1_2_1_1_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_value (abst_voter va vb vc)) vb))).
              assert (__force_use_H121 := H121).
              assert (__force_use_H12 := H12).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_2_1_1_LEMMA;
              auto.
              Qed.
              End __C_1_1_2_1_1.
            Section __C_1_1_2_1_2.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 391, character 10, line 392, character 68]
              %%name: for_zenon___C_1_1_2_1_2_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H12". *)
              Parameter H12 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H121". *)
              Parameter H121 : Is_true ((_p_V_consistency_rule vb vc)).
              (* For method of Self used via "by property !vote_partial_c1". *)
              Parameter abst_vote_partial_c1 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1
                                     _p_E_partial_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_1_2_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter vb va vc)) vb))).
              %%end-auto-proof
              Theorem __C_1_1_2_1_2_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_value (abst_voter vb va vc)) vb))).
              assert (__force_use_H121 := H121).
              assert (__force_use_H12 := H12).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_2_1_2_LEMMA;
              auto.
              Qed.
              End __C_1_1_2_1_2.
            Section __C_1_1_2_1_3.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 394, character 10, line 395, character 68]
              %%name: for_zenon___C_1_1_2_1_3_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H12". *)
              Parameter H12 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H121". *)
              Parameter H121 : Is_true ((_p_V_consistency_rule vb vc)).
              (* For method of Self used via "by property !vote_partial_c3". *)
              Parameter abst_vote_partial_c3 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v3))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_3
                                     _p_E_partial_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_1_3_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter vc va vb)) vb))).
              %%end-auto-proof
              Theorem __C_1_1_2_1_3_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_value (abst_voter vc va vb)) vb))).
              assert (__force_use_H121 := H121).
              assert (__force_use_H12 := H12).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_2_1_3_LEMMA;
              auto.
              Qed.
              End __C_1_1_2_1_3.
            Section __C_1_1_2_1_4.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 399, characters 10-62]
              %%name: for_zenon___C_1_1_2_1_4_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H12". *)
              Parameter H12 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H121". *)
              Parameter H121 : Is_true ((_p_V_consistency_rule vb vc)).
              (* For method of Self used via "by property !vote_partial_c2". *)
              Parameter abst_vote_partial_c2 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v2))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_2
                                     _p_E_partial_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_1_4_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter va vb vc))
                          (_p_P_constr _p_C_capt_2 _p_E_partial_match)))).
              %%end-auto-proof
              Theorem __C_1_1_2_1_4_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_diag (abst_voter va vb vc))
                            (_p_P_constr _p_C_capt_2 _p_E_partial_match)))).
              assert (__force_use_H121 := H121).
              assert (__force_use_H12 := H12).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_2_1_4_LEMMA;
              auto.
              Qed.
              End __C_1_1_2_1_4.
            Section __C_1_1_2_1_5.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 401, characters 12-82]
              %%name: for_zenon___C_1_1_2_1_5_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>4. *)
              Parameter __C_1_1_2_1_4_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter va vb vc))
                             (_p_P_constr _p_C_capt_2 _p_E_partial_match))))).
              (* For species parameter method used via "by property vote#P!partial_match_is_valid". *)
              Parameter _p_P_partial_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_partial_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_1_5_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))).
              %%end-auto-proof
              Theorem __C_1_1_2_1_5_LEMMA :
                Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))).
              assert (__force_use_H121 := H121).
              assert (__force_use_H12 := H12).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_2_1_5_LEMMA;
              auto.
              Qed.
              End __C_1_1_2_1_5.
            Section __C_1_1_2_1_6.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 405, character 11, line 406, character 66]
              %%name: for_zenon___C_1_1_2_1_6_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H12". *)
              Parameter H12 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H121". *)
              Parameter H121 : Is_true ((_p_V_consistency_rule vb vc)).
              (* For method of Self used via "by property !vote_partial_c1". *)
              Parameter abst_vote_partial_c1 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1
                                     _p_E_partial_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_1_6_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vb va vc))
                          (_p_P_constr _p_C_capt_1 _p_E_partial_match)))).
              %%end-auto-proof
              Theorem __C_1_1_2_1_6_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_diag (abst_voter vb va vc))
                            (_p_P_constr _p_C_capt_1 _p_E_partial_match)))).
              assert (__force_use_H121 := H121).
              assert (__force_use_H12 := H12).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_2_1_6_LEMMA;
              auto.
              Qed.
              End __C_1_1_2_1_6.
            Section __C_1_1_2_1_7.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 408, characters 11-81]
              %%name: for_zenon___C_1_1_2_1_7_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>6. *)
              Parameter __C_1_1_2_1_6_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vb va vc))
                             (_p_P_constr _p_C_capt_1 _p_E_partial_match))))).
              (* For species parameter method used via "by property vote#P!partial_match_is_valid". *)
              Parameter _p_P_partial_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_partial_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_1_7_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc))))).
              %%end-auto-proof
              Theorem __C_1_1_2_1_7_LEMMA :
                Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc))))).
              assert (__force_use_H121 := H121).
              assert (__force_use_H12 := H12).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_2_1_7_LEMMA;
              auto.
              Qed.
              End __C_1_1_2_1_7.
            Section __C_1_1_2_1_8.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 412, character 11, line 413, character 66]
              %%name: for_zenon___C_1_1_2_1_8_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H12". *)
              Parameter H12 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H121". *)
              Parameter H121 : Is_true ((_p_V_consistency_rule vb vc)).
              (* For method of Self used via "by property !vote_partial_c3". *)
              Parameter abst_vote_partial_c3 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v3))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_3
                                     _p_E_partial_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_1_8_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vc va vb))
                          (_p_P_constr _p_C_capt_3 _p_E_partial_match)))).
              %%end-auto-proof
              Theorem __C_1_1_2_1_8_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_diag (abst_voter vc va vb))
                            (_p_P_constr _p_C_capt_3 _p_E_partial_match)))).
              assert (__force_use_H121 := H121).
              assert (__force_use_H12 := H12).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_2_1_8_LEMMA;
              auto.
              Qed.
              End __C_1_1_2_1_8.
            Section __C_1_1_2_1_9.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 415, characters 11-81]
              %%name: for_zenon___C_1_1_2_1_9_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>8. *)
              Parameter __C_1_1_2_1_8_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vc va vb))
                             (_p_P_constr _p_C_capt_3 _p_E_partial_match))))).
              (* For species parameter method used via "by property vote#P!partial_match_is_valid". *)
              Parameter _p_P_partial_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_partial_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_1_9_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb))))).
              %%end-auto-proof
              Theorem __C_1_1_2_1_9_LEMMA :
                Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb))))).
              assert (__force_use_H121 := H121).
              assert (__force_use_H12 := H12).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_2_1_9_LEMMA;
              auto.
              Qed.
              End __C_1_1_2_1_9.
            %%begin-auto-proof
            %%location: [File "vote.fcl", line 416, character 19, line 418, character 37]
            %%name: for_zenon___C_1_1_2_1_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For step <5>1. *)
            Parameter __C_1_1_2_1_1_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter va vb vc)) vb)))).
            (* For step <5>2. *)
            Parameter __C_1_1_2_1_2_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter vb va vc)) vb)))).
            (* For step <5>3. *)
            Parameter __C_1_1_2_1_3_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter vc va vb)) vb)))).
            (* For step <5>5. *)
            Parameter __C_1_1_2_1_5_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc)))))).
            (* For step <5>7. *)
            Parameter __C_1_1_2_1_7_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc)))))).
            (* For step <5>9. *)
            Parameter __C_1_1_2_1_9_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb)))))).
            (* For species parameter method used via "by property vote#V!consistency_rule_reflexive". *)
            Parameter _p_V_consistency_rule_reflexive :
              forall a : _p_V_T, Is_true ((_p_V_consistency_rule a a)).
            (* For method of Self used via "by definition of !compatible". *)
            Definition abst_compatible (s1 : (Datatypes.prod _p_V_T _p_P_T))
              (s2 : (Datatypes.prod _p_V_T _p_P_T)) : coq_builtins.prop__t :=
              (Is_true ((_p_P_valid (abst_diag s1))) /\
                 Is_true ((_p_P_valid (abst_diag s2))) /\
                   Is_true ((_p_V_consistency_rule (abst_value s1)
                              (abst_value s2)))) \/
                (~Is_true (((_p_P_valid (abst_diag s1)))) /\
                   ~Is_true (((_p_P_valid (abst_diag s2))))).
            (* Theorem's body. *)
            Theorem for_zenon___C_1_1_2_1_LEMMA :
            ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
               (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
            %%end-auto-proof
            Theorem __C_1_1_2_1_LEMMA :
              ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
                 (abst_compatible (abst_voter va vb vc)
                   (abst_voter vc va vb))).
            assert (__force_use_H121 := H121).
            assert (__force_use_H12 := H12).
            assert (__force_use_H1 := H1).
            apply for_zenon___C_1_1_2_1_LEMMA;
            auto.
            Qed.
            End __C_1_1_2_1.
          Section __C_1_1_2_2.
            Variable H122 : ~Is_true (((_p_V_consistency_rule vb vc))).
            Section __C_1_1_2_2_1.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 427, character 10, line 428, character 66]
              %%name: for_zenon___C_1_1_2_2_1_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H12". *)
              Parameter H12 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H122". *)
              Parameter H122 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_match_c3". *)
              Parameter abst_vote_match_c3 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_3 _p_E_range_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_2_1_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter va vb vc)) va))).
              %%end-auto-proof
              Theorem __C_1_1_2_2_1_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_value (abst_voter va vb vc)) va))).
              assert (__force_use_H122 := H122).
              assert (__force_use_H12 := H12).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_2_2_1_LEMMA;
              auto.
              Qed.
              End __C_1_1_2_2_1.
            Section __C_1_1_2_2_2.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 430, character 10, line 431, character 66]
              %%name: for_zenon___C_1_1_2_2_2_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H12". *)
              Parameter H12 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H122". *)
              Parameter H122 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_match_c3". *)
              Parameter abst_vote_match_c3 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_3 _p_E_range_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_2_2_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter vb va vc)) vb))).
              %%end-auto-proof
              Theorem __C_1_1_2_2_2_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_value (abst_voter vb va vc)) vb))).
              assert (__force_use_H122 := H122).
              assert (__force_use_H12 := H12).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_2_2_2_LEMMA;
              auto.
              Qed.
              End __C_1_1_2_2_2.
            Section __C_1_1_2_2_3.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 433, character 10, line 434, character 66]
              %%name: for_zenon___C_1_1_2_2_3_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H12". *)
              Parameter H12 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H122". *)
              Parameter H122 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_match_c1". *)
              Parameter abst_vote_match_c1 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v2))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1 _p_E_range_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_2_3_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter vc va vb)) va))).
              %%end-auto-proof
              Theorem __C_1_1_2_2_3_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_value (abst_voter vc va vb)) va))).
              assert (__force_use_H122 := H122).
              assert (__force_use_H12 := H12).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_2_2_3_LEMMA;
              auto.
              Qed.
              End __C_1_1_2_2_3.
            Section __C_1_1_2_2_4.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 438, character 10, line 439, character 63]
              %%name: for_zenon___C_1_1_2_2_4_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H12". *)
              Parameter H12 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H122". *)
              Parameter H122 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_match_c3". *)
              Parameter abst_vote_match_c3 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_3 _p_E_range_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_2_4_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter va vb vc))
                          (_p_P_constr _p_C_capt_3 _p_E_range_match)))).
              %%end-auto-proof
              Theorem __C_1_1_2_2_4_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_diag (abst_voter va vb vc))
                            (_p_P_constr _p_C_capt_3 _p_E_range_match)))).
              assert (__force_use_H122 := H122).
              assert (__force_use_H12 := H12).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_2_2_4_LEMMA;
              auto.
              Qed.
              End __C_1_1_2_2_4.
            Section __C_1_1_2_2_5.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 441, characters 12-80]
              %%name: for_zenon___C_1_1_2_2_5_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>4. *)
              Parameter __C_1_1_2_2_4_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter va vb vc))
                             (_p_P_constr _p_C_capt_3 _p_E_range_match))))).
              (* For species parameter method used via "by property vote#P!range_match_is_valid". *)
              Parameter _p_P_range_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_range_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_2_5_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))).
              %%end-auto-proof
              Theorem __C_1_1_2_2_5_LEMMA :
                Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))).
              assert (__force_use_H122 := H122).
              assert (__force_use_H12 := H12).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_2_2_5_LEMMA;
              auto.
              Qed.
              End __C_1_1_2_2_5.
            Section __C_1_1_2_2_6.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 445, character 11, line 446, character 64]
              %%name: for_zenon___C_1_1_2_2_6_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H12". *)
              Parameter H12 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H122". *)
              Parameter H122 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_match_c3". *)
              Parameter abst_vote_match_c3 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_3 _p_E_range_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_2_6_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vb va vc))
                          (_p_P_constr _p_C_capt_3 _p_E_range_match)))).
              %%end-auto-proof
              Theorem __C_1_1_2_2_6_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_diag (abst_voter vb va vc))
                            (_p_P_constr _p_C_capt_3 _p_E_range_match)))).
              assert (__force_use_H122 := H122).
              assert (__force_use_H12 := H12).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_2_2_6_LEMMA;
              auto.
              Qed.
              End __C_1_1_2_2_6.
            Section __C_1_1_2_2_7.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 448, characters 11-79]
              %%name: for_zenon___C_1_1_2_2_7_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>6. *)
              Parameter __C_1_1_2_2_6_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vb va vc))
                             (_p_P_constr _p_C_capt_3 _p_E_range_match))))).
              (* For species parameter method used via "by property vote#P!range_match_is_valid". *)
              Parameter _p_P_range_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_range_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_2_7_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc))))).
              %%end-auto-proof
              Theorem __C_1_1_2_2_7_LEMMA :
                Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc))))).
              assert (__force_use_H122 := H122).
              assert (__force_use_H12 := H12).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_2_2_7_LEMMA;
              auto.
              Qed.
              End __C_1_1_2_2_7.
            Section __C_1_1_2_2_8.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 452, character 11, line 453, character 64]
              %%name: for_zenon___C_1_1_2_2_8_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H1". *)
              Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
              (* For hypothesis "H12". *)
              Parameter H12 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H122". *)
              Parameter H122 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_match_c1". *)
              Parameter abst_vote_match_c1 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v2))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1 _p_E_range_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_2_8_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vc va vb))
                          (_p_P_constr _p_C_capt_1 _p_E_range_match)))).
              %%end-auto-proof
              Theorem __C_1_1_2_2_8_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_diag (abst_voter vc va vb))
                            (_p_P_constr _p_C_capt_1 _p_E_range_match)))).
              assert (__force_use_H122 := H122).
              assert (__force_use_H12 := H12).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_2_2_8_LEMMA;
              auto.
              Qed.
              End __C_1_1_2_2_8.
            Section __C_1_1_2_2_9.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 455, characters 11-79]
              %%name: for_zenon___C_1_1_2_2_9_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>8. *)
              Parameter __C_1_1_2_2_8_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vc va vb))
                             (_p_P_constr _p_C_capt_1 _p_E_range_match))))).
              (* For species parameter method used via "by property vote#P!range_match_is_valid". *)
              Parameter _p_P_range_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_range_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_1_2_2_9_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb))))).
              %%end-auto-proof
              Theorem __C_1_1_2_2_9_LEMMA :
                Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb))))).
              assert (__force_use_H122 := H122).
              assert (__force_use_H12 := H12).
              assert (__force_use_H1 := H1).
              apply for_zenon___C_1_1_2_2_9_LEMMA;
              auto.
              Qed.
              End __C_1_1_2_2_9.
            %%begin-auto-proof
            %%location: [File "vote.fcl", line 457, character 19, line 460, character 39]
            %%name: for_zenon___C_1_1_2_2_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For step <5>1. *)
            Parameter __C_1_1_2_2_1_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter va vb vc)) va)))).
            (* For step <5>2. *)
            Parameter __C_1_1_2_2_2_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter vb va vc)) vb)))).
            (* For step <5>3. *)
            Parameter __C_1_1_2_2_3_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter vc va vb)) va)))).
            (* For step <5>5. *)
            Parameter __C_1_1_2_2_5_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc)))))).
            (* For step <5>7. *)
            Parameter __C_1_1_2_2_7_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc)))))).
            (* For step <5>9. *)
            Parameter __C_1_1_2_2_9_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb)))))).
            (* For hypothesis "H1". *)
            Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
            (* For species parameter method used via "by property vote#V!consistency_rule_reflexive". *)
            Parameter _p_V_consistency_rule_reflexive :
              forall a : _p_V_T, Is_true ((_p_V_consistency_rule a a)).
            (* For method of Self used via "by definition of !compatible". *)
            Definition abst_compatible (s1 : (Datatypes.prod _p_V_T _p_P_T))
              (s2 : (Datatypes.prod _p_V_T _p_P_T)) : coq_builtins.prop__t :=
              (Is_true ((_p_P_valid (abst_diag s1))) /\
                 Is_true ((_p_P_valid (abst_diag s2))) /\
                   Is_true ((_p_V_consistency_rule (abst_value s1)
                              (abst_value s2)))) \/
                (~Is_true (((_p_P_valid (abst_diag s1)))) /\
                   ~Is_true (((_p_P_valid (abst_diag s2))))).
            (* Theorem's body. *)
            Theorem for_zenon___C_1_1_2_2_LEMMA :
            ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
               (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
            %%end-auto-proof
            Theorem __C_1_1_2_2_LEMMA :
              ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
                 (abst_compatible (abst_voter va vb vc)
                   (abst_voter vc va vb))).
            assert (__force_use_H122 := H122).
            assert (__force_use_H12 := H12).
            assert (__force_use_H1 := H1).
            apply for_zenon___C_1_1_2_2_LEMMA;
            auto.
            Qed.
            End __C_1_1_2_2.
          %%begin-auto-proof
          %%location: [File "vote.fcl", line 462, characters 17-55]
          %%name: for_zenon___C_1_1_2_LEMMA
          
          
          
          (* Methods to use for automated proof. *)
          (* For step <4>1. *)
          Parameter __C_1_1_2_1_LEMMA :
            (Is_true ((_p_V_consistency_rule vb vc))) -> (((abst_compatible
                                                             (abst_voter va
                                                               vb vc)
                                                             (abst_voter vb
                                                               va vc)) /\
                                                             (abst_compatible
                                                               (abst_voter va
                                                                 vb vc)
                                                               (abst_voter vc
                                                                 va vb)))).
          (* For step <4>2. *)
          Parameter __C_1_1_2_2_LEMMA :
            (~Is_true (((_p_V_consistency_rule vb vc)))) -> (((abst_compatible
                                                                (abst_voter
                                                                  va vb vc)
                                                                (abst_voter
                                                                  vb va vc)) /\
                                                                (abst_compatible
                                                                  (abst_voter
                                                                    va vb vc)
                                                                  (abst_voter
                                                                    vc va vb)))).
          (* For method of Self used via "by property !compatible". *)
          Parameter abst_compatible :
            (Datatypes.prod _p_V_T _p_P_T) ->
              (Datatypes.prod _p_V_T _p_P_T) -> coq_builtins.prop__t.
          (* Theorem's body. *)
          Theorem for_zenon___C_1_1_2_LEMMA :
          ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
             (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
          %%end-auto-proof
          Theorem __C_1_1_2_LEMMA :
            ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
               (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
          assert (__force_use_H12 := H12).
          assert (__force_use_H1 := H1).
          apply for_zenon___C_1_1_2_LEMMA;
          auto.
          Qed.
          End __C_1_1_2.
        %%begin-auto-proof
        %%location: [File "vote.fcl", line 464, characters 15-53]
        %%name: for_zenon___C_1_1_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For step <3>1. *)
        Parameter __C_1_1_1_LEMMA :
          (Is_true ((_p_V_consistency_rule va vc))) -> (((abst_compatible
                                                           (abst_voter va vb
                                                             vc)
                                                           (abst_voter vb va
                                                             vc)) /\
                                                           (abst_compatible
                                                             (abst_voter va
                                                               vb vc)
                                                             (abst_voter vc
                                                               va vb)))).
        (* For step <3>2. *)
        Parameter __C_1_1_2_LEMMA :
          (~Is_true (((_p_V_consistency_rule va vc)))) -> (((abst_compatible
                                                              (abst_voter va
                                                                vb vc)
                                                              (abst_voter vb
                                                                va vc)) /\
                                                              (abst_compatible
                                                                (abst_voter
                                                                  va vb vc)
                                                                (abst_voter
                                                                  vc va vb)))).
        (* For method of Self used via "by property !compatible". *)
        Parameter abst_compatible :
          (Datatypes.prod _p_V_T _p_P_T) ->
            (Datatypes.prod _p_V_T _p_P_T) -> coq_builtins.prop__t.
        (* Theorem's body. *)
        Theorem for_zenon___C_1_1_LEMMA :
        ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
           (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
        %%end-auto-proof
        Theorem __C_1_1_LEMMA :
          ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
             (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
        assert (__force_use_H1 := H1).
        apply for_zenon___C_1_1_LEMMA;
        auto.
        Qed.
        End __C_1_1.
      Section __C_1_2.
        Variable H2 : ~Is_true (((_p_V_consistency_rule va vb))).
        Section __C_1_2_1.
          Variable H21 : Is_true (((_p_V_consistency_rule va vc))).
          Section __C_1_2_1_1.
            Variable H211 : Is_true (((_p_V_consistency_rule vb vc))).
            Section __C_1_2_1_1_1.
              Section __C_1_2_1_1_1_1.
                %%begin-auto-proof
                %%location: [File "vote.fcl", line 486, characters 12-52]
                %%name: for_zenon___C_1_2_1_1_1_1_LEMMA
                
                
                
                (* Methods to use for automated proof. *)
                (* For species parameter method used via "by property vote#V!consistency_rule_symmetric". *)
                Parameter _p_V_consistency_rule_symmetric :
                  forall a  b : _p_V_T,
                    Is_true ((_p_V_consistency_rule a b)) ->
                      Is_true ((_p_V_consistency_rule b a)).
                (* Theorem's body. *)
                Theorem for_zenon___C_1_2_1_1_1_1_LEMMA :
                Is_true ((_p_V_consistency_rule vb va)) ->
                  Is_true ((_p_V_consistency_rule va vb)).
                %%end-auto-proof
                Theorem __C_1_2_1_1_1_1_LEMMA :
                  Is_true ((_p_V_consistency_rule vb va)) ->
                    Is_true ((_p_V_consistency_rule va vb)).
                assert (__force_use_H211 := H211).
                assert (__force_use_H21 := H21).
                assert (__force_use_H2 := H2).
                apply for_zenon___C_1_2_1_1_1_1_LEMMA;
                auto.
                Qed.
                End __C_1_2_1_1_1_1.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 487, characters 20-46]
              %%name: for_zenon___C_1_2_1_1_1_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <6>1. *)
              Parameter __C_1_2_1_1_1_1_LEMMA :
                (Is_true ((_p_V_consistency_rule vb va)) ->
                   Is_true ((_p_V_consistency_rule va vb))).
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_1_1_LEMMA :
              ~Is_true (((_p_V_consistency_rule vb va))).
              %%end-auto-proof
              Theorem __C_1_2_1_1_1_LEMMA :
                ~Is_true (((_p_V_consistency_rule vb va))).
              assert (__force_use_H211 := H211).
              assert (__force_use_H21 := H21).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_1_1_1_LEMMA;
              auto.
              Qed.
              End __C_1_2_1_1_1.
            Section __C_1_2_1_1_2.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 490, characters 11-63]
              %%name: for_zenon___C_1_2_1_1_2_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* For hypothesis "H21". *)
              Parameter H21 : Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H211". *)
              Parameter H211 : Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_partial_c3". *)
              Parameter abst_vote_partial_c3 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v3))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_3
                                     _p_E_partial_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_1_2_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter va vb vc)) vc))).
              %%end-auto-proof
              Theorem __C_1_2_1_1_2_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_value (abst_voter va vb vc)) vc))).
              assert (__force_use_H211 := H211).
              assert (__force_use_H21 := H21).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_1_1_2_LEMMA;
              auto.
              Qed.
              End __C_1_2_1_1_2.
            Section __C_1_2_1_1_3.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 492, characters 11-69]
              %%name: for_zenon___C_1_2_1_1_3_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H21". *)
              Parameter H21 : Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H211". *)
              Parameter H211 : Is_true (((_p_V_consistency_rule vb vc))).
              (* For step <5>1. *)
              Parameter __C_1_2_1_1_1_LEMMA :
                (~Is_true (((_p_V_consistency_rule vb va)))).
              (* For method of Self used via "by property !vote_partial_c3". *)
              Parameter abst_vote_partial_c3 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v3))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_3
                                     _p_E_partial_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_1_3_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter vb va vc)) vc))).
              %%end-auto-proof
              Theorem __C_1_2_1_1_3_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_value (abst_voter vb va vc)) vc))).
              assert (__force_use_H211 := H211).
              assert (__force_use_H21 := H21).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_1_1_3_LEMMA;
              auto.
              Qed.
              End __C_1_2_1_1_3.
            Section __C_1_2_1_1_4.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 494, character 11, line 495, character 69]
              %%name: for_zenon___C_1_2_1_1_4_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* For hypothesis "H21". *)
              Parameter H21 : Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H211". *)
              Parameter H211 : Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_partial_c1". *)
              Parameter abst_vote_partial_c1 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1
                                     _p_E_partial_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_1_4_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter vc va vb)) vc))).
              %%end-auto-proof
              Theorem __C_1_2_1_1_4_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_value (abst_voter vc va vb)) vc))).
              assert (__force_use_H211 := H211).
              assert (__force_use_H21 := H21).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_1_1_4_LEMMA;
              auto.
              Qed.
              End __C_1_2_1_1_4.
            Section __C_1_2_1_1_5.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 498, characters 10-62]
              %%name: for_zenon___C_1_2_1_1_5_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* For hypothesis "H21". *)
              Parameter H21 : Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H211". *)
              Parameter H211 : Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_partial_c3". *)
              Parameter abst_vote_partial_c3 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v3))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_3
                                     _p_E_partial_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_1_5_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter va vb vc))
                          (_p_P_constr _p_C_capt_3 _p_E_partial_match)))).
              %%end-auto-proof
              Theorem __C_1_2_1_1_5_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_diag (abst_voter va vb vc))
                            (_p_P_constr _p_C_capt_3 _p_E_partial_match)))).
              assert (__force_use_H211 := H211).
              assert (__force_use_H21 := H21).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_1_1_5_LEMMA;
              auto.
              Qed.
              End __C_1_2_1_1_5.
            Section __C_1_2_1_1_6.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 500, characters 11-81]
              %%name: for_zenon___C_1_2_1_1_6_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>5. *)
              Parameter __C_1_2_1_1_5_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter va vb vc))
                             (_p_P_constr _p_C_capt_3 _p_E_partial_match))))).
              (* For species parameter method used via "by property vote#P!partial_match_is_valid". *)
              Parameter _p_P_partial_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_partial_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_1_6_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))).
              %%end-auto-proof
              Theorem __C_1_2_1_1_6_LEMMA :
                Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))).
              assert (__force_use_H211 := H211).
              assert (__force_use_H21 := H21).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_1_1_6_LEMMA;
              auto.
              Qed.
              End __C_1_2_1_1_6.
            Section __C_1_2_1_1_7.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 504, characters 10-68]
              %%name: for_zenon___C_1_2_1_1_7_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H21". *)
              Parameter H21 : Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H211". *)
              Parameter H211 : Is_true (((_p_V_consistency_rule vb vc))).
              (* For step <5>1. *)
              Parameter __C_1_2_1_1_1_LEMMA :
                (~Is_true (((_p_V_consistency_rule vb va)))).
              (* For method of Self used via "by property !vote_partial_c3". *)
              Parameter abst_vote_partial_c3 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v3))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_3
                                     _p_E_partial_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_1_7_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vb va vc))
                          (_p_P_constr _p_C_capt_3 _p_E_partial_match)))).
              %%end-auto-proof
              Theorem __C_1_2_1_1_7_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_diag (abst_voter vb va vc))
                            (_p_P_constr _p_C_capt_3 _p_E_partial_match)))).
              assert (__force_use_H211 := H211).
              assert (__force_use_H21 := H21).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_1_1_7_LEMMA;
              auto.
              Qed.
              End __C_1_2_1_1_7.
            Section __C_1_2_1_1_8.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 506, characters 10-80]
              %%name: for_zenon___C_1_2_1_1_8_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>7. *)
              Parameter __C_1_2_1_1_7_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vb va vc))
                             (_p_P_constr _p_C_capt_3 _p_E_partial_match))))).
              (* For species parameter method used via "by property vote#P!partial_match_is_valid". *)
              Parameter _p_P_partial_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_partial_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_1_8_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc))))).
              %%end-auto-proof
              Theorem __C_1_2_1_1_8_LEMMA :
                Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc))))).
              assert (__force_use_H211 := H211).
              assert (__force_use_H21 := H21).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_1_1_8_LEMMA;
              auto.
              Qed.
              End __C_1_2_1_1_8.
            Section __C_1_2_1_1_9.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 510, character 10, line 511, character 65]
              %%name: for_zenon___C_1_2_1_1_9_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* For hypothesis "H21". *)
              Parameter H21 : Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H211". *)
              Parameter H211 : Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_partial_c1". *)
              Parameter abst_vote_partial_c1 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1
                                     _p_E_partial_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_1_9_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vc va vb))
                          (_p_P_constr _p_C_capt_1 _p_E_partial_match)))).
              %%end-auto-proof
              Theorem __C_1_2_1_1_9_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_diag (abst_voter vc va vb))
                            (_p_P_constr _p_C_capt_1 _p_E_partial_match)))).
              assert (__force_use_H211 := H211).
              assert (__force_use_H21 := H21).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_1_1_9_LEMMA;
              auto.
              Qed.
              End __C_1_2_1_1_9.
            Section __C_1_2_1_1_10.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 513, characters 10-80]
              %%name: for_zenon___C_1_2_1_1_10_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>9. *)
              Parameter __C_1_2_1_1_9_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vc va vb))
                             (_p_P_constr _p_C_capt_1 _p_E_partial_match))))).
              (* For species parameter method used via "by property vote#P!partial_match_is_valid". *)
              Parameter _p_P_partial_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_partial_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_1_10_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb))))).
              %%end-auto-proof
              Theorem __C_1_2_1_1_10_LEMMA :
                Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb))))).
              assert (__force_use_H211 := H211).
              assert (__force_use_H21 := H21).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_1_1_10_LEMMA;
              auto.
              Qed.
              End __C_1_2_1_1_10.
            %%begin-auto-proof
            %%location: [File "vote.fcl", line 515, character 18, line 517, character 35]
            %%name: for_zenon___C_1_2_1_1_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For step <5>2. *)
            Parameter __C_1_2_1_1_2_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter va vb vc)) vc)))).
            (* For step <5>3. *)
            Parameter __C_1_2_1_1_3_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter vb va vc)) vc)))).
            (* For step <5>4. *)
            Parameter __C_1_2_1_1_4_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter vc va vb)) vc)))).
            (* For step <5>6. *)
            Parameter __C_1_2_1_1_6_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc)))))).
            (* For step <5>8. *)
            Parameter __C_1_2_1_1_8_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc)))))).
            (* For step <5>10. *)
            Parameter __C_1_2_1_1_10_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb)))))).
            (* For species parameter method used via "by property vote#V!consistency_rule_reflexive". *)
            Parameter _p_V_consistency_rule_reflexive :
              forall a : _p_V_T, Is_true ((_p_V_consistency_rule a a)).
            (* For method of Self used via "by definition of !compatible". *)
            Definition abst_compatible (s1 : (Datatypes.prod _p_V_T _p_P_T))
              (s2 : (Datatypes.prod _p_V_T _p_P_T)) : coq_builtins.prop__t :=
              (Is_true ((_p_P_valid (abst_diag s1))) /\
                 Is_true ((_p_P_valid (abst_diag s2))) /\
                   Is_true ((_p_V_consistency_rule (abst_value s1)
                              (abst_value s2)))) \/
                (~Is_true (((_p_P_valid (abst_diag s1)))) /\
                   ~Is_true (((_p_P_valid (abst_diag s2))))).
            (* Theorem's body. *)
            Theorem for_zenon___C_1_2_1_1_LEMMA :
            ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
               (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
            %%end-auto-proof
            Theorem __C_1_2_1_1_LEMMA :
              ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
                 (abst_compatible (abst_voter va vb vc)
                   (abst_voter vc va vb))).
            assert (__force_use_H211 := H211).
            assert (__force_use_H21 := H21).
            assert (__force_use_H2 := H2).
            apply for_zenon___C_1_2_1_1_LEMMA;
            auto.
            Qed.
            End __C_1_2_1_1.
          Section __C_1_2_1_2.
            Variable H212 : ~Is_true (((_p_V_consistency_rule vb vc))).
            Section __C_1_2_1_2_1.
              Section __C_1_2_1_2_1_1.
                %%begin-auto-proof
                %%location: [File "vote.fcl", line 527, characters 12-52]
                %%name: for_zenon___C_1_2_1_2_1_1_LEMMA
                
                
                
                (* Methods to use for automated proof. *)
                (* For species parameter method used via "by property vote#V!consistency_rule_symmetric". *)
                Parameter _p_V_consistency_rule_symmetric :
                  forall a  b : _p_V_T,
                    Is_true ((_p_V_consistency_rule a b)) ->
                      Is_true ((_p_V_consistency_rule b a)).
                (* Theorem's body. *)
                Theorem for_zenon___C_1_2_1_2_1_1_LEMMA :
                Is_true ((_p_V_consistency_rule vb va)) ->
                  Is_true ((_p_V_consistency_rule va vb)).
                %%end-auto-proof
                Theorem __C_1_2_1_2_1_1_LEMMA :
                  Is_true ((_p_V_consistency_rule vb va)) ->
                    Is_true ((_p_V_consistency_rule va vb)).
                assert (__force_use_H212 := H212).
                assert (__force_use_H21 := H21).
                assert (__force_use_H2 := H2).
                apply for_zenon___C_1_2_1_2_1_1_LEMMA;
                auto.
                Qed.
                End __C_1_2_1_2_1_1.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 528, characters 20-46]
              %%name: for_zenon___C_1_2_1_2_1_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <6>1. *)
              Parameter __C_1_2_1_2_1_1_LEMMA :
                (Is_true ((_p_V_consistency_rule vb va)) ->
                   Is_true ((_p_V_consistency_rule va vb))).
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_2_1_LEMMA :
              ~Is_true (((_p_V_consistency_rule vb va))).
              %%end-auto-proof
              Theorem __C_1_2_1_2_1_LEMMA :
                ~Is_true (((_p_V_consistency_rule vb va))).
              assert (__force_use_H212 := H212).
              assert (__force_use_H21 := H21).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_1_2_1_LEMMA;
              auto.
              Qed.
              End __C_1_2_1_2_1.
            Section __C_1_2_1_2_2.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 530, characters 11-61]
              %%name: for_zenon___C_1_2_1_2_2_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* For hypothesis "H21". *)
              Parameter H21 : Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H212". *)
              Parameter H212 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_match_c2". *)
              Parameter abst_vote_match_c2 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v3))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_2 _p_E_range_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_2_2_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter va vb vc)) vc))).
              %%end-auto-proof
              Theorem __C_1_2_1_2_2_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_value (abst_voter va vb vc)) vc))).
              assert (__force_use_H212 := H212).
              assert (__force_use_H21 := H21).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_1_2_2_LEMMA;
              auto.
              Qed.
              End __C_1_2_1_2_2.
            Section __C_1_2_1_2_3.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 532, characters 11-67]
              %%name: for_zenon___C_1_2_1_2_3_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H21". *)
              Parameter H21 : Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H212". *)
              Parameter H212 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For step <5>1. *)
              Parameter __C_1_2_1_2_1_LEMMA :
                (~Is_true (((_p_V_consistency_rule vb va)))).
              (* For method of Self used via "by property !vote_match_c1". *)
              Parameter abst_vote_match_c1 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v2))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1 _p_E_range_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_2_3_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter vb va vc)) va))).
              %%end-auto-proof
              Theorem __C_1_2_1_2_3_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_value (abst_voter vb va vc)) va))).
              assert (__force_use_H212 := H212).
              assert (__force_use_H21 := H21).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_1_2_3_LEMMA;
              auto.
              Qed.
              End __C_1_2_1_2_3.
            Section __C_1_2_1_2_4.
              Section __C_1_2_1_2_4_1.
                %%begin-auto-proof
                %%location: [File "vote.fcl", line 535, characters 12-52]
                %%name: for_zenon___C_1_2_1_2_4_1_LEMMA
                
                
                
                (* Methods to use for automated proof. *)
                (* For species parameter method used via "by property vote#V!consistency_rule_symmetric". *)
                Parameter _p_V_consistency_rule_symmetric :
                  forall a  b : _p_V_T,
                    Is_true ((_p_V_consistency_rule a b)) ->
                      Is_true ((_p_V_consistency_rule b a)).
                (* Theorem's body. *)
                Theorem for_zenon___C_1_2_1_2_4_1_LEMMA :
                Is_true ((_p_V_consistency_rule vc vb)) ->
                  Is_true ((_p_V_consistency_rule vb vc)).
                %%end-auto-proof
                Theorem __C_1_2_1_2_4_1_LEMMA :
                  Is_true ((_p_V_consistency_rule vc vb)) ->
                    Is_true ((_p_V_consistency_rule vb vc)).
                assert (__force_use_H212 := H212).
                assert (__force_use_H21 := H21).
                assert (__force_use_H2 := H2).
                apply for_zenon___C_1_2_1_2_4_1_LEMMA;
                auto.
                Qed.
                End __C_1_2_1_2_4_1.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 536, characters 20-48]
              %%name: for_zenon___C_1_2_1_2_4_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <6>1. *)
              Parameter __C_1_2_1_2_4_1_LEMMA :
                (Is_true ((_p_V_consistency_rule vc vb)) ->
                   Is_true ((_p_V_consistency_rule vb vc))).
              (* For hypothesis "H212". *)
              Parameter H212 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_2_4_LEMMA :
              ~Is_true (((_p_V_consistency_rule vc vb))).
              %%end-auto-proof
              Theorem __C_1_2_1_2_4_LEMMA :
                ~Is_true (((_p_V_consistency_rule vc vb))).
              assert (__force_use_H212 := H212).
              assert (__force_use_H21 := H21).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_1_2_4_LEMMA;
              auto.
              Qed.
              End __C_1_2_1_2_4.
            Section __C_1_2_1_2_5.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 538, character 11, line 539, character 67]
              %%name: for_zenon___C_1_2_1_2_5_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* For hypothesis "H21". *)
              Parameter H21 : Is_true (((_p_V_consistency_rule va vc))).
              (* For step <5>4. *)
              Parameter __C_1_2_1_2_4_LEMMA :
                (~Is_true (((_p_V_consistency_rule vc vb)))).
              (* For method of Self used via "by property !vote_match_c3". *)
              Parameter abst_vote_match_c3 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_3 _p_E_range_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_2_5_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter vc va vb)) vc))).
              %%end-auto-proof
              Theorem __C_1_2_1_2_5_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_value (abst_voter vc va vb)) vc))).
              assert (__force_use_H212 := H212).
              assert (__force_use_H21 := H21).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_1_2_5_LEMMA;
              auto.
              Qed.
              End __C_1_2_1_2_5.
            Section __C_1_2_1_2_6.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 543, characters 11-61]
              %%name: for_zenon___C_1_2_1_2_6_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* For hypothesis "H21". *)
              Parameter H21 : Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H212". *)
              Parameter H212 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_match_c2". *)
              Parameter abst_vote_match_c2 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v3))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_2 _p_E_range_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_2_6_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter va vb vc))
                          (_p_P_constr _p_C_capt_2 _p_E_range_match)))).
              %%end-auto-proof
              Theorem __C_1_2_1_2_6_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_diag (abst_voter va vb vc))
                            (_p_P_constr _p_C_capt_2 _p_E_range_match)))).
              assert (__force_use_H212 := H212).
              assert (__force_use_H21 := H21).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_1_2_6_LEMMA;
              auto.
              Qed.
              End __C_1_2_1_2_6.
            Section __C_1_2_1_2_7.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 545, characters 11-79]
              %%name: for_zenon___C_1_2_1_2_7_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>6. *)
              Parameter __C_1_2_1_2_6_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter va vb vc))
                             (_p_P_constr _p_C_capt_2 _p_E_range_match))))).
              (* For species parameter method used via "by property vote#P!range_match_is_valid". *)
              Parameter _p_P_range_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_range_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_2_7_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))).
              %%end-auto-proof
              Theorem __C_1_2_1_2_7_LEMMA :
                Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))).
              assert (__force_use_H212 := H212).
              assert (__force_use_H21 := H21).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_1_2_7_LEMMA;
              auto.
              Qed.
              End __C_1_2_1_2_7.
            Section __C_1_2_1_2_8.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 549, characters 10-66]
              %%name: for_zenon___C_1_2_1_2_8_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H21". *)
              Parameter H21 : Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H212". *)
              Parameter H212 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For step <5>1. *)
              Parameter __C_1_2_1_2_1_LEMMA :
                (~Is_true (((_p_V_consistency_rule vb va)))).
              (* For method of Self used via "by property !vote_match_c1". *)
              Parameter abst_vote_match_c1 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v2))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1 _p_E_range_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_2_8_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vb va vc))
                          (_p_P_constr _p_C_capt_1 _p_E_range_match)))).
              %%end-auto-proof
              Theorem __C_1_2_1_2_8_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_diag (abst_voter vb va vc))
                            (_p_P_constr _p_C_capt_1 _p_E_range_match)))).
              assert (__force_use_H212 := H212).
              assert (__force_use_H21 := H21).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_1_2_8_LEMMA;
              auto.
              Qed.
              End __C_1_2_1_2_8.
            Section __C_1_2_1_2_9.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 551, characters 10-78]
              %%name: for_zenon___C_1_2_1_2_9_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>8. *)
              Parameter __C_1_2_1_2_8_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vb va vc))
                             (_p_P_constr _p_C_capt_1 _p_E_range_match))))).
              (* For species parameter method used via "by property vote#P!range_match_is_valid". *)
              Parameter _p_P_range_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_range_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_2_9_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc))))).
              %%end-auto-proof
              Theorem __C_1_2_1_2_9_LEMMA :
                Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc))))).
              assert (__force_use_H212 := H212).
              assert (__force_use_H21 := H21).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_1_2_9_LEMMA;
              auto.
              Qed.
              End __C_1_2_1_2_9.
            Section __C_1_2_1_2_10.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 555, character 10, line 556, character 63]
              %%name: for_zenon___C_1_2_1_2_10_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* For hypothesis "H21". *)
              Parameter H21 : Is_true (((_p_V_consistency_rule va vc))).
              (* For step <5>4. *)
              Parameter __C_1_2_1_2_4_LEMMA :
                (~Is_true (((_p_V_consistency_rule vc vb)))).
              (* For method of Self used via "by property !vote_match_c3". *)
              Parameter abst_vote_match_c3 :
                forall v1  v2  v3 : _p_V_T,
                  (Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v1))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_3 _p_E_range_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_2_10_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vc va vb))
                          (_p_P_constr _p_C_capt_3 _p_E_range_match)))).
              %%end-auto-proof
              Theorem __C_1_2_1_2_10_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_diag (abst_voter vc va vb))
                            (_p_P_constr _p_C_capt_3 _p_E_range_match)))).
              assert (__force_use_H212 := H212).
              assert (__force_use_H21 := H21).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_1_2_10_LEMMA;
              auto.
              Qed.
              End __C_1_2_1_2_10.
            Section __C_1_2_1_2_11.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 558, characters 10-79]
              %%name: for_zenon___C_1_2_1_2_11_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>10. *)
              Parameter __C_1_2_1_2_10_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vc va vb))
                             (_p_P_constr _p_C_capt_3 _p_E_range_match))))).
              (* For species parameter method used via "by property vote#P!range_match_is_valid". *)
              Parameter _p_P_range_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_range_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_1_2_11_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb))))).
              %%end-auto-proof
              Theorem __C_1_2_1_2_11_LEMMA :
                Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb))))).
              assert (__force_use_H212 := H212).
              assert (__force_use_H21 := H21).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_1_2_11_LEMMA;
              auto.
              Qed.
              End __C_1_2_1_2_11.
            %%begin-auto-proof
            %%location: [File "vote.fcl", line 561, character 18, line 564, character 33]
            %%name: for_zenon___C_1_2_1_2_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For step <5>2. *)
            Parameter __C_1_2_1_2_2_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter va vb vc)) vc)))).
            (* For step <5>3. *)
            Parameter __C_1_2_1_2_3_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter vb va vc)) va)))).
            (* For step <5>5. *)
            Parameter __C_1_2_1_2_5_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter vc va vb)) vc)))).
            (* For step <5>7. *)
            Parameter __C_1_2_1_2_7_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc)))))).
            (* For step <5>9. *)
            Parameter __C_1_2_1_2_9_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc)))))).
            (* For step <5>11. *)
            Parameter __C_1_2_1_2_11_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb)))))).
            (* For hypothesis "H21". *)
            Parameter H21 : Is_true (((_p_V_consistency_rule va vc))).
            (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
            Parameter abst_consistency_rule_is_symmetric :
              forall v1  v2 : _p_V_T,
                Is_true ((_p_V_consistency_rule v1 v2)) ->
                  Is_true ((_p_V_consistency_rule v2 v1)).
            (* For species parameter method used via "by property vote#V!consistency_rule_reflexive". *)
            Parameter _p_V_consistency_rule_reflexive :
              forall a : _p_V_T, Is_true ((_p_V_consistency_rule a a)).
            (* For method of Self used via "by definition of !compatible". *)
            Definition abst_compatible (s1 : (Datatypes.prod _p_V_T _p_P_T))
              (s2 : (Datatypes.prod _p_V_T _p_P_T)) : coq_builtins.prop__t :=
              (Is_true ((_p_P_valid (abst_diag s1))) /\
                 Is_true ((_p_P_valid (abst_diag s2))) /\
                   Is_true ((_p_V_consistency_rule (abst_value s1)
                              (abst_value s2)))) \/
                (~Is_true (((_p_P_valid (abst_diag s1)))) /\
                   ~Is_true (((_p_P_valid (abst_diag s2))))).
            (* Theorem's body. *)
            Theorem for_zenon___C_1_2_1_2_LEMMA :
            ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
               (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
            %%end-auto-proof
            Theorem __C_1_2_1_2_LEMMA :
              ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
                 (abst_compatible (abst_voter va vb vc)
                   (abst_voter vc va vb))).
            assert (__force_use_H212 := H212).
            assert (__force_use_H21 := H21).
            assert (__force_use_H2 := H2).
            apply for_zenon___C_1_2_1_2_LEMMA;
            auto.
            Qed.
            End __C_1_2_1_2.
          %%begin-auto-proof
          %%location: [File "vote.fcl", line 566, characters 17-55]
          %%name: for_zenon___C_1_2_1_LEMMA
          
          
          
          (* Methods to use for automated proof. *)
          (* For step <4>1. *)
          Parameter __C_1_2_1_1_LEMMA :
            (Is_true (((_p_V_consistency_rule vb vc)))) -> (((abst_compatible
                                                               (abst_voter va
                                                                 vb vc)
                                                               (abst_voter vb
                                                                 va vc)) /\
                                                               (abst_compatible
                                                                 (abst_voter
                                                                   va vb vc)
                                                                 (abst_voter
                                                                   vc va vb)))).
          (* For step <4>2. *)
          Parameter __C_1_2_1_2_LEMMA :
            (~Is_true (((_p_V_consistency_rule vb vc)))) -> (((abst_compatible
                                                                (abst_voter
                                                                  va vb vc)
                                                                (abst_voter
                                                                  vb va vc)) /\
                                                                (abst_compatible
                                                                  (abst_voter
                                                                    va vb vc)
                                                                  (abst_voter
                                                                    vc va vb)))).
          (* For method of Self used via "by property !compatible". *)
          Parameter abst_compatible :
            (Datatypes.prod _p_V_T _p_P_T) ->
              (Datatypes.prod _p_V_T _p_P_T) -> coq_builtins.prop__t.
          (* Theorem's body. *)
          Theorem for_zenon___C_1_2_1_LEMMA :
          ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
             (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
          %%end-auto-proof
          Theorem __C_1_2_1_LEMMA :
            ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
               (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
          assert (__force_use_H21 := H21).
          assert (__force_use_H2 := H2).
          apply for_zenon___C_1_2_1_LEMMA;
          auto.
          Qed.
          End __C_1_2_1.
        Section __C_1_2_2.
          Variable H22 : ~Is_true (((_p_V_consistency_rule va vc))).
          Section __C_1_2_2_1.
            Variable H221 : Is_true (((_p_V_consistency_rule vb vc))).
            Section __C_1_2_2_1_1.
              Section __C_1_2_2_1_1_1.
                %%begin-auto-proof
                %%location: [File "vote.fcl", line 584, characters 12-52]
                %%name: for_zenon___C_1_2_2_1_1_1_LEMMA
                
                
                
                (* Methods to use for automated proof. *)
                (* For species parameter method used via "by property vote#V!consistency_rule_symmetric". *)
                Parameter _p_V_consistency_rule_symmetric :
                  forall a  b : _p_V_T,
                    Is_true ((_p_V_consistency_rule a b)) ->
                      Is_true ((_p_V_consistency_rule b a)).
                (* Theorem's body. *)
                Theorem for_zenon___C_1_2_2_1_1_1_LEMMA :
                Is_true ((_p_V_consistency_rule vb va)) ->
                  Is_true ((_p_V_consistency_rule va vb)).
                %%end-auto-proof
                Theorem __C_1_2_2_1_1_1_LEMMA :
                  Is_true ((_p_V_consistency_rule vb va)) ->
                    Is_true ((_p_V_consistency_rule va vb)).
                assert (__force_use_H221 := H221).
                assert (__force_use_H22 := H22).
                assert (__force_use_H2 := H2).
                apply for_zenon___C_1_2_2_1_1_1_LEMMA;
                auto.
                Qed.
                End __C_1_2_2_1_1_1.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 585, characters 20-46]
              %%name: for_zenon___C_1_2_2_1_1_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <6>1. *)
              Parameter __C_1_2_2_1_1_1_LEMMA :
                (Is_true ((_p_V_consistency_rule vb va)) ->
                   Is_true ((_p_V_consistency_rule va vb))).
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_1_1_LEMMA :
              ~Is_true (((_p_V_consistency_rule vb va))).
              %%end-auto-proof
              Theorem __C_1_2_2_1_1_LEMMA :
                ~Is_true (((_p_V_consistency_rule vb va))).
              assert (__force_use_H221 := H221).
              assert (__force_use_H22 := H22).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_2_1_1_LEMMA;
              auto.
              Qed.
              End __C_1_2_2_1_1.
            Section __C_1_2_2_1_2.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 587, characters 11-61]
              %%name: for_zenon___C_1_2_2_1_2_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* For hypothesis "H22". *)
              Parameter H22 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H221". *)
              Parameter H221 : Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_match_c1". *)
              Parameter abst_vote_match_c1 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v2))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1 _p_E_range_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_1_2_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter va vb vc)) vb))).
              %%end-auto-proof
              Theorem __C_1_2_2_1_2_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_value (abst_voter va vb vc)) vb))).
              assert (__force_use_H221 := H221).
              assert (__force_use_H22 := H22).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_2_1_2_LEMMA;
              auto.
              Qed.
              End __C_1_2_2_1_2.
            Section __C_1_2_2_1_3.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 589, characters 11-67]
              %%name: for_zenon___C_1_2_2_1_3_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H22". *)
              Parameter H22 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H221". *)
              Parameter H221 : Is_true (((_p_V_consistency_rule vb vc))).
              (* For step <5>1. *)
              Parameter __C_1_2_2_1_1_LEMMA :
                (~Is_true (((_p_V_consistency_rule vb va)))).
              (* For method of Self used via "by property !vote_match_c2". *)
              Parameter abst_vote_match_c2 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v3))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_2 _p_E_range_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_1_3_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter vb va vc)) vc))).
              %%end-auto-proof
              Theorem __C_1_2_2_1_3_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_value (abst_voter vb va vc)) vc))).
              assert (__force_use_H221 := H221).
              assert (__force_use_H22 := H22).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_2_1_3_LEMMA;
              auto.
              Qed.
              End __C_1_2_2_1_3.
            Section __C_1_2_2_1_4.
              Section __C_1_2_2_1_4_1.
                %%begin-auto-proof
                %%location: [File "vote.fcl", line 592, characters 12-52]
                %%name: for_zenon___C_1_2_2_1_4_1_LEMMA
                
                
                
                (* Methods to use for automated proof. *)
                (* For species parameter method used via "by property vote#V!consistency_rule_symmetric". *)
                Parameter _p_V_consistency_rule_symmetric :
                  forall a  b : _p_V_T,
                    Is_true ((_p_V_consistency_rule a b)) ->
                      Is_true ((_p_V_consistency_rule b a)).
                (* Theorem's body. *)
                Theorem for_zenon___C_1_2_2_1_4_1_LEMMA :
                Is_true ((_p_V_consistency_rule vc va)) ->
                  Is_true ((_p_V_consistency_rule va vc)).
                %%end-auto-proof
                Theorem __C_1_2_2_1_4_1_LEMMA :
                  Is_true ((_p_V_consistency_rule vc va)) ->
                    Is_true ((_p_V_consistency_rule va vc)).
                assert (__force_use_H221 := H221).
                assert (__force_use_H22 := H22).
                assert (__force_use_H2 := H2).
                apply for_zenon___C_1_2_2_1_4_1_LEMMA;
                auto.
                Qed.
                End __C_1_2_2_1_4_1.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 593, characters 20-47]
              %%name: for_zenon___C_1_2_2_1_4_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <6>1. *)
              Parameter __C_1_2_2_1_4_1_LEMMA :
                (Is_true ((_p_V_consistency_rule vc va)) ->
                   Is_true ((_p_V_consistency_rule va vc))).
              (* For hypothesis "H22". *)
              Parameter H22 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_1_4_LEMMA :
              ~Is_true (((_p_V_consistency_rule vc va))).
              %%end-auto-proof
              Theorem __C_1_2_2_1_4_LEMMA :
                ~Is_true (((_p_V_consistency_rule vc va))).
              assert (__force_use_H221 := H221).
              assert (__force_use_H22 := H22).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_2_1_4_LEMMA;
              auto.
              Qed.
              End __C_1_2_2_1_4.
            Section __C_1_2_2_1_5.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 595, character 11, line 596, character 67]
              %%name: for_zenon___C_1_2_2_1_5_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* For hypothesis "H221". *)
              Parameter H221 : Is_true (((_p_V_consistency_rule vb vc))).
              (* For step <5>4. *)
              Parameter __C_1_2_2_1_4_LEMMA :
                (~Is_true (((_p_V_consistency_rule vc va)))).
              (* For method of Self used via "by property !vote_match_c2". *)
              Parameter abst_vote_match_c2 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v3))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_2 _p_E_range_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_1_5_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter vc va vb)) vb))).
              %%end-auto-proof
              Theorem __C_1_2_2_1_5_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_value (abst_voter vc va vb)) vb))).
              assert (__force_use_H221 := H221).
              assert (__force_use_H22 := H22).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_2_1_5_LEMMA;
              auto.
              Qed.
              End __C_1_2_2_1_5.
            Section __C_1_2_2_1_6.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 600, characters 11-61]
              %%name: for_zenon___C_1_2_2_1_6_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* For hypothesis "H22". *)
              Parameter H22 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H221". *)
              Parameter H221 : Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_match_c1". *)
              Parameter abst_vote_match_c1 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v2))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_1 _p_E_range_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_1_6_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter va vb vc))
                          (_p_P_constr _p_C_capt_1 _p_E_range_match)))).
              %%end-auto-proof
              Theorem __C_1_2_2_1_6_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_diag (abst_voter va vb vc))
                            (_p_P_constr _p_C_capt_1 _p_E_range_match)))).
              assert (__force_use_H221 := H221).
              assert (__force_use_H22 := H22).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_2_1_6_LEMMA;
              auto.
              Qed.
              End __C_1_2_2_1_6.
            Section __C_1_2_2_1_7.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 602, characters 11-79]
              %%name: for_zenon___C_1_2_2_1_7_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>6. *)
              Parameter __C_1_2_2_1_6_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter va vb vc))
                             (_p_P_constr _p_C_capt_1 _p_E_range_match))))).
              (* For species parameter method used via "by property vote#P!range_match_is_valid". *)
              Parameter _p_P_range_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_range_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_1_7_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))).
              %%end-auto-proof
              Theorem __C_1_2_2_1_7_LEMMA :
                Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))).
              assert (__force_use_H221 := H221).
              assert (__force_use_H22 := H22).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_2_1_7_LEMMA;
              auto.
              Qed.
              End __C_1_2_2_1_7.
            Section __C_1_2_2_1_8.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 606, characters 10-66]
              %%name: for_zenon___C_1_2_2_1_8_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H22". *)
              Parameter H22 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H221". *)
              Parameter H221 : Is_true (((_p_V_consistency_rule vb vc))).
              (* For step <5>1. *)
              Parameter __C_1_2_2_1_1_LEMMA :
                (~Is_true (((_p_V_consistency_rule vb va)))).
              (* For method of Self used via "by property !vote_match_c2". *)
              Parameter abst_vote_match_c2 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v3))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_2 _p_E_range_match))))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_1_8_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vb va vc))
                          (_p_P_constr _p_C_capt_2 _p_E_range_match)))).
              %%end-auto-proof
              Theorem __C_1_2_2_1_8_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_diag (abst_voter vb va vc))
                            (_p_P_constr _p_C_capt_2 _p_E_range_match)))).
              assert (__force_use_H221 := H221).
              assert (__force_use_H22 := H22).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_2_1_8_LEMMA;
              auto.
              Qed.
              End __C_1_2_2_1_8.
            Section __C_1_2_2_1_9.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 608, characters 10-78]
              %%name: for_zenon___C_1_2_2_1_9_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>8. *)
              Parameter __C_1_2_2_1_8_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vb va vc))
                             (_p_P_constr _p_C_capt_2 _p_E_range_match))))).
              (* For species parameter method used via "by property vote#P!range_match_is_valid". *)
              Parameter _p_P_range_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_range_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_1_9_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc))))).
              %%end-auto-proof
              Theorem __C_1_2_2_1_9_LEMMA :
                Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc))))).
              assert (__force_use_H221 := H221).
              assert (__force_use_H22 := H22).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_2_1_9_LEMMA;
              auto.
              Qed.
              End __C_1_2_2_1_9.
            Section __C_1_2_2_1_10.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 612, character 10, line 613, character 63]
              %%name: for_zenon___C_1_2_2_1_10_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* For hypothesis "H221". *)
              Parameter H221 : Is_true (((_p_V_consistency_rule vb vc))).
              (* For step <5>4. *)
              Parameter __C_1_2_2_1_4_LEMMA :
                (~Is_true (((_p_V_consistency_rule vc va)))).
              (* For method of Self used via "by property !vote_match_c2". *)
              Parameter abst_vote_match_c2 :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    (Is_true ((((basics._equal_ _)
                                 (abst_value (abst_voter v1 v2 v3)) v3))) /\
                       Is_true ((((basics._equal_ _)
                                   (abst_diag (abst_voter v1 v2 v3))
                                   (_p_P_constr _p_C_capt_2 _p_E_range_match))))).
              (* For method of Self used via "by property !consistency_rule_is_symmetric". *)
              Parameter abst_consistency_rule_is_symmetric :
                forall v1  v2 : _p_V_T,
                  Is_true ((_p_V_consistency_rule v1 v2)) ->
                    Is_true ((_p_V_consistency_rule v2 v1)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_1_10_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vc va vb))
                          (_p_P_constr _p_C_capt_2 _p_E_range_match)))).
              %%end-auto-proof
              Theorem __C_1_2_2_1_10_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_diag (abst_voter vc va vb))
                            (_p_P_constr _p_C_capt_2 _p_E_range_match)))).
              assert (__force_use_H221 := H221).
              assert (__force_use_H22 := H22).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_2_1_10_LEMMA;
              auto.
              Qed.
              End __C_1_2_2_1_10.
            Section __C_1_2_2_1_11.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 615, characters 10-79]
              %%name: for_zenon___C_1_2_2_1_11_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>10. *)
              Parameter __C_1_2_2_1_10_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vc va vb))
                             (_p_P_constr _p_C_capt_2 _p_E_range_match))))).
              (* For species parameter method used via "by property vote#P!range_match_is_valid". *)
              Parameter _p_P_range_match_is_valid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_range_match)) ->
                    Is_true ((_p_P_valid x)).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_1_11_LEMMA :
              Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb))))).
              %%end-auto-proof
              Theorem __C_1_2_2_1_11_LEMMA :
                Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb))))).
              assert (__force_use_H221 := H221).
              assert (__force_use_H22 := H22).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_2_1_11_LEMMA;
              auto.
              Qed.
              End __C_1_2_2_1_11.
            %%begin-auto-proof
            %%location: [File "vote.fcl", line 618, character 18, line 620, character 38]
            %%name: for_zenon___C_1_2_2_1_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For step <5>2. *)
            Parameter __C_1_2_2_1_2_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter va vb vc)) vb)))).
            (* For step <5>3. *)
            Parameter __C_1_2_2_1_3_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter vb va vc)) vc)))).
            (* For step <5>5. *)
            Parameter __C_1_2_2_1_5_LEMMA :
              (Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter vc va vb)) vb)))).
            (* For step <5>7. *)
            Parameter __C_1_2_2_1_7_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc)))))).
            (* For step <5>9. *)
            Parameter __C_1_2_2_1_9_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc)))))).
            (* For step <5>11. *)
            Parameter __C_1_2_2_1_11_LEMMA :
              (Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb)))))).
            (* For hypothesis "H221". *)
            Parameter H221 : Is_true (((_p_V_consistency_rule vb vc))).
            (* For species parameter method used via "by property vote#V!consistency_rule_reflexive". *)
            Parameter _p_V_consistency_rule_reflexive :
              forall a : _p_V_T, Is_true ((_p_V_consistency_rule a a)).
            (* For method of Self used via "by definition of !compatible". *)
            Definition abst_compatible (s1 : (Datatypes.prod _p_V_T _p_P_T))
              (s2 : (Datatypes.prod _p_V_T _p_P_T)) : coq_builtins.prop__t :=
              (Is_true ((_p_P_valid (abst_diag s1))) /\
                 Is_true ((_p_P_valid (abst_diag s2))) /\
                   Is_true ((_p_V_consistency_rule (abst_value s1)
                              (abst_value s2)))) \/
                (~Is_true (((_p_P_valid (abst_diag s1)))) /\
                   ~Is_true (((_p_P_valid (abst_diag s2))))).
            (* Theorem's body. *)
            Theorem for_zenon___C_1_2_2_1_LEMMA :
            ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
               (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
            %%end-auto-proof
            Theorem __C_1_2_2_1_LEMMA :
              ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
                 (abst_compatible (abst_voter va vb vc)
                   (abst_voter vc va vb))).
            assert (__force_use_H221 := H221).
            assert (__force_use_H22 := H22).
            assert (__force_use_H2 := H2).
            apply for_zenon___C_1_2_2_1_LEMMA;
            auto.
            Qed.
            End __C_1_2_2_1.
          Section __C_1_2_2_2.
            Variable H222 : ~Is_true (((_p_V_consistency_rule vb vc))).
            Section __C_1_2_2_2_1.
              Section __C_1_2_2_2_1_1.
                %%begin-auto-proof
                %%location: [File "vote.fcl", line 631, characters 12-52]
                %%name: for_zenon___C_1_2_2_2_1_1_LEMMA
                
                
                
                (* Methods to use for automated proof. *)
                (* For species parameter method used via "by property vote#V!consistency_rule_symmetric". *)
                Parameter _p_V_consistency_rule_symmetric :
                  forall a  b : _p_V_T,
                    Is_true ((_p_V_consistency_rule a b)) ->
                      Is_true ((_p_V_consistency_rule b a)).
                (* Theorem's body. *)
                Theorem for_zenon___C_1_2_2_2_1_1_LEMMA :
                Is_true ((_p_V_consistency_rule vb va)) ->
                  Is_true ((_p_V_consistency_rule va vb)).
                %%end-auto-proof
                Theorem __C_1_2_2_2_1_1_LEMMA :
                  Is_true ((_p_V_consistency_rule vb va)) ->
                    Is_true ((_p_V_consistency_rule va vb)).
                assert (__force_use_H222 := H222).
                assert (__force_use_H22 := H22).
                assert (__force_use_H2 := H2).
                apply for_zenon___C_1_2_2_2_1_1_LEMMA;
                auto.
                Qed.
                End __C_1_2_2_2_1_1.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 632, characters 20-46]
              %%name: for_zenon___C_1_2_2_2_1_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <6>1. *)
              Parameter __C_1_2_2_2_1_1_LEMMA :
                (Is_true ((_p_V_consistency_rule vb va)) ->
                   Is_true ((_p_V_consistency_rule va vb))).
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_2_1_LEMMA :
              ~Is_true (((_p_V_consistency_rule vb va))).
              %%end-auto-proof
              Theorem __C_1_2_2_2_1_LEMMA :
                ~Is_true (((_p_V_consistency_rule vb va))).
              assert (__force_use_H222 := H222).
              assert (__force_use_H22 := H22).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_2_2_1_LEMMA;
              auto.
              Qed.
              End __C_1_2_2_2_1.
            Section __C_1_2_2_2_2.
              Section __C_1_2_2_2_2_1.
                %%begin-auto-proof
                %%location: [File "vote.fcl", line 635, characters 12-52]
                %%name: for_zenon___C_1_2_2_2_2_1_LEMMA
                
                
                
                (* Methods to use for automated proof. *)
                (* For species parameter method used via "by property vote#V!consistency_rule_symmetric". *)
                Parameter _p_V_consistency_rule_symmetric :
                  forall a  b : _p_V_T,
                    Is_true ((_p_V_consistency_rule a b)) ->
                      Is_true ((_p_V_consistency_rule b a)).
                (* Theorem's body. *)
                Theorem for_zenon___C_1_2_2_2_2_1_LEMMA :
                Is_true ((_p_V_consistency_rule vc va)) ->
                  Is_true ((_p_V_consistency_rule va vc)).
                %%end-auto-proof
                Theorem __C_1_2_2_2_2_1_LEMMA :
                  Is_true ((_p_V_consistency_rule vc va)) ->
                    Is_true ((_p_V_consistency_rule va vc)).
                assert (__force_use_H222 := H222).
                assert (__force_use_H22 := H22).
                assert (__force_use_H2 := H2).
                apply for_zenon___C_1_2_2_2_2_1_LEMMA;
                auto.
                Qed.
                End __C_1_2_2_2_2_1.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 636, characters 20-47]
              %%name: for_zenon___C_1_2_2_2_2_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <6>1. *)
              Parameter __C_1_2_2_2_2_1_LEMMA :
                (Is_true ((_p_V_consistency_rule vc va)) ->
                   Is_true ((_p_V_consistency_rule va vc))).
              (* For hypothesis "H22". *)
              Parameter H22 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_2_2_LEMMA :
              ~Is_true (((_p_V_consistency_rule vc va))).
              %%end-auto-proof
              Theorem __C_1_2_2_2_2_LEMMA :
                ~Is_true (((_p_V_consistency_rule vc va))).
              assert (__force_use_H222 := H222).
              assert (__force_use_H22 := H22).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_2_2_2_LEMMA;
              auto.
              Qed.
              End __C_1_2_2_2_2.
            Section __C_1_2_2_2_3.
              Section __C_1_2_2_2_3_1.
                %%begin-auto-proof
                %%location: [File "vote.fcl", line 639, characters 12-52]
                %%name: for_zenon___C_1_2_2_2_3_1_LEMMA
                
                
                
                (* Methods to use for automated proof. *)
                (* For species parameter method used via "by property vote#V!consistency_rule_symmetric". *)
                Parameter _p_V_consistency_rule_symmetric :
                  forall a  b : _p_V_T,
                    Is_true ((_p_V_consistency_rule a b)) ->
                      Is_true ((_p_V_consistency_rule b a)).
                (* Theorem's body. *)
                Theorem for_zenon___C_1_2_2_2_3_1_LEMMA :
                Is_true ((_p_V_consistency_rule vc vb)) ->
                  Is_true ((_p_V_consistency_rule vb vc)).
                %%end-auto-proof
                Theorem __C_1_2_2_2_3_1_LEMMA :
                  Is_true ((_p_V_consistency_rule vc vb)) ->
                    Is_true ((_p_V_consistency_rule vb vc)).
                assert (__force_use_H222 := H222).
                assert (__force_use_H22 := H22).
                assert (__force_use_H2 := H2).
                apply for_zenon___C_1_2_2_2_3_1_LEMMA;
                auto.
                Qed.
                End __C_1_2_2_2_3_1.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 640, characters 20-48]
              %%name: for_zenon___C_1_2_2_2_3_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <6>1. *)
              Parameter __C_1_2_2_2_3_1_LEMMA :
                (Is_true ((_p_V_consistency_rule vc vb)) ->
                   Is_true ((_p_V_consistency_rule vb vc))).
              (* For hypothesis "H222". *)
              Parameter H222 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_2_3_LEMMA :
              ~Is_true (((_p_V_consistency_rule vc vb))).
              %%end-auto-proof
              Theorem __C_1_2_2_2_3_LEMMA :
                ~Is_true (((_p_V_consistency_rule vc vb))).
              assert (__force_use_H222 := H222).
              assert (__force_use_H22 := H22).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_2_2_3_LEMMA;
              auto.
              Qed.
              End __C_1_2_2_2_3.
            Section __C_1_2_2_2_4.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 643, characters 10-60]
              %%name: for_zenon___C_1_2_2_2_4_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* For hypothesis "H22". *)
              Parameter H22 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H222". *)
              Parameter H222 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For method of Self used via "by property !vote_no_match". *)
              Parameter abst_vote_no_match :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    Is_true ((((basics._equal_ _)
                                (abst_diag (abst_voter v1 v2 v3))
                                (_p_P_constr _p_C_capt_1 _p_E_no_match)))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_2_4_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter va vb vc))
                          (_p_P_constr _p_C_capt_1 _p_E_no_match)))).
              %%end-auto-proof
              Theorem __C_1_2_2_2_4_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_diag (abst_voter va vb vc))
                            (_p_P_constr _p_C_capt_1 _p_E_no_match)))).
              assert (__force_use_H222 := H222).
              assert (__force_use_H22 := H22).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_2_2_4_LEMMA;
              auto.
              Qed.
              End __C_1_2_2_2_4.
            Section __C_1_2_2_2_5.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 645, characters 10-54]
              %%name: for_zenon___C_1_2_2_2_5_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>4. *)
              Parameter __C_1_2_2_2_4_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter va vb vc))
                             (_p_P_constr _p_C_capt_1 _p_E_no_match))))).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_2_5_LEMMA :
              Is_true (((_p_E_equal
                          (_p_P_prj_b (abst_diag (abst_voter va vb vc)))
                          _p_E_no_match))).
              %%end-auto-proof
              Theorem __C_1_2_2_2_5_LEMMA :
                Is_true (((_p_E_equal
                            (_p_P_prj_b (abst_diag (abst_voter va vb vc)))
                            _p_E_no_match))).
              assert (__force_use_H222 := H222).
              assert (__force_use_H22 := H22).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_2_2_5_LEMMA;
              auto.
              Qed.
              End __C_1_2_2_2_5.
            Section __C_1_2_2_2_51.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 647, characters 10-53]
              %%name: for_zenon___C_1_2_2_2_51_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>5. *)
              Parameter __C_1_2_2_2_5_LEMMA :
                (Is_true (((_p_E_equal
                             (_p_P_prj_b (abst_diag (abst_voter va vb vc)))
                             _p_E_no_match)))).
              (* For species parameter method used via "by property vote#P!no_match_is_invalid". *)
              Parameter _p_P_no_match_is_invalid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_no_match)) ->
                    ~Is_true (((_p_P_valid x))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_2_51_LEMMA :
              ~Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))).
              %%end-auto-proof
              Theorem __C_1_2_2_2_51_LEMMA :
                ~Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))).
              assert (__force_use_H222 := H222).
              assert (__force_use_H22 := H22).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_2_2_51_LEMMA;
              auto.
              Qed.
              End __C_1_2_2_2_51.
            Section __C_1_2_2_2_6.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 650, characters 10-66]
              %%name: for_zenon___C_1_2_2_2_6_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H22". *)
              Parameter H22 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For hypothesis "H222". *)
              Parameter H222 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For step <5>1. *)
              Parameter __C_1_2_2_2_1_LEMMA :
                (~Is_true (((_p_V_consistency_rule vb va)))).
              (* For method of Self used via "by property !vote_no_match". *)
              Parameter abst_vote_no_match :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    Is_true ((((basics._equal_ _)
                                (abst_diag (abst_voter v1 v2 v3))
                                (_p_P_constr _p_C_capt_1 _p_E_no_match)))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_2_6_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vb va vc))
                          (_p_P_constr _p_C_capt_1 _p_E_no_match)))).
              %%end-auto-proof
              Theorem __C_1_2_2_2_6_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_diag (abst_voter vb va vc))
                            (_p_P_constr _p_C_capt_1 _p_E_no_match)))).
              assert (__force_use_H222 := H222).
              assert (__force_use_H22 := H22).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_2_2_6_LEMMA;
              auto.
              Qed.
              End __C_1_2_2_2_6.
            Section __C_1_2_2_2_7.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 652, characters 10-54]
              %%name: for_zenon___C_1_2_2_2_7_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>6. *)
              Parameter __C_1_2_2_2_6_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vb va vc))
                             (_p_P_constr _p_C_capt_1 _p_E_no_match))))).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_2_7_LEMMA :
              Is_true (((_p_E_equal
                          (_p_P_prj_b (abst_diag (abst_voter vb va vc)))
                          _p_E_no_match))).
              %%end-auto-proof
              Theorem __C_1_2_2_2_7_LEMMA :
                Is_true (((_p_E_equal
                            (_p_P_prj_b (abst_diag (abst_voter vb va vc)))
                            _p_E_no_match))).
              assert (__force_use_H222 := H222).
              assert (__force_use_H22 := H22).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_2_2_7_LEMMA;
              auto.
              Qed.
              End __C_1_2_2_2_7.
            Section __C_1_2_2_2_71.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 654, characters 10-53]
              %%name: for_zenon___C_1_2_2_2_71_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>7. *)
              Parameter __C_1_2_2_2_7_LEMMA :
                (Is_true (((_p_E_equal
                             (_p_P_prj_b (abst_diag (abst_voter vb va vc)))
                             _p_E_no_match)))).
              (* For species parameter method used via "by property vote#P!no_match_is_invalid". *)
              Parameter _p_P_no_match_is_invalid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_no_match)) ->
                    ~Is_true (((_p_P_valid x))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_2_71_LEMMA :
              ~Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc))))).
              %%end-auto-proof
              Theorem __C_1_2_2_2_71_LEMMA :
                ~Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc))))).
              assert (__force_use_H222 := H222).
              assert (__force_use_H22 := H22).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_2_2_71_LEMMA;
              auto.
              Qed.
              End __C_1_2_2_2_71.
            Section __C_1_2_2_2_8.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 657, characters 10-65]
              %%name: for_zenon___C_1_2_2_2_8_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* For step <5>2. *)
              Parameter __C_1_2_2_2_2_LEMMA :
                (~Is_true (((_p_V_consistency_rule vc va)))).
              (* For step <5>3. *)
              Parameter __C_1_2_2_2_3_LEMMA :
                (~Is_true (((_p_V_consistency_rule vc vb)))).
              (* For method of Self used via "by property !vote_no_match". *)
              Parameter abst_vote_no_match :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    Is_true ((((basics._equal_ _)
                                (abst_diag (abst_voter v1 v2 v3))
                                (_p_P_constr _p_C_capt_1 _p_E_no_match)))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_2_8_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter vc va vb))
                          (_p_P_constr _p_C_capt_1 _p_E_no_match)))).
              %%end-auto-proof
              Theorem __C_1_2_2_2_8_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_diag (abst_voter vc va vb))
                            (_p_P_constr _p_C_capt_1 _p_E_no_match)))).
              assert (__force_use_H222 := H222).
              assert (__force_use_H22 := H22).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_2_2_8_LEMMA;
              auto.
              Qed.
              End __C_1_2_2_2_8.
            Section __C_1_2_2_2_9.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 659, characters 10-54]
              %%name: for_zenon___C_1_2_2_2_9_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>8. *)
              Parameter __C_1_2_2_2_8_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter vc va vb))
                             (_p_P_constr _p_C_capt_1 _p_E_no_match))))).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_2_9_LEMMA :
              Is_true (((_p_E_equal
                          (_p_P_prj_b (abst_diag (abst_voter vc va vb)))
                          _p_E_no_match))).
              %%end-auto-proof
              Theorem __C_1_2_2_2_9_LEMMA :
                Is_true (((_p_E_equal
                            (_p_P_prj_b (abst_diag (abst_voter vc va vb)))
                            _p_E_no_match))).
              assert (__force_use_H222 := H222).
              assert (__force_use_H22 := H22).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_2_2_9_LEMMA;
              auto.
              Qed.
              End __C_1_2_2_2_9.
            Section __C_1_2_2_2_91.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 661, characters 10-53]
              %%name: for_zenon___C_1_2_2_2_91_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>9. *)
              Parameter __C_1_2_2_2_9_LEMMA :
                (Is_true (((_p_E_equal
                             (_p_P_prj_b (abst_diag (abst_voter vc va vb)))
                             _p_E_no_match)))).
              (* For species parameter method used via "by property vote#P!no_match_is_invalid". *)
              Parameter _p_P_no_match_is_invalid :
                forall x : _p_P_T,
                  Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_no_match)) ->
                    ~Is_true (((_p_P_valid x))).
              (* Theorem's body. *)
              Theorem for_zenon___C_1_2_2_2_91_LEMMA :
              ~Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb))))).
              %%end-auto-proof
              Theorem __C_1_2_2_2_91_LEMMA :
                ~Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb))))).
              assert (__force_use_H222 := H222).
              assert (__force_use_H22 := H22).
              assert (__force_use_H2 := H2).
              apply for_zenon___C_1_2_2_2_91_LEMMA;
              auto.
              Qed.
              End __C_1_2_2_2_91.
            %%begin-auto-proof
            %%location: [File "vote.fcl", line 663, character 19, line 664, character 38]
            %%name: for_zenon___C_1_2_2_2_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For step <5>51. *)
            Parameter __C_1_2_2_2_51_LEMMA :
              (~Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc)))))).
            (* For step <5>71. *)
            Parameter __C_1_2_2_2_71_LEMMA :
              (~Is_true (((_p_P_valid (abst_diag (abst_voter vb va vc)))))).
            (* For step <5>91. *)
            Parameter __C_1_2_2_2_91_LEMMA :
              (~Is_true (((_p_P_valid (abst_diag (abst_voter vc va vb)))))).
            (* For method of Self used via "by definition of !compatible". *)
            Definition abst_compatible (s1 : (Datatypes.prod _p_V_T _p_P_T))
              (s2 : (Datatypes.prod _p_V_T _p_P_T)) : coq_builtins.prop__t :=
              (Is_true ((_p_P_valid (abst_diag s1))) /\
                 Is_true ((_p_P_valid (abst_diag s2))) /\
                   Is_true ((_p_V_consistency_rule (abst_value s1)
                              (abst_value s2)))) \/
                (~Is_true (((_p_P_valid (abst_diag s1)))) /\
                   ~Is_true (((_p_P_valid (abst_diag s2))))).
            (* Theorem's body. *)
            Theorem for_zenon___C_1_2_2_2_LEMMA :
            ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
               (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
            %%end-auto-proof
            Theorem __C_1_2_2_2_LEMMA :
              ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
                 (abst_compatible (abst_voter va vb vc)
                   (abst_voter vc va vb))).
            assert (__force_use_H222 := H222).
            assert (__force_use_H22 := H22).
            assert (__force_use_H2 := H2).
            apply for_zenon___C_1_2_2_2_LEMMA;
            auto.
            Qed.
            End __C_1_2_2_2.
          %%begin-auto-proof
          %%location: [File "vote.fcl", line 666, characters 17-55]
          %%name: for_zenon___C_1_2_2_LEMMA
          
          
          
          (* Methods to use for automated proof. *)
          (* For step <4>1. *)
          Parameter __C_1_2_2_1_LEMMA :
            (Is_true (((_p_V_consistency_rule vb vc)))) -> (((abst_compatible
                                                               (abst_voter va
                                                                 vb vc)
                                                               (abst_voter vb
                                                                 va vc)) /\
                                                               (abst_compatible
                                                                 (abst_voter
                                                                   va vb vc)
                                                                 (abst_voter
                                                                   vc va vb)))).
          (* For step <4>2. *)
          Parameter __C_1_2_2_2_LEMMA :
            (~Is_true (((_p_V_consistency_rule vb vc)))) -> (((abst_compatible
                                                                (abst_voter
                                                                  va vb vc)
                                                                (abst_voter
                                                                  vb va vc)) /\
                                                                (abst_compatible
                                                                  (abst_voter
                                                                    va vb vc)
                                                                  (abst_voter
                                                                    vc va vb)))).
          (* For method of Self used via "by property !compatible". *)
          Parameter abst_compatible :
            (Datatypes.prod _p_V_T _p_P_T) ->
              (Datatypes.prod _p_V_T _p_P_T) -> coq_builtins.prop__t.
          (* Theorem's body. *)
          Theorem for_zenon___C_1_2_2_LEMMA :
          ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
             (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
          %%end-auto-proof
          Theorem __C_1_2_2_LEMMA :
            ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
               (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
          assert (__force_use_H22 := H22).
          assert (__force_use_H2 := H2).
          apply for_zenon___C_1_2_2_LEMMA;
          auto.
          Qed.
          End __C_1_2_2.
        %%begin-auto-proof
        %%location: [File "vote.fcl", line 668, characters 15-53]
        %%name: for_zenon___C_1_2_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For step <3>1. *)
        Parameter __C_1_2_1_LEMMA :
          (Is_true (((_p_V_consistency_rule va vc)))) -> (((abst_compatible
                                                             (abst_voter va
                                                               vb vc)
                                                             (abst_voter vb
                                                               va vc)) /\
                                                             (abst_compatible
                                                               (abst_voter va
                                                                 vb vc)
                                                               (abst_voter vc
                                                                 va vb)))).
        (* For step <3>2. *)
        Parameter __C_1_2_2_LEMMA :
          (~Is_true (((_p_V_consistency_rule va vc)))) -> (((abst_compatible
                                                              (abst_voter va
                                                                vb vc)
                                                              (abst_voter vb
                                                                va vc)) /\
                                                              (abst_compatible
                                                                (abst_voter
                                                                  va vb vc)
                                                                (abst_voter
                                                                  vc va vb)))).
        (* For method of Self used via "by property !compatible". *)
        Parameter abst_compatible :
          (Datatypes.prod _p_V_T _p_P_T) ->
            (Datatypes.prod _p_V_T _p_P_T) -> coq_builtins.prop__t.
        (* Theorem's body. *)
        Theorem for_zenon___C_1_2_LEMMA :
        ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
           (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
        %%end-auto-proof
        Theorem __C_1_2_LEMMA :
          ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
             (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
        assert (__force_use_H2 := H2).
        apply for_zenon___C_1_2_LEMMA;
        auto.
        Qed.
        End __C_1_2.
      %%begin-auto-proof
      %%location: [File "vote.fcl", line 670, characters 13-51]
      %%name: for_zenon___C_1_LEMMA
      
      
      
      (* Methods to use for automated proof. *)
      (* For step <2>1. *)
      Parameter __C_1_1_LEMMA :
        (Is_true ((_p_V_consistency_rule va vb))) -> (((abst_compatible
                                                         (abst_voter va vb
                                                           vc)
                                                         (abst_voter vb va
                                                           vc)) /\
                                                         (abst_compatible
                                                           (abst_voter va vb
                                                             vc)
                                                           (abst_voter vc va
                                                             vb)))).
      (* For step <2>2. *)
      Parameter __C_1_2_LEMMA :
        (~Is_true (((_p_V_consistency_rule va vb)))) -> (((abst_compatible
                                                            (abst_voter va vb
                                                              vc)
                                                            (abst_voter vb va
                                                              vc)) /\
                                                            (abst_compatible
                                                              (abst_voter va
                                                                vb vc)
                                                              (abst_voter vc
                                                                va vb)))).
      (* For method of Self used via "by property !compatible". *)
      Parameter abst_compatible :
        (Datatypes.prod _p_V_T _p_P_T) ->
          (Datatypes.prod _p_V_T _p_P_T) -> coq_builtins.prop__t.
      (* Theorem's body. *)
      Theorem for_zenon___C_1_LEMMA :
      ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
         (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
      %%end-auto-proof
      Theorem __C_1_LEMMA :
        ((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
           (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb))).
      apply for_zenon___C_1_LEMMA;
      auto.
      Qed.
      End __C_1.
    %%begin-auto-proof
    %%location: [File "vote.fcl", line 672, characters 11-43]
    %%name: for_zenon_voter_independant_from_order_v1_v2
    
    
    
    (* Methods to use for automated proof. *)
    (* For step <1>1. *)
    Parameter __C_1_LEMMA : forall va : _p_V_T, forall vb : _p_V_T,
      forall vc : _p_V_T,
      (((abst_compatible (abst_voter va vb vc) (abst_voter vb va vc)) /\
          (abst_compatible (abst_voter va vb vc) (abst_voter vc va vb)))).
    (* For method of Self used via "by property !compatible". *)
    Parameter abst_compatible :
      (Datatypes.prod _p_V_T _p_P_T) ->
        (Datatypes.prod _p_V_T _p_P_T) -> coq_builtins.prop__t.
    (* Theorem's body. *)
    Theorem for_zenon_voter_independant_from_order_v1_v2 :
    forall v1  v2  v3 : _p_V_T,
      (abst_compatible (abst_voter v1 v2 v3) (abst_voter v2 v1 v3)) /\
        (abst_compatible (abst_voter v1 v2 v3) (abst_voter v3 v1 v2)).
    %%end-auto-proof
    (* Dummy theorem to enforce Coq abstractions. *)
    Theorem for_zenon_abstracted_voter_independant_from_order_v1_v2 :
      forall v1  v2  v3 : _p_V_T,
        (abst_compatible (abst_voter v1 v2 v3) (abst_voter v2 v1 v3)) /\
          (abst_compatible (abst_voter v1 v2 v3) (abst_voter v3 v1 v2)).
    assert (__force_use_p_E_T := _p_E_T).
    assert (__force_use_p_C_T := _p_C_T).
    assert (__force_use_p_V_T := _p_V_T).
    assert (__force_use_p_P_T := _p_P_T).
    assert (__force_use__p_E_equal := _p_E_equal).
    assert (__force_use__p_E_no_match := _p_E_no_match).
    assert (__force_use__p_E_partial_match := _p_E_partial_match).
    assert (__force_use__p_E_perfect_match := _p_E_perfect_match).
    assert (__force_use__p_E_range_match := _p_E_range_match).
    assert (__force_use__p_C_capt_1 := _p_C_capt_1).
    assert (__force_use__p_C_capt_2 := _p_C_capt_2).
    assert (__force_use__p_C_capt_3 := _p_C_capt_3).
    assert (__force_use__p_V_consistency_rule := _p_V_consistency_rule).
    assert (__force_use__p_V_consistency_rule_reflexive :=
      _p_V_consistency_rule_reflexive).
    assert (__force_use__p_V_consistency_rule_symmetric :=
      _p_V_consistency_rule_symmetric).
    assert (__force_use__p_P_constr := _p_P_constr).
    assert (__force_use__p_P_prj_b := _p_P_prj_b).
    assert (__force_use__p_P_valid := _p_P_valid).
    assert (__force_use__p_P_prj_b_is_snd_of_pair :=
      _p_P_prj_b_is_snd_of_pair).
    assert (__force_use__p_P_no_match_is_invalid :=
      _p_P_no_match_is_invalid).
    assert (__force_use__p_P_partial_match_is_valid :=
      _p_P_partial_match_is_valid).
    assert (__force_use__p_P_perfect_match_is_valid :=
      _p_P_perfect_match_is_valid).
    assert (__force_use__p_P_range_match_is_valid :=
      _p_P_range_match_is_valid).
    assert (__force_use_abst_consistency_rule_is_symmetric :=
      abst_consistency_rule_is_symmetric).
    assert (__force_use_abst_diag := abst_diag).
    assert (__force_use_abst_value := abst_value).
    assert (__force_use_abst_voter := abst_voter).
    assert (__force_use_abst_compatible := abst_compatible).
    assert (__force_use_abst_vote_match_c1 := abst_vote_match_c1).
    assert (__force_use_abst_vote_match_c2 := abst_vote_match_c2).
    assert (__force_use_abst_vote_match_c3 := abst_vote_match_c3).
    assert (__force_use_abst_vote_no_match := abst_vote_no_match).
    assert (__force_use_abst_vote_partial_c1 := abst_vote_partial_c1).
    assert (__force_use_abst_vote_partial_c2 := abst_vote_partial_c2).
    assert (__force_use_abst_vote_partial_c3 := abst_vote_partial_c3).
    assert (__force_use_abst_vote_perfect := abst_vote_perfect).
    apply for_zenon_voter_independant_from_order_v1_v2;
    auto.
    Qed.
    End Proof_of_voter_independant_from_order_v1_v2.
  
  Theorem voter_independant_from_order_v1_v2  (_p_E_T : Set) (_p_C_T : Set)
    (_p_V_T : Set) (_p_P_T : Set) (_p_E_equal :
    _p_E_T -> _p_E_T -> basics.bool__t) (_p_E_no_match : _p_E_T)
    (_p_E_partial_match : _p_E_T) (_p_E_perfect_match : _p_E_T)
    (_p_E_range_match : _p_E_T) (_p_C_capt_1 : _p_C_T) (_p_C_capt_2 : _p_C_T)
    (_p_C_capt_3 : _p_C_T) (_p_V_consistency_rule :
    _p_V_T -> _p_V_T -> basics.bool__t) (_p_V_consistency_rule_reflexive :
    forall a : _p_V_T, Is_true ((_p_V_consistency_rule a a)))
    (_p_V_consistency_rule_symmetric :
    forall a  b : _p_V_T,
      Is_true ((_p_V_consistency_rule a b)) ->
        Is_true ((_p_V_consistency_rule b a)))
    (_p_P_constr : _p_C_T -> _p_E_T -> _p_P_T) (_p_P_prj_b :
    _p_P_T -> _p_E_T) (_p_P_valid : _p_P_T -> basics.bool__t)
    (_p_P_prj_b_is_snd_of_pair :
    forall n1 : _p_C_T,
      forall n2 : _p_E_T,
        Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)))
    (_p_P_no_match_is_invalid :
    forall x : _p_P_T,
      Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_no_match)) ->
        ~Is_true (((_p_P_valid x))))
    (_p_P_partial_match_is_valid :
    forall x : _p_P_T,
      Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_partial_match)) ->
        Is_true ((_p_P_valid x)))
    (_p_P_perfect_match_is_valid :
    forall x : _p_P_T,
      Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_perfect_match)) ->
        Is_true ((_p_P_valid x)))
    (_p_P_range_match_is_valid :
    forall x : _p_P_T,
      Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_range_match)) ->
        Is_true ((_p_P_valid x)))
    (abst_consistency_rule_is_symmetric :
    forall v1  v2 : _p_V_T,
      Is_true ((_p_V_consistency_rule v1 v2)) ->
        Is_true ((_p_V_consistency_rule v2 v1)))
    (abst_diag : (Datatypes.prod _p_V_T _p_P_T) -> _p_P_T)
    (abst_value : (Datatypes.prod _p_V_T _p_P_T) -> _p_V_T)
    (abst_voter : _p_V_T ->
                    _p_V_T -> _p_V_T -> (Datatypes.prod _p_V_T _p_P_T))
    (abst_compatible := gen_vote.Gen_voter.compatible _p_V_T _p_P_T
    _p_V_consistency_rule _p_P_valid abst_diag abst_value)
    (abst_vote_match_c1 :
    forall v1  v2  v3 : _p_V_T,
      (~Is_true ((_p_V_consistency_rule v1 v2)) /\
         ~Is_true ((_p_V_consistency_rule v1 v3)) /\
           Is_true ((_p_V_consistency_rule v2 v3))) ->
        (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3)) v2))) /\
           Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                       (_p_P_constr _p_C_capt_1 _p_E_range_match))))))
    (abst_vote_match_c2 :
    forall v1  v2  v3 : _p_V_T,
      (~Is_true ((_p_V_consistency_rule v1 v2)) /\
         Is_true ((_p_V_consistency_rule v1 v3)) /\
           ~Is_true ((_p_V_consistency_rule v2 v3))) ->
        (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3)) v3))) /\
           Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                       (_p_P_constr _p_C_capt_2 _p_E_range_match))))))
    (abst_vote_match_c3 :
    forall v1  v2  v3 : _p_V_T,
      (Is_true ((_p_V_consistency_rule v1 v2)) /\
         ~Is_true ((_p_V_consistency_rule v1 v3)) /\
           ~Is_true ((_p_V_consistency_rule v2 v3))) ->
        (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3)) v1))) /\
           Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                       (_p_P_constr _p_C_capt_3 _p_E_range_match))))))
    (abst_vote_no_match :
    forall v1  v2  v3 : _p_V_T,
      (~Is_true ((_p_V_consistency_rule v1 v2)) /\
         ~Is_true ((_p_V_consistency_rule v1 v3)) /\
           ~Is_true ((_p_V_consistency_rule v2 v3))) ->
        Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                    (_p_P_constr _p_C_capt_1 _p_E_no_match)))))
    (abst_vote_partial_c1 :
    forall v1  v2  v3 : _p_V_T,
      (Is_true ((_p_V_consistency_rule v1 v2)) /\
         Is_true ((_p_V_consistency_rule v1 v3)) /\
           ~Is_true ((_p_V_consistency_rule v2 v3))) ->
        (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3)) v1))) /\
           Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                       (_p_P_constr _p_C_capt_1 _p_E_partial_match))))))
    (abst_vote_partial_c2 :
    forall v1  v2  v3 : _p_V_T,
      (Is_true ((_p_V_consistency_rule v1 v2)) /\
         ~Is_true ((_p_V_consistency_rule v1 v3)) /\
           Is_true ((_p_V_consistency_rule v2 v3))) ->
        (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3)) v2))) /\
           Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                       (_p_P_constr _p_C_capt_2 _p_E_partial_match))))))
    (abst_vote_partial_c3 :
    forall v1  v2  v3 : _p_V_T,
      (~Is_true ((_p_V_consistency_rule v1 v2)) /\
         Is_true ((_p_V_consistency_rule v1 v3)) /\
           Is_true ((_p_V_consistency_rule v2 v3))) ->
        (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3)) v3))) /\
           Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                       (_p_P_constr _p_C_capt_3 _p_E_partial_match))))))
    (abst_vote_perfect :
    forall v1  v2  v3 : _p_V_T,
      (Is_true ((_p_V_consistency_rule v1 v2)) /\
         Is_true ((_p_V_consistency_rule v2 v3)) /\
           Is_true ((_p_V_consistency_rule v1 v3))) ->
        (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3)) v1))) /\
           Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                       (_p_P_constr _p_C_capt_1 _p_E_perfect_match)))))):
    forall v1  v2  v3 : _p_V_T,
      (abst_compatible (abst_voter v1 v2 v3) (abst_voter v2 v1 v3)) /\
        (abst_compatible (abst_voter v1 v2 v3) (abst_voter v3 v1 v2)).
  apply for_zenon_abstracted_voter_independant_from_order_v1_v2;
  auto.
  Qed.
  
  (* From species vote#Voteur. *)
  (* Section for proof of theorem 'voter_returns_an_input_value'. *)
  Section Proof_of_voter_returns_an_input_value.
    Variable _p_E_T : Set.
    Variable _p_C_T : Set.
    Variable _p_V_T : Set.
    Variable _p_P_T : Set.
    Variable _p_E_equal : _p_E_T -> _p_E_T -> basics.bool__t.
    Variable _p_E_no_match : _p_E_T.
    Variable _p_E_partial_match : _p_E_T.
    Variable _p_E_perfect_match : _p_E_T.
    Variable _p_E_range_match : _p_E_T.
    Variable _p_C_capt_1 : _p_C_T.
    Variable _p_C_capt_2 : _p_C_T.
    Variable _p_C_capt_3 : _p_C_T.
    Variable _p_V_consistency_rule : _p_V_T -> _p_V_T -> basics.bool__t.
    Variable _p_P_constr : _p_C_T -> _p_E_T -> _p_P_T.
    Variable _p_P_prj_b : _p_P_T -> _p_E_T.
    Variable _p_P_valid : _p_P_T -> basics.bool__t.
    Variable _p_P_prj_b_is_snd_of_pair :
      forall n1 : _p_C_T,
        forall n2 : _p_E_T,
          Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
    Variable _p_P_no_match_is_invalid :
      forall x : _p_P_T,
        Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_no_match)) ->
          ~Is_true (((_p_P_valid x))).
    Variable abst_diag : (Datatypes.prod _p_V_T _p_P_T) -> _p_P_T.
    Let abst_state := state _p_E_T _p_P_T
    _p_P_prj_b.
    Variable abst_value : (Datatypes.prod _p_V_T _p_P_T) -> _p_V_T.
    Variable abst_voter : _p_V_T ->
                            _p_V_T ->
                              _p_V_T -> (Datatypes.prod _p_V_T _p_P_T).
    Hypothesis abst_vote_match_c1 :
      forall v1  v2  v3 : _p_V_T,
        (~Is_true ((_p_V_consistency_rule v1 v2)) /\
           ~Is_true ((_p_V_consistency_rule v1 v3)) /\
             Is_true ((_p_V_consistency_rule v2 v3))) ->
          (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3))
                       v2))) /\
             Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                         (_p_P_constr _p_C_capt_1 _p_E_range_match))))).
    Hypothesis abst_vote_match_c2 :
      forall v1  v2  v3 : _p_V_T,
        (~Is_true ((_p_V_consistency_rule v1 v2)) /\
           Is_true ((_p_V_consistency_rule v1 v3)) /\
             ~Is_true ((_p_V_consistency_rule v2 v3))) ->
          (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3))
                       v3))) /\
             Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                         (_p_P_constr _p_C_capt_2 _p_E_range_match))))).
    Hypothesis abst_vote_match_c3 :
      forall v1  v2  v3 : _p_V_T,
        (Is_true ((_p_V_consistency_rule v1 v2)) /\
           ~Is_true ((_p_V_consistency_rule v1 v3)) /\
             ~Is_true ((_p_V_consistency_rule v2 v3))) ->
          (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3))
                       v1))) /\
             Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                         (_p_P_constr _p_C_capt_3 _p_E_range_match))))).
    Hypothesis abst_vote_no_match :
      forall v1  v2  v3 : _p_V_T,
        (~Is_true ((_p_V_consistency_rule v1 v2)) /\
           ~Is_true ((_p_V_consistency_rule v1 v3)) /\
             ~Is_true ((_p_V_consistency_rule v2 v3))) ->
          Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                      (_p_P_constr _p_C_capt_1 _p_E_no_match)))).
    Hypothesis abst_vote_partial_c1 :
      forall v1  v2  v3 : _p_V_T,
        (Is_true ((_p_V_consistency_rule v1 v2)) /\
           Is_true ((_p_V_consistency_rule v1 v3)) /\
             ~Is_true ((_p_V_consistency_rule v2 v3))) ->
          (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3))
                       v1))) /\
             Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                         (_p_P_constr _p_C_capt_1 _p_E_partial_match))))).
    Hypothesis abst_vote_partial_c2 :
      forall v1  v2  v3 : _p_V_T,
        (Is_true ((_p_V_consistency_rule v1 v2)) /\
           ~Is_true ((_p_V_consistency_rule v1 v3)) /\
             Is_true ((_p_V_consistency_rule v2 v3))) ->
          (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3))
                       v2))) /\
             Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                         (_p_P_constr _p_C_capt_2 _p_E_partial_match))))).
    Hypothesis abst_vote_partial_c3 :
      forall v1  v2  v3 : _p_V_T,
        (~Is_true ((_p_V_consistency_rule v1 v2)) /\
           Is_true ((_p_V_consistency_rule v1 v3)) /\
             Is_true ((_p_V_consistency_rule v2 v3))) ->
          (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3))
                       v3))) /\
             Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                         (_p_P_constr _p_C_capt_3 _p_E_partial_match))))).
    Hypothesis abst_vote_perfect :
      forall v1  v2  v3 : _p_V_T,
        (Is_true ((_p_V_consistency_rule v1 v2)) /\
           Is_true ((_p_V_consistency_rule v2 v3)) /\
             Is_true ((_p_V_consistency_rule v1 v3))) ->
          (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3))
                       v1))) /\
             Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                         (_p_P_constr _p_C_capt_1 _p_E_perfect_match))))).
    Section __D_1.
      Variable va : _p_V_T.
      Variable vb : _p_V_T.
      Variable vc : _p_V_T.
      Section __D_1_1.
        Variable H1 : Is_true ((_p_V_consistency_rule va vb)).
        Section __D_1_1_1.
          Variable H11 : Is_true ((_p_V_consistency_rule vb vc)).
          Section __D_1_1_1_1.
            Variable H111 : Is_true ((_p_V_consistency_rule va vc)).
            %%begin-auto-proof
            %%location: [File "vote.fcl", line 179, characters 9-58]
            %%name: for_zenon___D_1_1_1_1_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For hypothesis "H1". *)
            Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
            (* For hypothesis "H11". *)
            Parameter H11 : Is_true ((_p_V_consistency_rule vb vc)).
            (* For hypothesis "H111". *)
            Parameter H111 : Is_true ((_p_V_consistency_rule va vc)).
            (* For method of Self used via "by property !vote_perfect". *)
            Parameter abst_vote_perfect :
              forall v1  v2  v3 : _p_V_T,
                (Is_true ((_p_V_consistency_rule v1 v2)) /\
                   Is_true ((_p_V_consistency_rule v2 v3)) /\
                     Is_true ((_p_V_consistency_rule v1 v3))) ->
                  (Is_true ((((basics._equal_ _)
                               (abst_value (abst_voter v1 v2 v3)) v1))) /\
                     Is_true ((((basics._equal_ _)
                                 (abst_diag (abst_voter v1 v2 v3))
                                 (_p_P_constr _p_C_capt_1 _p_E_perfect_match))))).
            (* Theorem's body. *)
            Theorem for_zenon___D_1_1_1_1_LEMMA :
            Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                        va))).
            %%end-auto-proof
            Theorem __D_1_1_1_1_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter va vb vc)) va))).
            assert (__force_use_H111 := H111).
            assert (__force_use_H11 := H11).
            assert (__force_use_H1 := H1).
            apply for_zenon___D_1_1_1_1_LEMMA;
            auto.
            Qed.
            End __D_1_1_1_1.
          Section __D_1_1_1_2.
            Variable H112 : ~Is_true (((_p_V_consistency_rule va vc))).
            %%begin-auto-proof
            %%location: [File "vote.fcl", line 183, characters 9-61]
            %%name: for_zenon___D_1_1_1_2_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For hypothesis "H1". *)
            Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
            (* For hypothesis "H11". *)
            Parameter H11 : Is_true ((_p_V_consistency_rule vb vc)).
            (* For hypothesis "H112". *)
            Parameter H112 : ~Is_true (((_p_V_consistency_rule va vc))).
            (* For method of Self used via "by property !vote_partial_c2". *)
            Parameter abst_vote_partial_c2 :
              forall v1  v2  v3 : _p_V_T,
                (Is_true ((_p_V_consistency_rule v1 v2)) /\
                   ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                     Is_true ((_p_V_consistency_rule v2 v3))) ->
                  (Is_true ((((basics._equal_ _)
                               (abst_value (abst_voter v1 v2 v3)) v2))) /\
                     Is_true ((((basics._equal_ _)
                                 (abst_diag (abst_voter v1 v2 v3))
                                 (_p_P_constr _p_C_capt_2 _p_E_partial_match))))).
            (* Theorem's body. *)
            Theorem for_zenon___D_1_1_1_2_LEMMA :
            Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                        vb))).
            %%end-auto-proof
            Theorem __D_1_1_1_2_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter va vb vc)) vb))).
            assert (__force_use_H112 := H112).
            assert (__force_use_H11 := H11).
            assert (__force_use_H1 := H1).
            apply for_zenon___D_1_1_1_2_LEMMA;
            auto.
            Qed.
            End __D_1_1_1_2.
          %%begin-auto-proof
          %%location: [File "vote.fcl", line 184, characters 9-22]
          %%name: for_zenon___D_1_1_1_LEMMA
          
          
          
          (* Methods to use for automated proof. *)
          (* For step <4>1. *)
          Parameter __D_1_1_1_1_LEMMA :
            (Is_true ((_p_V_consistency_rule va vc))) -> (Is_true ((((basics._equal_
                                                                    _)
                                                                    (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                    va)))).
          (* For step <4>2. *)
          Parameter __D_1_1_1_2_LEMMA :
            (~Is_true (((_p_V_consistency_rule va vc)))) -> (Is_true (
                                                               (((basics._equal_
                                                                   _)
                                                                  (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                  vb)))).
          (* Theorem's body. *)
          Theorem for_zenon___D_1_1_1_LEMMA :
          (Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                       va))) \/
             Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                         vb))) \/
               Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter va vb vc)) vc)))).
          %%end-auto-proof
          Theorem __D_1_1_1_LEMMA :
            (Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                         va))) \/
               Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter va vb vc)) vb))) \/
                 Is_true ((((basics._equal_ _)
                             (abst_value (abst_voter va vb vc)) vc)))).
          assert (__force_use_H11 := H11).
          assert (__force_use_H1 := H1).
          apply for_zenon___D_1_1_1_LEMMA;
          auto.
          Qed.
          End __D_1_1_1.
        Section __D_1_1_2.
          Variable H12 : ~Is_true (((_p_V_consistency_rule vb vc))).
          Section __D_1_1_2_1.
            Variable H121 : Is_true ((_p_V_consistency_rule va vc)).
            %%begin-auto-proof
            %%location: [File "vote.fcl", line 198, characters 9-61]
            %%name: for_zenon___D_1_1_2_1_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For hypothesis "H1". *)
            Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
            (* For hypothesis "H12". *)
            Parameter H12 : ~Is_true (((_p_V_consistency_rule vb vc))).
            (* For hypothesis "H121". *)
            Parameter H121 : Is_true ((_p_V_consistency_rule va vc)).
            (* For method of Self used via "by property !vote_partial_c1". *)
            Parameter abst_vote_partial_c1 :
              forall v1  v2  v3 : _p_V_T,
                (Is_true ((_p_V_consistency_rule v1 v2)) /\
                   Is_true ((_p_V_consistency_rule v1 v3)) /\
                     ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                  (Is_true ((((basics._equal_ _)
                               (abst_value (abst_voter v1 v2 v3)) v1))) /\
                     Is_true ((((basics._equal_ _)
                                 (abst_diag (abst_voter v1 v2 v3))
                                 (_p_P_constr _p_C_capt_1 _p_E_partial_match))))).
            (* Theorem's body. *)
            Theorem for_zenon___D_1_1_2_1_LEMMA :
            Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                        va))).
            %%end-auto-proof
            Theorem __D_1_1_2_1_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter va vb vc)) va))).
            assert (__force_use_H121 := H121).
            assert (__force_use_H12 := H12).
            assert (__force_use_H1 := H1).
            apply for_zenon___D_1_1_2_1_LEMMA;
            auto.
            Qed.
            End __D_1_1_2_1.
          Section __D_1_1_2_2.
            Variable H122 : ~Is_true (((_p_V_consistency_rule va vc))).
            %%begin-auto-proof
            %%location: [File "vote.fcl", line 203, characters 9-59]
            %%name: for_zenon___D_1_1_2_2_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For hypothesis "H1". *)
            Parameter H1 : Is_true ((_p_V_consistency_rule va vb)).
            (* For hypothesis "H12". *)
            Parameter H12 : ~Is_true (((_p_V_consistency_rule vb vc))).
            (* For hypothesis "H122". *)
            Parameter H122 : ~Is_true (((_p_V_consistency_rule va vc))).
            (* For method of Self used via "by property !vote_match_c3". *)
            Parameter abst_vote_match_c3 :
              forall v1  v2  v3 : _p_V_T,
                (Is_true ((_p_V_consistency_rule v1 v2)) /\
                   ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                     ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                  (Is_true ((((basics._equal_ _)
                               (abst_value (abst_voter v1 v2 v3)) v1))) /\
                     Is_true ((((basics._equal_ _)
                                 (abst_diag (abst_voter v1 v2 v3))
                                 (_p_P_constr _p_C_capt_3 _p_E_range_match))))).
            (* Theorem's body. *)
            Theorem for_zenon___D_1_1_2_2_LEMMA :
            Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                        va))).
            %%end-auto-proof
            Theorem __D_1_1_2_2_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter va vb vc)) va))).
            assert (__force_use_H122 := H122).
            assert (__force_use_H12 := H12).
            assert (__force_use_H1 := H1).
            apply for_zenon___D_1_1_2_2_LEMMA;
            auto.
            Qed.
            End __D_1_1_2_2.
          %%begin-auto-proof
          %%location: [File "vote.fcl", line 204, characters 9-22]
          %%name: for_zenon___D_1_1_2_LEMMA
          
          
          
          (* Methods to use for automated proof. *)
          (* For step <4>1. *)
          Parameter __D_1_1_2_1_LEMMA :
            (Is_true ((_p_V_consistency_rule va vc))) -> (Is_true ((((basics._equal_
                                                                    _)
                                                                    (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                    va)))).
          (* For step <4>2. *)
          Parameter __D_1_1_2_2_LEMMA :
            (~Is_true (((_p_V_consistency_rule va vc)))) -> (Is_true (
                                                               (((basics._equal_
                                                                   _)
                                                                  (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                  va)))).
          (* Theorem's body. *)
          Theorem for_zenon___D_1_1_2_LEMMA :
          (Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                       va))) \/
             Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                         vb))) \/
               Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter va vb vc)) vc)))).
          %%end-auto-proof
          Theorem __D_1_1_2_LEMMA :
            (Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                         va))) \/
               Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter va vb vc)) vb))) \/
                 Is_true ((((basics._equal_ _)
                             (abst_value (abst_voter va vb vc)) vc)))).
          assert (__force_use_H12 := H12).
          assert (__force_use_H1 := H1).
          apply for_zenon___D_1_1_2_LEMMA;
          auto.
          Qed.
          End __D_1_1_2.
        %%begin-auto-proof
        %%location: [File "vote.fcl", line 206, characters 5-18]
        %%name: for_zenon___D_1_1_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For step <3>1. *)
        Parameter __D_1_1_1_LEMMA :
          (Is_true ((_p_V_consistency_rule vb vc))) -> ((Is_true ((((basics._equal_
                                                                    _)
                                                                    (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                    va))) \/
                                                           Is_true ((((basics._equal_
                                                                    _)
                                                                    (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                    vb))) \/
                                                             Is_true (
                                                               (((basics._equal_
                                                                   _)
                                                                  (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                  vc))))).
        (* For step <3>2. *)
        Parameter __D_1_1_2_LEMMA :
          (~Is_true (((_p_V_consistency_rule vb vc)))) -> ((Is_true (
                                                              (((basics._equal_
                                                                  _)
                                                                 (abst_value
                                                                   (abst_voter
                                                                    va vb vc))
                                                                 va))) \/
                                                              Is_true (
                                                                (((basics._equal_
                                                                    _)
                                                                   (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                   vb))) \/
                                                                Is_true (
                                                                  (((basics._equal_
                                                                    _)
                                                                    (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                    vc))))).
        (* Theorem's body. *)
        Theorem for_zenon___D_1_1_LEMMA :
        (Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc)) va))) \/
           Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                       vb))) \/
             Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                         vc))) \/
               (~Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))))).
        %%end-auto-proof
        Theorem __D_1_1_LEMMA :
          (Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                       va))) \/
             Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                         vb))) \/
               Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter va vb vc)) vc))) \/
                 (~Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))))).
        assert (__force_use_H1 := H1).
        apply for_zenon___D_1_1_LEMMA;
        auto.
        Qed.
        End __D_1_1.
      Section __D_1_2.
        Variable H2 : ~Is_true (((_p_V_consistency_rule va vb))).
        Section __D_1_2_1.
          Variable H21 : Is_true ((_p_V_consistency_rule vb vc)).
          Section __D_1_2_1_1.
            Variable H211 : Is_true ((_p_V_consistency_rule va vc)).
            %%begin-auto-proof
            %%location: [File "vote.fcl", line 229, characters 9-61]
            %%name: for_zenon___D_1_2_1_1_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For hypothesis "H2". *)
            Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
            (* For hypothesis "H21". *)
            Parameter H21 : Is_true ((_p_V_consistency_rule vb vc)).
            (* For hypothesis "H211". *)
            Parameter H211 : Is_true ((_p_V_consistency_rule va vc)).
            (* For method of Self used via "by property !vote_partial_c3". *)
            Parameter abst_vote_partial_c3 :
              forall v1  v2  v3 : _p_V_T,
                (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                   Is_true ((_p_V_consistency_rule v1 v3)) /\
                     Is_true ((_p_V_consistency_rule v2 v3))) ->
                  (Is_true ((((basics._equal_ _)
                               (abst_value (abst_voter v1 v2 v3)) v3))) /\
                     Is_true ((((basics._equal_ _)
                                 (abst_diag (abst_voter v1 v2 v3))
                                 (_p_P_constr _p_C_capt_3 _p_E_partial_match))))).
            (* Theorem's body. *)
            Theorem for_zenon___D_1_2_1_1_LEMMA :
            Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                        vc))).
            %%end-auto-proof
            Theorem __D_1_2_1_1_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter va vb vc)) vc))).
            assert (__force_use_H211 := H211).
            assert (__force_use_H21 := H21).
            assert (__force_use_H2 := H2).
            apply for_zenon___D_1_2_1_1_LEMMA;
            auto.
            Qed.
            End __D_1_2_1_1.
          Section __D_1_2_1_2.
            Variable H212 : ~Is_true (((_p_V_consistency_rule va vc))).
            %%begin-auto-proof
            %%location: [File "vote.fcl", line 234, characters 9-59]
            %%name: for_zenon___D_1_2_1_2_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For hypothesis "H2". *)
            Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
            (* For hypothesis "H21". *)
            Parameter H21 : Is_true ((_p_V_consistency_rule vb vc)).
            (* For hypothesis "H212". *)
            Parameter H212 : ~Is_true (((_p_V_consistency_rule va vc))).
            (* For method of Self used via "by property !vote_match_c1". *)
            Parameter abst_vote_match_c1 :
              forall v1  v2  v3 : _p_V_T,
                (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                   ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                     Is_true ((_p_V_consistency_rule v2 v3))) ->
                  (Is_true ((((basics._equal_ _)
                               (abst_value (abst_voter v1 v2 v3)) v2))) /\
                     Is_true ((((basics._equal_ _)
                                 (abst_diag (abst_voter v1 v2 v3))
                                 (_p_P_constr _p_C_capt_1 _p_E_range_match))))).
            (* Theorem's body. *)
            Theorem for_zenon___D_1_2_1_2_LEMMA :
            Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                        vb))).
            %%end-auto-proof
            Theorem __D_1_2_1_2_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter va vb vc)) vb))).
            assert (__force_use_H212 := H212).
            assert (__force_use_H21 := H21).
            assert (__force_use_H2 := H2).
            apply for_zenon___D_1_2_1_2_LEMMA;
            auto.
            Qed.
            End __D_1_2_1_2.
          %%begin-auto-proof
          %%location: [File "vote.fcl", line 235, characters 9-22]
          %%name: for_zenon___D_1_2_1_LEMMA
          
          
          
          (* Methods to use for automated proof. *)
          (* For step <4>1. *)
          Parameter __D_1_2_1_1_LEMMA :
            (Is_true ((_p_V_consistency_rule va vc))) -> (Is_true ((((basics._equal_
                                                                    _)
                                                                    (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                    vc)))).
          (* For step <4>2. *)
          Parameter __D_1_2_1_2_LEMMA :
            (~Is_true (((_p_V_consistency_rule va vc)))) -> (Is_true (
                                                               (((basics._equal_
                                                                   _)
                                                                  (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                  vb)))).
          (* Theorem's body. *)
          Theorem for_zenon___D_1_2_1_LEMMA :
          (Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                       va))) \/
             Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                         vb))) \/
               Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter va vb vc)) vc)))).
          %%end-auto-proof
          Theorem __D_1_2_1_LEMMA :
            (Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                         va))) \/
               Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter va vb vc)) vb))) \/
                 Is_true ((((basics._equal_ _)
                             (abst_value (abst_voter va vb vc)) vc)))).
          assert (__force_use_H21 := H21).
          assert (__force_use_H2 := H2).
          apply for_zenon___D_1_2_1_LEMMA;
          auto.
          Qed.
          End __D_1_2_1.
        Section __D_1_2_2.
          Variable H22 : ~Is_true (((_p_V_consistency_rule vb vc))).
          Section __D_1_2_2_1.
            Variable H221 : Is_true ((_p_V_consistency_rule va vc)).
            %%begin-auto-proof
            %%location: [File "vote.fcl", line 249, characters 9-59]
            %%name: for_zenon___D_1_2_2_1_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For hypothesis "H2". *)
            Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
            (* For hypothesis "H22". *)
            Parameter H22 : ~Is_true (((_p_V_consistency_rule vb vc))).
            (* For hypothesis "H221". *)
            Parameter H221 : Is_true ((_p_V_consistency_rule va vc)).
            (* For method of Self used via "by property !vote_match_c2". *)
            Parameter abst_vote_match_c2 :
              forall v1  v2  v3 : _p_V_T,
                (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                   Is_true ((_p_V_consistency_rule v1 v3)) /\
                     ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                  (Is_true ((((basics._equal_ _)
                               (abst_value (abst_voter v1 v2 v3)) v3))) /\
                     Is_true ((((basics._equal_ _)
                                 (abst_diag (abst_voter v1 v2 v3))
                                 (_p_P_constr _p_C_capt_2 _p_E_range_match))))).
            (* Theorem's body. *)
            Theorem for_zenon___D_1_2_2_1_LEMMA :
            Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                        vc))).
            %%end-auto-proof
            Theorem __D_1_2_2_1_LEMMA :
              Is_true ((((basics._equal_ _)
                          (abst_value (abst_voter va vb vc)) vc))).
            assert (__force_use_H221 := H221).
            assert (__force_use_H22 := H22).
            assert (__force_use_H2 := H2).
            apply for_zenon___D_1_2_2_1_LEMMA;
            auto.
            Qed.
            End __D_1_2_2_1.
          Section __D_1_2_2_2.
            Variable H222 : ~Is_true (((_p_V_consistency_rule va vc))).
            Section __D_1_2_2_2_1.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 255, characters 11-61]
              %%name: for_zenon___D_1_2_2_2_1_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For hypothesis "H2". *)
              Parameter H2 : ~Is_true (((_p_V_consistency_rule va vb))).
              (* For hypothesis "H22". *)
              Parameter H22 : ~Is_true (((_p_V_consistency_rule vb vc))).
              (* For hypothesis "H222". *)
              Parameter H222 : ~Is_true (((_p_V_consistency_rule va vc))).
              (* For method of Self used via "by property !vote_no_match". *)
              Parameter abst_vote_no_match :
                forall v1  v2  v3 : _p_V_T,
                  (~Is_true ((_p_V_consistency_rule v1 v2)) /\
                     ~Is_true ((_p_V_consistency_rule v1 v3)) /\
                       ~Is_true ((_p_V_consistency_rule v2 v3))) ->
                    Is_true ((((basics._equal_ _)
                                (abst_diag (abst_voter v1 v2 v3))
                                (_p_P_constr _p_C_capt_1 _p_E_no_match)))).
              (* Theorem's body. *)
              Theorem for_zenon___D_1_2_2_2_1_LEMMA :
              Is_true ((((basics._equal_ _) (abst_diag (abst_voter va vb vc))
                          (_p_P_constr _p_C_capt_1 _p_E_no_match)))).
              %%end-auto-proof
              Theorem __D_1_2_2_2_1_LEMMA :
                Is_true ((((basics._equal_ _)
                            (abst_diag (abst_voter va vb vc))
                            (_p_P_constr _p_C_capt_1 _p_E_no_match)))).
              assert (__force_use_H222 := H222).
              assert (__force_use_H22 := H22).
              assert (__force_use_H2 := H2).
              apply for_zenon___D_1_2_2_2_1_LEMMA;
              auto.
              Qed.
              End __D_1_2_2_2_1.
            Section __D_1_2_2_2_2.
              %%begin-auto-proof
              %%location: [File "vote.fcl", line 257, characters 11-75]
              %%name: for_zenon___D_1_2_2_2_2_LEMMA
              
              
              
              (* Methods to use for automated proof. *)
              (* For step <5>1. *)
              Parameter __D_1_2_2_2_1_LEMMA :
                (Is_true ((((basics._equal_ _)
                             (abst_diag (abst_voter va vb vc))
                             (_p_P_constr _p_C_capt_1 _p_E_no_match))))).
              (* For method of Self used via "by definition of !state". *)
              Definition abst_state (diag : _p_P_T) : _p_E_T :=
                (_p_P_prj_b diag).
              (* For species parameter method used via "by property vote#P!prj_b_is_snd_of_pair". *)
              Parameter _p_P_prj_b_is_snd_of_pair :
                forall n1 : _p_C_T,
                  forall n2 : _p_E_T,
                    Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)).
              (* Theorem's body. *)
              Theorem for_zenon___D_1_2_2_2_2_LEMMA :
              Is_true (((_p_E_equal
                          (abst_state (abst_diag (abst_voter va vb vc)))
                          _p_E_no_match))).
              %%end-auto-proof
              Theorem __D_1_2_2_2_2_LEMMA :
                Is_true (((_p_E_equal
                            (abst_state (abst_diag (abst_voter va vb vc)))
                            _p_E_no_match))).
              assert (__force_use_H222 := H222).
              assert (__force_use_H22 := H22).
              assert (__force_use_H2 := H2).
              apply for_zenon___D_1_2_2_2_2_LEMMA;
              auto.
              Qed.
              End __D_1_2_2_2_2.
            %%begin-auto-proof
            %%location: [File "vote.fcl", line 258, character 20, line 259, character 50]
            %%name: for_zenon___D_1_2_2_2_LEMMA
            
            
            
            (* Methods to use for automated proof. *)
            (* For step <5>2. *)
            Parameter __D_1_2_2_2_2_LEMMA :
              (Is_true (((_p_E_equal
                           (abst_state (abst_diag (abst_voter va vb vc)))
                           _p_E_no_match)))).
            (* For method of Self used via "by definition of !state". *)
            Definition abst_state (diag : _p_P_T) : _p_E_T :=
              (_p_P_prj_b diag).
            (* For species parameter method used via "by property vote#P!no_match_is_invalid". *)
            Parameter _p_P_no_match_is_invalid :
              forall x : _p_P_T,
                Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_no_match)) ->
                  ~Is_true (((_p_P_valid x))).
            (* Theorem's body. *)
            Theorem for_zenon___D_1_2_2_2_LEMMA :
            (~Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc)))))).
            %%end-auto-proof
            Theorem __D_1_2_2_2_LEMMA :
              (~Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc)))))).
            assert (__force_use_H222 := H222).
            assert (__force_use_H22 := H22).
            assert (__force_use_H2 := H2).
            apply for_zenon___D_1_2_2_2_LEMMA;
            auto.
            Qed.
            End __D_1_2_2_2.
          %%begin-auto-proof
          %%location: [File "vote.fcl", line 260, characters 9-22]
          %%name: for_zenon___D_1_2_2_LEMMA
          
          
          
          (* Methods to use for automated proof. *)
          (* For step <4>1. *)
          Parameter __D_1_2_2_1_LEMMA :
            (Is_true ((_p_V_consistency_rule va vc))) -> (Is_true ((((basics._equal_
                                                                    _)
                                                                    (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                    vc)))).
          (* For step <4>2. *)
          Parameter __D_1_2_2_2_LEMMA :
            (~Is_true (((_p_V_consistency_rule va vc)))) -> ((~Is_true (
                                                                 ((_p_P_valid
                                                                    (abst_diag
                                                                    (abst_voter
                                                                    va vb vc))))))).
          (* Theorem's body. *)
          Theorem for_zenon___D_1_2_2_LEMMA :
          (Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                       va))) \/
             Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                         vb))) \/
               Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter va vb vc)) vc))) \/
                 (~Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))))).
          %%end-auto-proof
          Theorem __D_1_2_2_LEMMA :
            (Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                         va))) \/
               Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter va vb vc)) vb))) \/
                 Is_true ((((basics._equal_ _)
                             (abst_value (abst_voter va vb vc)) vc))) \/
                   (~Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))))).
          assert (__force_use_H22 := H22).
          assert (__force_use_H2 := H2).
          apply for_zenon___D_1_2_2_LEMMA;
          auto.
          Qed.
          End __D_1_2_2.
        %%begin-auto-proof
        %%location: [File "vote.fcl", line 262, characters 7-20]
        %%name: for_zenon___D_1_2_LEMMA
        
        
        
        (* Methods to use for automated proof. *)
        (* For step <3>1. *)
        Parameter __D_1_2_1_LEMMA :
          (Is_true ((_p_V_consistency_rule vb vc))) -> ((Is_true ((((basics._equal_
                                                                    _)
                                                                    (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                    va))) \/
                                                           Is_true ((((basics._equal_
                                                                    _)
                                                                    (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                    vb))) \/
                                                             Is_true (
                                                               (((basics._equal_
                                                                   _)
                                                                  (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                  vc))))).
        (* For step <3>2. *)
        Parameter __D_1_2_2_LEMMA :
          (~Is_true (((_p_V_consistency_rule vb vc)))) -> ((Is_true (
                                                              (((basics._equal_
                                                                  _)
                                                                 (abst_value
                                                                   (abst_voter
                                                                    va vb vc))
                                                                 va))) \/
                                                              Is_true (
                                                                (((basics._equal_
                                                                    _)
                                                                   (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                   vb))) \/
                                                                Is_true (
                                                                  (((basics._equal_
                                                                    _)
                                                                    (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                    vc))) \/
                                                                  (~Is_true (
                                                                    ((_p_P_valid
                                                                    (abst_diag
                                                                    (abst_voter
                                                                    va vb vc)))))))).
        (* Theorem's body. *)
        Theorem for_zenon___D_1_2_LEMMA :
        (Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc)) va))) \/
           Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                       vb))) \/
             Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                         vc))) \/
               (~Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))))).
        %%end-auto-proof
        Theorem __D_1_2_LEMMA :
          (Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                       va))) \/
             Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                         vb))) \/
               Is_true ((((basics._equal_ _)
                           (abst_value (abst_voter va vb vc)) vc))) \/
                 (~Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))))).
        assert (__force_use_H2 := H2).
        apply for_zenon___D_1_2_LEMMA;
        auto.
        Qed.
        End __D_1_2.
      %%begin-auto-proof
      %%location: [File "vote.fcl", line 264, characters 5-18]
      %%name: for_zenon___D_1_LEMMA
      
      
      
      (* Methods to use for automated proof. *)
      (* For step <2>1. *)
      Parameter __D_1_1_LEMMA :
        (Is_true ((_p_V_consistency_rule va vb))) -> ((Is_true ((((basics._equal_
                                                                    _)
                                                                   (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                   va))) \/
                                                         Is_true ((((basics._equal_
                                                                    _)
                                                                    (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                    vb))) \/
                                                           Is_true ((((basics._equal_
                                                                    _)
                                                                    (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                    vc))) \/
                                                             (~Is_true (
                                                                 ((_p_P_valid
                                                                    (abst_diag
                                                                    (abst_voter
                                                                    va vb vc)))))))).
      (* For step <2>2. *)
      Parameter __D_1_2_LEMMA :
        (~Is_true (((_p_V_consistency_rule va vb)))) -> ((Is_true ((((basics._equal_
                                                                    _)
                                                                    (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                    va))) \/
                                                            Is_true (
                                                              (((basics._equal_
                                                                  _)
                                                                 (abst_value
                                                                   (abst_voter
                                                                    va vb vc))
                                                                 vb))) \/
                                                              Is_true (
                                                                (((basics._equal_
                                                                    _)
                                                                   (abst_value
                                                                    (abst_voter
                                                                    va vb vc))
                                                                   vc))) \/
                                                                (~Is_true (
                                                                    ((_p_P_valid
                                                                    (abst_diag
                                                                    (abst_voter
                                                                    va vb vc)))))))).
      (* Theorem's body. *)
      Theorem for_zenon___D_1_LEMMA :
      (Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc)) va))) \/
         Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc)) vb))) \/
           Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                       vc))) \/
             (~Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))))).
      %%end-auto-proof
      Theorem __D_1_LEMMA :
        (Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc)) va))) \/
           Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                       vb))) \/
             Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                         vc))) \/
               (~Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc))))))).
      apply for_zenon___D_1_LEMMA;
      auto.
      Qed.
      End __D_1.
    %%begin-auto-proof
    %%location: [File "vote.fcl", line 266, characters 2-15]
    %%name: for_zenon_voter_returns_an_input_value
    
    
    
    (* Methods to use for automated proof. *)
    (* For step <1>1. *)
    Parameter __D_1_LEMMA : forall va : _p_V_T, forall vb : _p_V_T,
      forall vc : _p_V_T,
      ((Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc)) va))) \/
          Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                      vb))) \/
            Is_true ((((basics._equal_ _) (abst_value (abst_voter va vb vc))
                        vc))) \/
              (~Is_true (((_p_P_valid (abst_diag (abst_voter va vb vc)))))))).
    (* Theorem's body. *)
    Theorem for_zenon_voter_returns_an_input_value :
    forall v1  v2  v3 : _p_V_T,
      Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3)) v1))) \/
        Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3)) v2))) \/
          Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3))
                      v3))) \/
            (~Is_true (((_p_P_valid (abst_diag (abst_voter v1 v2 v3)))))).
    %%end-auto-proof
    (* Dummy theorem to enforce Coq abstractions. *)
    Theorem for_zenon_abstracted_voter_returns_an_input_value :
      forall v1  v2  v3 : _p_V_T,
        Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3)) v1))) \/
          Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3))
                      v2))) \/
            Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3))
                        v3))) \/
              (~Is_true (((_p_P_valid (abst_diag (abst_voter v1 v2 v3)))))).
    assert (__force_use_p_E_T := _p_E_T).
    assert (__force_use_p_C_T := _p_C_T).
    assert (__force_use_p_V_T := _p_V_T).
    assert (__force_use_p_P_T := _p_P_T).
    assert (__force_use__p_E_equal := _p_E_equal).
    assert (__force_use__p_E_no_match := _p_E_no_match).
    assert (__force_use__p_E_partial_match := _p_E_partial_match).
    assert (__force_use__p_E_perfect_match := _p_E_perfect_match).
    assert (__force_use__p_E_range_match := _p_E_range_match).
    assert (__force_use__p_C_capt_1 := _p_C_capt_1).
    assert (__force_use__p_C_capt_2 := _p_C_capt_2).
    assert (__force_use__p_C_capt_3 := _p_C_capt_3).
    assert (__force_use__p_V_consistency_rule := _p_V_consistency_rule).
    assert (__force_use__p_P_constr := _p_P_constr).
    assert (__force_use__p_P_prj_b := _p_P_prj_b).
    assert (__force_use__p_P_valid := _p_P_valid).
    assert (__force_use__p_P_prj_b_is_snd_of_pair :=
      _p_P_prj_b_is_snd_of_pair).
    assert (__force_use__p_P_no_match_is_invalid :=
      _p_P_no_match_is_invalid).
    assert (__force_use_abst_diag := abst_diag).
    assert (__force_use_abst_state := abst_state).
    assert (__force_use_abst_value := abst_value).
    assert (__force_use_abst_voter := abst_voter).
    assert (__force_use_abst_vote_match_c1 := abst_vote_match_c1).
    assert (__force_use_abst_vote_match_c2 := abst_vote_match_c2).
    assert (__force_use_abst_vote_match_c3 := abst_vote_match_c3).
    assert (__force_use_abst_vote_no_match := abst_vote_no_match).
    assert (__force_use_abst_vote_partial_c1 := abst_vote_partial_c1).
    assert (__force_use_abst_vote_partial_c2 := abst_vote_partial_c2).
    assert (__force_use_abst_vote_partial_c3 := abst_vote_partial_c3).
    assert (__force_use_abst_vote_perfect := abst_vote_perfect).
    apply for_zenon_voter_returns_an_input_value;
    auto.
    Qed.
    End Proof_of_voter_returns_an_input_value.
  
  Theorem voter_returns_an_input_value  (_p_E_T : Set) (_p_C_T : Set)
    (_p_V_T : Set) (_p_P_T : Set) (_p_E_equal :
    _p_E_T -> _p_E_T -> basics.bool__t) (_p_E_no_match : _p_E_T)
    (_p_E_partial_match : _p_E_T) (_p_E_perfect_match : _p_E_T)
    (_p_E_range_match : _p_E_T) (_p_C_capt_1 : _p_C_T) (_p_C_capt_2 : _p_C_T)
    (_p_C_capt_3 : _p_C_T) (_p_V_consistency_rule :
    _p_V_T -> _p_V_T -> basics.bool__t) (_p_P_constr :
    _p_C_T -> _p_E_T -> _p_P_T) (_p_P_prj_b : _p_P_T -> _p_E_T) (_p_P_valid :
    _p_P_T -> basics.bool__t) (_p_P_prj_b_is_snd_of_pair :
    forall n1 : _p_C_T,
      forall n2 : _p_E_T,
        Is_true ((_p_E_equal (_p_P_prj_b (_p_P_constr n1 n2)) n2)))
    (_p_P_no_match_is_invalid :
    forall x : _p_P_T,
      Is_true ((_p_E_equal (_p_P_prj_b x) _p_E_no_match)) ->
        ~Is_true (((_p_P_valid x))))
    (abst_diag : (Datatypes.prod _p_V_T _p_P_T) -> _p_P_T) (abst_state :=
    state _p_E_T _p_P_T _p_P_prj_b)
    (abst_value : (Datatypes.prod _p_V_T _p_P_T) -> _p_V_T)
    (abst_voter : _p_V_T ->
                    _p_V_T -> _p_V_T -> (Datatypes.prod _p_V_T _p_P_T))
    (abst_vote_match_c1 :
    forall v1  v2  v3 : _p_V_T,
      (~Is_true ((_p_V_consistency_rule v1 v2)) /\
         ~Is_true ((_p_V_consistency_rule v1 v3)) /\
           Is_true ((_p_V_consistency_rule v2 v3))) ->
        (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3)) v2))) /\
           Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                       (_p_P_constr _p_C_capt_1 _p_E_range_match))))))
    (abst_vote_match_c2 :
    forall v1  v2  v3 : _p_V_T,
      (~Is_true ((_p_V_consistency_rule v1 v2)) /\
         Is_true ((_p_V_consistency_rule v1 v3)) /\
           ~Is_true ((_p_V_consistency_rule v2 v3))) ->
        (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3)) v3))) /\
           Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                       (_p_P_constr _p_C_capt_2 _p_E_range_match))))))
    (abst_vote_match_c3 :
    forall v1  v2  v3 : _p_V_T,
      (Is_true ((_p_V_consistency_rule v1 v2)) /\
         ~Is_true ((_p_V_consistency_rule v1 v3)) /\
           ~Is_true ((_p_V_consistency_rule v2 v3))) ->
        (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3)) v1))) /\
           Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                       (_p_P_constr _p_C_capt_3 _p_E_range_match))))))
    (abst_vote_no_match :
    forall v1  v2  v3 : _p_V_T,
      (~Is_true ((_p_V_consistency_rule v1 v2)) /\
         ~Is_true ((_p_V_consistency_rule v1 v3)) /\
           ~Is_true ((_p_V_consistency_rule v2 v3))) ->
        Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                    (_p_P_constr _p_C_capt_1 _p_E_no_match)))))
    (abst_vote_partial_c1 :
    forall v1  v2  v3 : _p_V_T,
      (Is_true ((_p_V_consistency_rule v1 v2)) /\
         Is_true ((_p_V_consistency_rule v1 v3)) /\
           ~Is_true ((_p_V_consistency_rule v2 v3))) ->
        (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3)) v1))) /\
           Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                       (_p_P_constr _p_C_capt_1 _p_E_partial_match))))))
    (abst_vote_partial_c2 :
    forall v1  v2  v3 : _p_V_T,
      (Is_true ((_p_V_consistency_rule v1 v2)) /\
         ~Is_true ((_p_V_consistency_rule v1 v3)) /\
           Is_true ((_p_V_consistency_rule v2 v3))) ->
        (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3)) v2))) /\
           Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                       (_p_P_constr _p_C_capt_2 _p_E_partial_match))))))
    (abst_vote_partial_c3 :
    forall v1  v2  v3 : _p_V_T,
      (~Is_true ((_p_V_consistency_rule v1 v2)) /\
         Is_true ((_p_V_consistency_rule v1 v3)) /\
           Is_true ((_p_V_consistency_rule v2 v3))) ->
        (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3)) v3))) /\
           Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                       (_p_P_constr _p_C_capt_3 _p_E_partial_match))))))
    (abst_vote_perfect :
    forall v1  v2  v3 : _p_V_T,
      (Is_true ((_p_V_consistency_rule v1 v2)) /\
         Is_true ((_p_V_consistency_rule v2 v3)) /\
           Is_true ((_p_V_consistency_rule v1 v3))) ->
        (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3)) v1))) /\
           Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                       (_p_P_constr _p_C_capt_1 _p_E_perfect_match)))))):
    forall v1  v2  v3 : _p_V_T,
      Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3)) v1))) \/
        Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3)) v2))) \/
          Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3))
                      v3))) \/
            (~Is_true (((_p_P_valid (abst_diag (abst_voter v1 v2 v3)))))).
  apply for_zenon_abstracted_voter_returns_an_input_value;
  auto.
  Qed.
  
End Voteur.

Module Imp_vote.
  Definition voter (_p_E_T : Set) (_p_C_T : Set) (_p_V_T : Set) (_p_P_T :
    Set) (_p_E_no_match : _p_E_T) (_p_E_partial_match : _p_E_T)
    (_p_E_perfect_match : _p_E_T) (_p_E_range_match : _p_E_T) (_p_C_capt_1 :
    _p_C_T) (_p_C_capt_2 : _p_C_T) (_p_C_capt_3 : _p_C_T)
    (_p_V_consistency_rule : _p_V_T -> _p_V_T -> basics.bool__t)
    (_p_P_constr : _p_C_T -> _p_E_T -> _p_P_T) (v1 : _p_V_T) (v2 : _p_V_T)
    (v3 : _p_V_T) : (Datatypes.prod _p_V_T _p_P_T) :=
    let c1 : basics.bool__t :=
      (_p_V_consistency_rule v1 v2)
    in
    let c2 : basics.bool__t :=
      (_p_V_consistency_rule v1 v3)
    in
    let c3 : basics.bool__t :=
      (_p_V_consistency_rule v2 v3)
    in
    (if c1
      then (if c2
             then (if c3
                    then (v1, (_p_P_constr _p_C_capt_1 _p_E_perfect_match))
                    else (v1, (_p_P_constr _p_C_capt_1 _p_E_partial_match)))
             else (if c3
                    then (v2, (_p_P_constr _p_C_capt_2 _p_E_partial_match))
                    else (v1, (_p_P_constr _p_C_capt_3 _p_E_range_match))))
      else (if c2
             then (if c3
                    then (v3, (_p_P_constr _p_C_capt_3 _p_E_partial_match))
                    else (v3, (_p_P_constr _p_C_capt_2 _p_E_range_match)))
             else (if c3
                    then (v2, (_p_P_constr _p_C_capt_1 _p_E_range_match))
                    else (v1, (_p_P_constr _p_C_capt_1 _p_E_no_match))))).
  
  (* From species vote#Imp_vote. *)
  Theorem vote_match_c1  (_p_E_T : Set) (_p_C_T : Set) (_p_V_T : Set)
    (_p_P_T : Set) (_p_E_range_match : _p_E_T) (_p_C_capt_1 : _p_C_T)
    (_p_V_consistency_rule : _p_V_T -> _p_V_T -> basics.bool__t)
    (_p_P_constr : _p_C_T -> _p_E_T -> _p_P_T)
    (abst_diag : (Datatypes.prod _p_V_T _p_P_T) -> _p_P_T)
    (abst_value : (Datatypes.prod _p_V_T _p_P_T) -> _p_V_T)
    (abst_voter : _p_V_T ->
                    _p_V_T -> _p_V_T -> (Datatypes.prod _p_V_T _p_P_T)):
    forall v1  v2  v3 : _p_V_T,
      (~Is_true ((_p_V_consistency_rule v1 v2)) /\
         ~Is_true ((_p_V_consistency_rule v1 v3)) /\
           Is_true ((_p_V_consistency_rule v2 v3))) ->
        (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3)) v2))) /\
           Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                       (_p_P_constr _p_C_capt_1 _p_E_range_match))))).
  (* Proof was flagged as assumed *)
  apply coq_builtins.magic_prove.
  Qed.
  
  (* From species vote#Imp_vote. *)
  Theorem vote_match_c2  (_p_E_T : Set) (_p_C_T : Set) (_p_V_T : Set)
    (_p_P_T : Set) (_p_E_range_match : _p_E_T) (_p_C_capt_2 : _p_C_T)
    (_p_V_consistency_rule : _p_V_T -> _p_V_T -> basics.bool__t)
    (_p_P_constr : _p_C_T -> _p_E_T -> _p_P_T)
    (abst_diag : (Datatypes.prod _p_V_T _p_P_T) -> _p_P_T)
    (abst_value : (Datatypes.prod _p_V_T _p_P_T) -> _p_V_T)
    (abst_voter : _p_V_T ->
                    _p_V_T -> _p_V_T -> (Datatypes.prod _p_V_T _p_P_T)):
    forall v1  v2  v3 : _p_V_T,
      (~Is_true ((_p_V_consistency_rule v1 v2)) /\
         Is_true ((_p_V_consistency_rule v1 v3)) /\
           ~Is_true ((_p_V_consistency_rule v2 v3))) ->
        (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3)) v3))) /\
           Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                       (_p_P_constr _p_C_capt_2 _p_E_range_match))))).
  (* Proof was flagged as assumed *)
  apply coq_builtins.magic_prove.
  Qed.
  
  (* From species vote#Imp_vote. *)
  Theorem vote_match_c3  (_p_E_T : Set) (_p_C_T : Set) (_p_V_T : Set)
    (_p_P_T : Set) (_p_E_range_match : _p_E_T) (_p_C_capt_3 : _p_C_T)
    (_p_V_consistency_rule : _p_V_T -> _p_V_T -> basics.bool__t)
    (_p_P_constr : _p_C_T -> _p_E_T -> _p_P_T)
    (abst_diag : (Datatypes.prod _p_V_T _p_P_T) -> _p_P_T)
    (abst_value : (Datatypes.prod _p_V_T _p_P_T) -> _p_V_T)
    (abst_voter : _p_V_T ->
                    _p_V_T -> _p_V_T -> (Datatypes.prod _p_V_T _p_P_T)):
    forall v1  v2  v3 : _p_V_T,
      (Is_true ((_p_V_consistency_rule v1 v2)) /\
         ~Is_true ((_p_V_consistency_rule v1 v3)) /\
           ~Is_true ((_p_V_consistency_rule v2 v3))) ->
        (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3)) v1))) /\
           Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                       (_p_P_constr _p_C_capt_3 _p_E_range_match))))).
  (* Proof was flagged as assumed *)
  apply coq_builtins.magic_prove.
  Qed.
  
  (* From species vote#Imp_vote. *)
  Theorem vote_no_match  (_p_E_T : Set) (_p_C_T : Set) (_p_V_T : Set)
    (_p_P_T : Set) (_p_E_no_match : _p_E_T) (_p_C_capt_1 : _p_C_T)
    (_p_V_consistency_rule : _p_V_T -> _p_V_T -> basics.bool__t)
    (_p_P_constr : _p_C_T -> _p_E_T -> _p_P_T)
    (abst_diag : (Datatypes.prod _p_V_T _p_P_T) -> _p_P_T)
    (abst_voter : _p_V_T ->
                    _p_V_T -> _p_V_T -> (Datatypes.prod _p_V_T _p_P_T)):
    forall v1  v2  v3 : _p_V_T,
      (~Is_true ((_p_V_consistency_rule v1 v2)) /\
         ~Is_true ((_p_V_consistency_rule v1 v3)) /\
           ~Is_true ((_p_V_consistency_rule v2 v3))) ->
        Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                    (_p_P_constr _p_C_capt_1 _p_E_no_match)))).
  (* Proof was flagged as assumed *)
  apply coq_builtins.magic_prove.
  Qed.
  
  (* From species vote#Imp_vote. *)
  Theorem vote_partial_c1  (_p_E_T : Set) (_p_C_T : Set) (_p_V_T : Set)
    (_p_P_T : Set) (_p_E_partial_match : _p_E_T) (_p_C_capt_1 : _p_C_T)
    (_p_V_consistency_rule : _p_V_T -> _p_V_T -> basics.bool__t)
    (_p_P_constr : _p_C_T -> _p_E_T -> _p_P_T)
    (abst_diag : (Datatypes.prod _p_V_T _p_P_T) -> _p_P_T)
    (abst_value : (Datatypes.prod _p_V_T _p_P_T) -> _p_V_T)
    (abst_voter : _p_V_T ->
                    _p_V_T -> _p_V_T -> (Datatypes.prod _p_V_T _p_P_T)):
    forall v1  v2  v3 : _p_V_T,
      (Is_true ((_p_V_consistency_rule v1 v2)) /\
         Is_true ((_p_V_consistency_rule v1 v3)) /\
           ~Is_true ((_p_V_consistency_rule v2 v3))) ->
        (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3)) v1))) /\
           Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                       (_p_P_constr _p_C_capt_1 _p_E_partial_match))))).
  (* Proof was flagged as assumed *)
  apply coq_builtins.magic_prove.
  Qed.
  
  (* From species vote#Imp_vote. *)
  Theorem vote_partial_c2  (_p_E_T : Set) (_p_C_T : Set) (_p_V_T : Set)
    (_p_P_T : Set) (_p_E_partial_match : _p_E_T) (_p_C_capt_2 : _p_C_T)
    (_p_V_consistency_rule : _p_V_T -> _p_V_T -> basics.bool__t)
    (_p_P_constr : _p_C_T -> _p_E_T -> _p_P_T)
    (abst_diag : (Datatypes.prod _p_V_T _p_P_T) -> _p_P_T)
    (abst_value : (Datatypes.prod _p_V_T _p_P_T) -> _p_V_T)
    (abst_voter : _p_V_T ->
                    _p_V_T -> _p_V_T -> (Datatypes.prod _p_V_T _p_P_T)):
    forall v1  v2  v3 : _p_V_T,
      (Is_true ((_p_V_consistency_rule v1 v2)) /\
         ~Is_true ((_p_V_consistency_rule v1 v3)) /\
           Is_true ((_p_V_consistency_rule v2 v3))) ->
        (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3)) v2))) /\
           Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                       (_p_P_constr _p_C_capt_2 _p_E_partial_match))))).
  (* Proof was flagged as assumed *)
  apply coq_builtins.magic_prove.
  Qed.
  
  (* From species vote#Imp_vote. *)
  Theorem vote_partial_c3  (_p_E_T : Set) (_p_C_T : Set) (_p_V_T : Set)
    (_p_P_T : Set) (_p_E_partial_match : _p_E_T) (_p_C_capt_3 : _p_C_T)
    (_p_V_consistency_rule : _p_V_T -> _p_V_T -> basics.bool__t)
    (_p_P_constr : _p_C_T -> _p_E_T -> _p_P_T)
    (abst_diag : (Datatypes.prod _p_V_T _p_P_T) -> _p_P_T)
    (abst_value : (Datatypes.prod _p_V_T _p_P_T) -> _p_V_T)
    (abst_voter : _p_V_T ->
                    _p_V_T -> _p_V_T -> (Datatypes.prod _p_V_T _p_P_T)):
    forall v1  v2  v3 : _p_V_T,
      (~Is_true ((_p_V_consistency_rule v1 v2)) /\
         Is_true ((_p_V_consistency_rule v1 v3)) /\
           Is_true ((_p_V_consistency_rule v2 v3))) ->
        (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3)) v3))) /\
           Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                       (_p_P_constr _p_C_capt_3 _p_E_partial_match))))).
  (* Proof was flagged as assumed *)
  apply coq_builtins.magic_prove.
  Qed.
  
  (* From species vote#Imp_vote. *)
  Theorem vote_perfect  (_p_E_T : Set) (_p_C_T : Set) (_p_V_T : Set)
    (_p_P_T : Set) (_p_E_perfect_match : _p_E_T) (_p_C_capt_1 : _p_C_T)
    (_p_V_consistency_rule : _p_V_T -> _p_V_T -> basics.bool__t)
    (_p_P_constr : _p_C_T -> _p_E_T -> _p_P_T)
    (abst_diag : (Datatypes.prod _p_V_T _p_P_T) -> _p_P_T)
    (abst_value : (Datatypes.prod _p_V_T _p_P_T) -> _p_V_T)
    (abst_voter : _p_V_T ->
                    _p_V_T -> _p_V_T -> (Datatypes.prod _p_V_T _p_P_T)):
    forall v1  v2  v3 : _p_V_T,
      (Is_true ((_p_V_consistency_rule v1 v2)) /\
         Is_true ((_p_V_consistency_rule v2 v3)) /\
           Is_true ((_p_V_consistency_rule v1 v3))) ->
        (Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3)) v1))) /\
           Is_true ((((basics._equal_ _) (abst_diag (abst_voter v1 v2 v3))
                       (_p_P_constr _p_C_capt_1 _p_E_perfect_match))))).
  (* Proof was flagged as assumed *)
  apply coq_builtins.magic_prove.
  Qed.
  
  (* From species vote#Imp_vote. *)
  Theorem voter_returns_an_input_value  (_p_E_T : Set) (_p_C_T : Set)
    (_p_V_T : Set) (_p_P_T : Set) (_p_P_valid : _p_P_T -> basics.bool__t)
    (abst_diag : (Datatypes.prod _p_V_T _p_P_T) -> _p_P_T)
    (abst_value : (Datatypes.prod _p_V_T _p_P_T) -> _p_V_T)
    (abst_voter : _p_V_T ->
                    _p_V_T -> _p_V_T -> (Datatypes.prod _p_V_T _p_P_T)):
    forall v1  v2  v3 : _p_V_T,
      Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3)) v1))) \/
        Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3)) v2))) \/
          Is_true ((((basics._equal_ _) (abst_value (abst_voter v1 v2 v3))
                      v3))) \/
            (~Is_true (((_p_P_valid (abst_diag (abst_voter v1 v2 v3)))))).
  (* Proof was flagged as assumed *)
  apply coq_builtins.magic_prove.
  Qed.
  
End Imp_vote.

