46
This is a proof cache file generated by zvtov.
35
zvtov version 0.6.0 [32] 2009-12-03
2097
zenon -x focal -q -short -max-time 5m -x induct
zenon version 0.8.0 [a263] 2014-10-21
$Id: 8d3e74063353abcfefb6c4de625febcd0a10705c $
$Id: 0bb7ad8565ca1ee59ff5edffa7ed2b2d882c4f93 $
$Id: 8e2e984e1f30ddc3be6823ddc9ccf8f6877e7be1 $
$Id: e9a1445bc3b916bc344e12b5e1465a20b7569e8a $
$Id: 3543f411fd78f652dbf8224d7fe56e5a2c83df42 $
$Id: c483db8583b833b9d90ee5c1b90af4da4befefcf $
$Id: e962f33dc5753e15a88c3aef2170d1c552a80be7 $
$Id: 239c76ade6485f65b50499d4af616ed6394f9892 $
$Id: 960020f638c3d1f11c58184ba83acf7a567f497e $
$Id: 0d2f93a609978187340ccdc540d8b4709e3e3626 $
$Id: 0bba51e302cc27e4dcf7dd8783da6e6517e1ca2e $
$Id: 123bd672b267fe3d464ae13f9c8b98e7475c12b6 $
$Id: c891513dc0a7214f92f52e8c6f59be0c3a6bdc75 $
$Id: d674fd7fb29144c5978cd8f2421c4147c86781c8 $
$Id: 75e59fa998ba43be0fae0fc16452e5c75f01a317 $
$Id: lexcoq.mll,v 1.16 2012-04-11 18:27:26 doligez Exp $
$Id: parsecoq.mly,v 1.34 2012-04-11 18:27:26 doligez Exp $
$Id: lextptp.mll,v 1.7 2012-04-24 17:32:04 doligez Exp $
$Id: parsetptp.mly,v 1.9 2012-04-24 17:32:04 doligez Exp $
$Id: lexzen.mll,v 1.13 2012-04-11 18:27:26 doligez Exp $
$Id: parsezen.mly,v 1.16 2012-04-11 18:27:26 doligez Exp $
$Id: feacf069839a8c95e03ad2e3dbb03601a3a6607d $
$Id: 200c027cd2683053eb227e68a492c4961e2a5784 $
$Id: 9f00cd3d0af0bdd28d17b64ab051f9594255e67e $
$Id: 52308a30d82a014cf1f8efa2799df8b300a0c678 $
$Id: caed5ca44e929aef76195d58649e867d28c61885 $
$Id: 8bef787c38724f2923554c6d72f7b8d9c6f4ab2b $
$Id: 799ea945a49520c4ac8520bb6c232fbe8b53bed8 $
$Id: 8cdb504db763cd885675be46e2a542d5ec676e25 $
$Id: f21acd58472bbe06f2040f6b4df14b9bcece4be1 $
$Id: 71c3ed8bb8ff5d2866be86682d871a07f130b74f $
$Id: 4da3a63d30c663a2457badcc920df654f154b47b $
$Id: d0534a6a0c9a349b8289a70cb8f84297d3678ef6 $
$Id: f64f126ba41a6797d6643ecfd2290bdc3bcd7c08 $
$Id: 03e455e19c9d3e35e5edbd6eee048f53fb55908f $
$Id: af6004ec6e3900adb00b13aa1e67da873f9dd706 $
$Id: 81e748142c40d6382b9ceac00a08d35207607f19 $
$Id: cd90a6b20441b688fbac060141ef245237cb7320 $
$Id: 7449d985db563f705bdded478f605f03b7111602 $
$Id: 34c58a3afac083cc607b116f4d95546502fbd4b7 $
source checksum: 20927 1

term

begin
592

%%begin-auto-proof
%%name: for_zenon_equal_reflexive
    
    
    
    (* Methods to use for automated proof. *)
    (* For species parameter method used via "by property num_capteur#P!equal_reflexive". *)
    Parameter _p_P_equal_reflexive :
      forall x : _p_P_T, Is_true ((_p_P_equal x x)).
    (* For method of Self used via "by definition of !equal". *)
    Definition abst_equal (x : abst_T) (y : abst_T) : basics.bool__t :=
      (_p_P_equal x y).
    (* Theorem's body. *)
    Theorem for_zenon_equal_reflexive :
    forall x : abst_T, Is_true ((abst_equal x x)).
%%end-auto-proof
0
3168977d1ef05885b7efaeabfd37a438
proof
478
Theorem for_zenon_equal_reflexive:(forall x:abst_T,(Is_true (abst_equal
x x))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notallex (fun x:abst_T=>(Is_true (
abst_equal x x))) (fun zenon_H6=>(zenon_ex abst_T (fun x:abst_T=>(~(
Is_true (abst_equal x x)))) (fun(zenon_Tx_e:abst_T) zenon_H5=>(let
zenon_H3:=zenon_H5 in (zenon_all _p_P_T (fun x:_p_P_T=>(Is_true (
_p_P_equal x x))) zenon_Tx_e (fun zenon_H2=>(zenon_H3 zenon_H2))
_p_P_equal_reflexive))) zenon_H6)) zenon_G)))).
Qed.

0
912815f6ea038f1b7baa0396ec775ab3
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
672

%%begin-auto-proof
%%name: for_zenon_equal_symmetric
    
    
    
    (* Methods to use for automated proof. *)
    (* For species parameter method used via "by property num_capteur#P!equal_symmetric". *)
    Parameter _p_P_equal_symmetric :
      forall x  y : _p_P_T,
        Is_true ((_p_P_equal x y)) -> Is_true ((_p_P_equal y x)).
    (* For method of Self used via "by definition of !equal". *)
    Definition abst_equal (x : abst_T) (y : abst_T) : basics.bool__t :=
      (_p_P_equal x y).
    (* Theorem's body. *)
    Theorem for_zenon_equal_symmetric :
    forall x  y : abst_T,
      Is_true ((abst_equal x y)) -> Is_true ((abst_equal y x)).
%%end-auto-proof
0
b0e81628a5e4f25aeab69c4270cf21cb
proof
1275
Theorem for_zenon_equal_symmetric:(forall x:abst_T,(forall y:abst_T,((
Is_true (abst_equal x y))->(Is_true (abst_equal y x))))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_notallex (fun x:abst_T=>(forall y:abst_T,((
Is_true (abst_equal x y))->(Is_true (abst_equal y x))))) (fun zenon_Hf=>
(zenon_ex abst_T (fun x:abst_T=>(~(forall y:abst_T,((Is_true (
abst_equal x y))->(Is_true (abst_equal y x)))))) (fun(zenon_Tx_c:abst_T)
 zenon_He=>(zenon_notallex (fun y:abst_T=>((Is_true (abst_equal
zenon_Tx_c y))->(Is_true (abst_equal y zenon_Tx_c)))) (fun zenon_Hd=>(
zenon_ex abst_T (fun y:abst_T=>(~((Is_true (abst_equal zenon_Tx_c y))->(
Is_true (abst_equal y zenon_Tx_c))))) (fun(zenon_Ty_j:abst_T) zenon_Hc=>
(zenon_notimply _ _ (fun zenon_Hb zenon_Ha=>(let zenon_H5:=zenon_Hb in (
let zenon_H4:=zenon_Ha in (zenon_all _p_P_T (fun x:_p_P_T=>(forall y
:_p_P_T,((Is_true (_p_P_equal x y))->(Is_true (_p_P_equal y x)))))
zenon_Tx_c (fun zenon_H8=>(zenon_all _p_P_T (fun y:_p_P_T=>((Is_true (
_p_P_equal zenon_Tx_c y))->(Is_true (_p_P_equal y zenon_Tx_c))))
zenon_Ty_j (fun zenon_H7=>(zenon_imply _ _ (fun zenon_H6=>(zenon_H6
zenon_H5)) (fun zenon_H3=>(zenon_H4 zenon_H3)) zenon_H7)) zenon_H8))
_p_P_equal_symmetric)))) zenon_Hc)) zenon_Hd)) zenon_He)) zenon_Hf))
zenon_G)))).
Qed.

0
fa2989bdf374bc76dc48a0323a63d174
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
762

%%begin-auto-proof
%%name: for_zenon_equal_transitive
    
    
    
    (* Methods to use for automated proof. *)
    (* For species parameter method used via "by property num_capteur#P!equal_transitive". *)
    Parameter _p_P_equal_transitive :
      forall x  y  z : _p_P_T,
        (Is_true ((_p_P_equal x y)) /\ Is_true ((_p_P_equal y z))) ->
          Is_true ((_p_P_equal x z)).
    (* For method of Self used via "by definition of !equal". *)
    Definition abst_equal (x : abst_T) (y : abst_T) : basics.bool__t :=
      (_p_P_equal x y).
    (* Theorem's body. *)
    Theorem for_zenon_equal_transitive :
    forall x  y  z : abst_T,
      Is_true ((abst_equal x y)) ->
        Is_true ((abst_equal y z)) -> Is_true ((abst_equal x z)).
%%end-auto-proof
0
87c34714fc509aa73afe414e8f94ca79
proof
4096
Theorem for_zenon_equal_transitive:(forall x:abst_T,(forall y:abst_T,(
forall z:abst_T,((Is_true (abst_equal x y))->((Is_true (abst_equal y z))
->(Is_true (abst_equal x z))))))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(let zenon_H13:=(fun zenon_H23=>(zenon_notallex (
fun x:abst_T=>(forall y:abst_T,(forall z:abst_T,((Is_true (abst_equal x
y))->((Is_true (abst_equal y z))->(Is_true (abst_equal x z))))))) (fun
zenon_H37=>(zenon_ex abst_T (fun x:abst_T=>(~(forall y:abst_T,(forall z
:abst_T,((Is_true (abst_equal x y))->((Is_true (abst_equal y z))->(
Is_true (abst_equal x z)))))))) (fun(zenon_Tx_u:abst_T) zenon_H36=>(
zenon_notallex (fun y:abst_T=>(forall z:abst_T,((Is_true (abst_equal
zenon_Tx_u y))->((Is_true (abst_equal y z))->(Is_true (abst_equal
zenon_Tx_u z)))))) (fun zenon_H35=>(zenon_ex abst_T (fun y:abst_T=>(~(
forall z:abst_T,((Is_true (abst_equal zenon_Tx_u y))->((Is_true (
abst_equal y z))->(Is_true (abst_equal zenon_Tx_u z))))))) (fun(
zenon_Ty_v:abst_T) zenon_H34=>(zenon_notallex (fun z:abst_T=>((Is_true (
abst_equal zenon_Tx_u zenon_Ty_v))->((Is_true (abst_equal zenon_Ty_v z))
->(Is_true (abst_equal zenon_Tx_u z))))) (fun zenon_H33=>(zenon_ex
abst_T (fun z:abst_T=>(~((Is_true (abst_equal zenon_Tx_u zenon_Ty_v))->(
(Is_true (abst_equal zenon_Ty_v z))->(Is_true (abst_equal zenon_Tx_u z))
)))) (fun(zenon_Tz_x:abst_T) zenon_H32=>(zenon_notimply _ _ (fun
zenon_H30 zenon_H31=>(zenon_notimply _ _ (fun zenon_H2f zenon_H2e=>(let
zenon_H1e:=zenon_H30 in (let zenon_H19:=zenon_H2f in (let zenon_H18
:=zenon_H2e in (let zenon_H2b:=(fun zenon_H2d=>(zenon_and _ _ (fun
zenon_H29 zenon_H1f=>(zenon_H1f zenon_H1e)) zenon_H2d)) in (let
zenon_H16:=(fun zenon_H2c=>(zenon_subst _ (fun zenon_Vf=>(Is_true
zenon_Vf)) (_p_P_equal zenon_Ty_v zenon_Tz_x) (_p_P_equal zenon_Tx_u
zenon_Tz_x) (fun zenon_H1a=>(zenon_subst _ (fun zenon_Vg=>(~((
_p_P_equal zenon_Vg zenon_Tz_x) = (_p_P_equal zenon_Tx_u zenon_Tz_x))))
zenon_Ty_v zenon_Tx_u (fun zenon_H26=>(zenon_notand _ _ (fun zenon_H2a=>
(zenon_H2a (fun zenon_H28=>(let zenon_H25:=(fun zenon_H27=>(zenon_subst
_ (fun zenon_Vh=>(zenon_Vh = zenon_Tx_u)) zenon_Tx_u zenon_Ty_v (fun
zenon_H29=>(zenon_H29 zenon_H28)) zenon_H26 zenon_H27)) in (zenon_noteq
_ zenon_Tx_u zenon_H25))))) (fun zenon_H24=>(zenon_H24 (fun zenon_H1e=>(
zenon_all _p_P_T (fun x:_p_P_T=>(forall y:_p_P_T,(forall z:_p_P_T,((
Is_true (_p_P_equal x y))->((Is_true (_p_P_equal y z))->(Is_true (
_p_P_equal x z))))))) zenon_Tx_u (fun zenon_H22=>(zenon_all _p_P_T (fun
y:_p_P_T=>(forall z:_p_P_T,((Is_true (_p_P_equal zenon_Tx_u y))->((
Is_true (_p_P_equal y z))->(Is_true (_p_P_equal zenon_Tx_u z))))))
zenon_Ty_v (fun zenon_H21=>(zenon_all _p_P_T (fun z:_p_P_T=>((Is_true (
_p_P_equal zenon_Tx_u zenon_Ty_v))->((Is_true (_p_P_equal zenon_Ty_v z))
->(Is_true (_p_P_equal zenon_Tx_u z))))) zenon_Tz_x (fun zenon_H20=>(
zenon_imply _ _ (fun zenon_H1f=>(zenon_H1f zenon_H1e)) (fun zenon_H1d=>(
zenon_imply _ _ (fun zenon_H1c=>(zenon_H1c zenon_H19)) (fun zenon_H1b=>(
zenon_H18 zenon_H1b)) zenon_H1d)) zenon_H20)) zenon_H21)) zenon_H22))
zenon_H23)))) zenon_H2b)) (zenon_notnot _ (refl_equal (_p_P_equal
zenon_Tx_u zenon_Tz_x))) zenon_H1a)) zenon_H18 zenon_H19)) in (
zenon_noteq _ zenon_Tz_x zenon_H16))))))) zenon_H31)) zenon_H32))
zenon_H33)) zenon_H34)) zenon_H35)) zenon_H36)) zenon_H37)) zenon_G))
in (zenon_notall _p_P_T (fun x:_p_P_T=>(forall y:_p_P_T,(forall z
:_p_P_T,((Is_true (_p_P_equal x y))->((Is_true (_p_P_equal y z))->(
Is_true (_p_P_equal x z))))))) (fun(zenon_Tx_k:_p_P_T) zenon_H12=>(
zenon_notall _p_P_T (fun y:_p_P_T=>(forall z:_p_P_T,((Is_true (
_p_P_equal zenon_Tx_k y))->((Is_true (_p_P_equal y z))->(Is_true (
_p_P_equal zenon_Tx_k z)))))) (fun(zenon_Ty_l:_p_P_T) zenon_H11=>(
zenon_notall _p_P_T (fun z:_p_P_T=>((Is_true (_p_P_equal zenon_Tx_k
zenon_Ty_l))->((Is_true (_p_P_equal zenon_Ty_l z))->(Is_true (
_p_P_equal zenon_Tx_k z))))) (fun(zenon_Tz_n:_p_P_T) zenon_H10=>(
zenon_notimply _ _ (fun zenon_H6 zenon_Hf=>(zenon_notimply _ _ (fun
zenon_H4 zenon_H3=>(zenon_all _p_P_T (fun x:_p_P_T=>(forall y:_p_P_T,(
forall z:_p_P_T,(((Is_true (_p_P_equal x y
753
))/\(Is_true (_p_P_equal y z))
)->(Is_true (_p_P_equal x z)))))) zenon_Tx_k (fun zenon_He=>(zenon_all
_p_P_T (fun y:_p_P_T=>(forall z:_p_P_T,(((Is_true (_p_P_equal
zenon_Tx_k y))/\(Is_true (_p_P_equal y z)))->(Is_true (_p_P_equal
zenon_Tx_k z))))) zenon_Ty_l (fun zenon_Hc=>(zenon_all _p_P_T (fun z
:_p_P_T=>(((Is_true (_p_P_equal zenon_Tx_k zenon_Ty_l))/\(Is_true (
_p_P_equal zenon_Ty_l z)))->(Is_true (_p_P_equal zenon_Tx_k z))))
zenon_Tz_n (fun zenon_H9=>(zenon_imply _ _ (fun zenon_H8=>(zenon_notand
_ _ (fun zenon_H7=>(zenon_H7 zenon_H6)) (fun zenon_H5=>(zenon_H5
zenon_H4)) zenon_H8)) (fun zenon_H2=>(zenon_H3 zenon_H2)) zenon_H9))
zenon_Hc)) zenon_He)) _p_P_equal_transitive)) zenon_Hf)) zenon_H10))
zenon_H11)) zenon_H12)) zenon_H13))))).
Qed.

0
63b2dd5b241766358cca0ee8beabdb18
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
885

%%begin-auto-proof
%%name: for_zenon_all_field_different_0_1
    
    
    
    (* Methods to use for automated proof. *)
    (* For method of Self used via "by definition of !capt_1". *)
    Definition abst_capt_1 : abst_T := _p_P_zero.
    (* For method of Self used via "by definition of !capt_2". *)
    Definition abst_capt_2 : abst_T := (_p_P_s abst_capt_1).
    (* For method of Self used via "by definition of !equal". *)
    Definition abst_equal (x : abst_T) (y : abst_T) : basics.bool__t :=
      (_p_P_equal x y).
    (* For species parameter method used via "by property num_capteur#P!zero_is_not_successor". *)
    Parameter _p_P_zero_is_not_successor :
      forall x : _p_P_T, ~Is_true ((_p_P_equal _p_P_zero (_p_P_s x))).
    (* Theorem's body. *)
    Theorem for_zenon_all_field_different_0_1 :
    ~Is_true (((abst_equal abst_capt_1 abst_capt_2))).
%%end-auto-proof
0
2d094c9f387ff1a6edb530e9d2eabd12
proof
1300
Theorem for_zenon_all_field_different_0_1:(~(Is_true (abst_equal
abst_capt_1 abst_capt_2))).
Proof.
exact(
let zenon_L1_:((~(abst_capt_1 = _p_P_zero))->False):=
(fun zenon_H2:(~(abst_capt_1 = _p_P_zero))=>(let zenon_H3:=zenon_H2 in (
zenon_noteq _ _p_P_zero zenon_H3)))in
(NNPP _ (fun zenon_G=>(zenon_G (fun zenon_H9=>(let zenon_H5:=zenon_H9
in (zenon_all _p_P_T (fun x:_p_P_T=>(~(Is_true (_p_P_equal _p_P_zero (
_p_P_s x))))) _p_P_zero (fun zenon_H4=>(zenon_subst _ (fun zenon_Vf=>(
Is_true zenon_Vf)) (_p_P_equal abst_capt_1 abst_capt_2) (_p_P_equal
_p_P_zero (_p_P_s _p_P_zero)) (fun zenon_H6=>(zenon_subst _ (fun
zenon_Vi=>(~((_p_P_equal zenon_Vi abst_capt_2) = (_p_P_equal _p_P_zero (
_p_P_s _p_P_zero))))) abst_capt_1 _p_P_zero (fun zenon_H2=>(zenon_L1_
zenon_H2)) (zenon_subst _ (fun zenon_Vg=>(~((_p_P_equal _p_P_zero
zenon_Vg) = (_p_P_equal _p_P_zero (_p_P_s _p_P_zero))))) abst_capt_2 (
_p_P_s _p_P_zero) (fun zenon_H8=>(let zenon_H7:=zenon_H8 in (
zenon_subst _ (fun zenon_Vh=>(~((_p_P_s zenon_Vh) = (_p_P_s _p_P_zero)))
) abst_capt_1 _p_P_zero (fun zenon_H2=>(zenon_L1_ zenon_H2)) (
zenon_notnot _ (refl_equal (_p_P_s _p_P_zero))) zenon_H7))) (
zenon_notnot _ (refl_equal (_p_P_equal _p_P_zero (_p_P_s _p_P_zero)))))
zenon_H6)) zenon_H4 zenon_H5)) _p_P_zero_is_not_successor))))))).
Qed.

0
43346293a931f7fea65fef5648538c9b
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
885

%%begin-auto-proof
%%name: for_zenon_all_field_different_0_2
    
    
    
    (* Methods to use for automated proof. *)
    (* For method of Self used via "by definition of !capt_1". *)
    Definition abst_capt_1 : abst_T := _p_P_zero.
    (* For method of Self used via "by definition of !capt_3". *)
    Definition abst_capt_3 : abst_T := (_p_P_s abst_capt_2).
    (* For method of Self used via "by definition of !equal". *)
    Definition abst_equal (x : abst_T) (y : abst_T) : basics.bool__t :=
      (_p_P_equal x y).
    (* For species parameter method used via "by property num_capteur#P!zero_is_not_successor". *)
    Parameter _p_P_zero_is_not_successor :
      forall x : _p_P_T, ~Is_true ((_p_P_equal _p_P_zero (_p_P_s x))).
    (* Theorem's body. *)
    Theorem for_zenon_all_field_different_0_2 :
    ~Is_true (((abst_equal abst_capt_1 abst_capt_3))).
%%end-auto-proof
0
4aef78446bb7cd3319a77f6a7c7fb1f6
proof
1038
Theorem for_zenon_all_field_different_0_2:(~(Is_true (abst_equal
abst_capt_1 abst_capt_3))).
Proof.
exact(
(NNPP _ (fun zenon_G=>(zenon_G (fun zenon_H9=>(let zenon_H3:=zenon_H9
in (zenon_all _p_P_T (fun x:_p_P_T=>(~(Is_true (_p_P_equal _p_P_zero (
_p_P_s x))))) abst_capt_2 (fun zenon_H2=>(zenon_subst _ (fun zenon_Vf=>(
Is_true zenon_Vf)) (_p_P_equal abst_capt_1 abst_capt_3) (_p_P_equal
_p_P_zero (_p_P_s abst_capt_2)) (fun zenon_H4=>(zenon_subst _ (fun
zenon_Vh=>(~((_p_P_equal zenon_Vh abst_capt_3) = (_p_P_equal _p_P_zero (
_p_P_s abst_capt_2))))) abst_capt_1 _p_P_zero (fun zenon_H8=>(let
zenon_H7:=zenon_H8 in (zenon_noteq _ _p_P_zero zenon_H7))) (zenon_subst
_ (fun zenon_Vg=>(~((_p_P_equal _p_P_zero zenon_Vg) = (_p_P_equal
_p_P_zero (_p_P_s abst_capt_2))))) abst_capt_3 (_p_P_s abst_capt_2) (
fun zenon_H6=>(let zenon_H5:=zenon_H6 in (zenon_noteq _ (_p_P_s
abst_capt_2) zenon_H5))) (zenon_notnot _ (refl_equal (_p_P_equal
_p_P_zero (_p_P_s abst_capt_2))))) zenon_H4)) zenon_H2 zenon_H3))
_p_P_zero_is_not_successor))))))).
Qed.

0
1f1f94e60cf3a4e85abf94210eb0f30e
err
0
d41d8cd98f00b204e9800998ecf8427e
end
begin
1274

%%begin-auto-proof
%%name: for_zenon_all_field_different_1_2
    
    
    
    (* Methods to use for automated proof. *)
    (* For method of Self used via "by definition of !capt_1". *)
    Definition abst_capt_1 : abst_T := _p_P_zero.
    (* For method of Self used via "by definition of !capt_2". *)
    Definition abst_capt_2 : abst_T := (_p_P_s abst_capt_1).
    (* For method of Self used via "by definition of !capt_3". *)
    Definition abst_capt_3 : abst_T := (_p_P_s abst_capt_2).
    (* For method of Self used via "by definition of !equal". *)
    Definition abst_equal (x : abst_T) (y : abst_T) : basics.bool__t :=
      (_p_P_equal x y).
    (* For species parameter method used via "by property num_capteur#P!zero_is_not_successor". *)
    Parameter _p_P_zero_is_not_successor :
      forall x : _p_P_T, ~Is_true ((_p_P_equal _p_P_zero (_p_P_s x))).
    (* For species parameter method used via "by property num_capteur#P!succ_is_an_injection". *)
    Parameter _p_P_succ_is_an_injection :
      forall x  y : _p_P_T,
        Is_true ((_p_P_equal (_p_P_s x) (_p_P_s y))) ->
          Is_true ((_p_P_equal x y)).
    (* Theorem's body. *)
    Theorem for_zenon_all_field_different_1_2 :
    ~Is_true (((abst_equal abst_capt_2 abst_capt_3))).
%%end-auto-proof
0
fdb18cb0684104bc54dab62566e4a663
proof
2760
Theorem for_zenon_all_field_different_1_2:(~(Is_true (abst_equal
abst_capt_2 abst_capt_3))).
Proof.
exact(
let zenon_L1_:((~((_p_P_s abst_capt_1) = (_p_P_s _p_P_zero)))->False):=
(fun zenon_H3:(~((_p_P_s abst_capt_1) = (_p_P_s _p_P_zero)))=>(
zenon_subst _ (fun zenon_Vf=>(~((_p_P_s zenon_Vf) = (_p_P_s _p_P_zero)))
) abst_capt_1 _p_P_zero (fun zenon_H5=>(let zenon_H4:=zenon_H5 in (
zenon_noteq _ _p_P_zero zenon_H4))) (zenon_notnot _ (refl_equal (_p_P_s
_p_P_zero))) zenon_H3))in
let zenon_L2_:((~(abst_capt_3 = (_p_P_s (_p_P_s abst_capt_1))))->False):=
(fun zenon_H6:(~(abst_capt_3 = (_p_P_s (_p_P_s abst_capt_1))))=>(let
zenon_H7:=zenon_H6 in (zenon_subst _ (fun zenon_Vg=>(~((_p_P_s zenon_Vg)
 = (_p_P_s (_p_P_s abst_capt_1))))) abst_capt_2 (_p_P_s abst_capt_1) (
fun zenon_H9=>(let zenon_H8:=zenon_H9 in (zenon_noteq _ (_p_P_s
abst_capt_1) zenon_H8))) (zenon_notnot _ (refl_equal (_p_P_s (_p_P_s
abst_capt_1)))) zenon_H7)))in
(NNPP _ (fun zenon_G=>(zenon_G (fun zenon_H13=>(let zenon_He:=zenon_H13
in (zenon_all _p_P_T (fun x:_p_P_T=>(~(Is_true (_p_P_equal _p_P_zero (
_p_P_s x))))) _p_P_zero (fun zenon_Ha=>(zenon_all _p_P_T (fun x:_p_P_T=>
(forall y:_p_P_T,((Is_true (_p_P_equal (_p_P_s x) (_p_P_s y)))->(
Is_true (_p_P_equal x y))))) _p_P_zero (fun zenon_H12=>(zenon_all
_p_P_T (fun y:_p_P_T=>((Is_true (_p_P_equal (_p_P_s _p_P_zero) (_p_P_s
y)))->(Is_true (_p_P_equal _p_P_zero y)))) (_p_P_s abst_capt_1) (fun
zenon_H11=>(zenon_imply _ _ (fun zenon_Hd=>(zenon_subst _ (fun
zenon_Vj=>(Is_true zenon_Vj)) (_p_P_equal abst_capt_2 abst_capt_3) (
_p_P_equal (_p_P_s _p_P_zero) (_p_P_s (_p_P_s abst_capt_1))) (fun
zenon_Hf=>(zenon_subst _ (fun zenon_Vl=>(~((_p_P_equal zenon_Vl
abst_capt_3) = (_p_P_equal (_p_P_s _p_P_zero) (_p_P_s (_p_P_s
abst_capt_1)))))) abst_capt_2 (_p_P_s _p_P_zero) (fun zenon_H10=>(let
zenon_H3:=zenon_H10 in (zenon_L1_ zenon_H3))) (zenon_subst _ (fun
zenon_Vk=>(~((_p_P_equal (_p_P_s _p_P_zero) zenon_Vk) = (_p_P_equal (
_p_P_s _p_P_zero) (_p_P_s (_p_P_s abst_capt_1)))))) abst_capt_3 (_p_P_s
(_p_P_s abst_capt_1)) (fun zenon_H6=>(zenon_L2_ zenon_H6)) (
zenon_notnot _ (refl_equal (_p_P_equal (_p_P_s _p_P_zero) (_p_P_s (
_p_P_s abst_capt_1)))))) zenon_Hf)) zenon_Hd zenon_He)) (fun zenon_Hb=>(
zenon_subst _ (fun zenon_Vh=>(Is_true zenon_Vh)) (_p_P_equal _p_P_zero (
_p_P_s abst_capt_1)) (_p_P_equal _p_P_zero (_p_P_s _p_P_zero)) (fun
zenon_Hc=>(zenon_subst _ (fun zenon_Vi=>(~((_p_P_equal _p_P_zero
zenon_Vi) = (_p_P_equal _p_P_zero (_p_P_s _p_P_zero))))) (_p_P_s
abst_capt_1) (_p_P_s _p_P_zero) (fun zenon_H3=>(zenon_L1_ zenon_H3)) (
zenon_notnot _ (refl_equal (_p_P_equal _p_P_zero (_p_P_s _p_P_zero))))
zenon_Hc)) zenon_Ha zenon_Hb)) zenon_H11)) zenon_H12))
_p_P_succ_is_an_injection)) _p_P_zero_is_not_successor))))))).
Qed.

0
48544834d07525436e57c15655aa895b
err
0
d41d8cd98f00b204e9800998ecf8427e
end
