open "basics";;
open "sets";;

-- Copied from Strict_partial_order
-- where leq is not defined

species Strictly_Ordered_set_S (Param is Setoid) =

  inherit Anti_setoid;

  signature lt: Self -> Self -> bool;

  property lt_is_irreflexive : all x : Self, ~(!lt(x, x));

  property lt_is_transitive : all x y z : Self,
    !lt(x, y) -> !lt(y, z) -> !lt(x, z);

  theorem lt_is_asymetric : all x y : Self, !lt(x, y) -> ~(!lt(y, x))
  proof =
    <1>1 assume x : Self, y : Self,
         hypothesis H: !lt(x, y),
         prove ~(!lt(y, x))
         <2>1 hypothesis F: !lt(y, x),
              prove !lt(x, x) by hypothesis H, F property !lt_is_transitive
         <2>f qed by step <2>1 property !lt_is_irreflexive
    <1>f conclude
    ;
  
  (** gt is obtained by duality from lt, sometimes called a (strict)
  preference *)

  let gt(x, y) = !lt(y, x);

  theorem gt_is_lt: all x y : Self,
    !gt(x, y) <-> !lt(y, x)
    proof = by definition of gt;

  theorem gt_is_irreflexive: all x : Self, ~(gt(x, x))
    proof = by property gt_is_lt, !lt_is_irreflexive;

end;;
